{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\copy\\copy.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\copy\\copy.tsx","mtime":1649070093356},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/copy/copy.tsx"],"names":["React","Component","copyToClipboard","EuiToolTip","EuiCopy","props","isCopied","textToCopy","setState","tooltipText","afterMessage","beforeMessage","state","children","rest","resetTooltipText","copy"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAA0D,OAA1D;;AAEA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,UAAT,QAA4C,aAA5C;AA6BA,WAAaC,OAAb;AAAA;;AAAA;;AAKE,mBAAYC,KAAZ,EAAiC;AAAA;;AAAA;;AAC/B,8BAAMA,KAAN;;AAD+B,2DAQ1B,YAAM;AACX,UAAMC,QAAQ,GAAGJ,eAAe,CAAC,MAAKG,KAAL,CAAWE,UAAZ,CAAhC;;AACA,UAAID,QAAJ,EAAc;AACZ,cAAKE,QAAL,CAAc;AACZC,UAAAA,WAAW,EAAE,MAAKJ,KAAL,CAAWK;AADZ,SAAd;AAGD;AACF,KAfgC;;AAAA,uEAiBd,YAAM;AACvB,YAAKF,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAE,MAAKJ,KAAL,CAAWM;AADZ,OAAd;AAGD,KArBgC;;AAG/B,UAAKC,KAAL,GAAa;AACXH,MAAAA,WAAW,EAAE,MAAKJ,KAAL,CAAWM;AADb,KAAb;AAH+B;AAMhC;;AAXH;AAAA;AAAA,6BA4BW;AAAA,wBAOH,KAAKN,KAPF;AAAA,UAELQ,QAFK,eAELA,QAFK;AAAA,UAGLN,UAHK,eAGLA,UAHK;AAAA,UAILI,aAJK,eAILA,aAJK;AAAA,UAKLD,YALK,eAKLA,YALK;AAAA,UAMFI,IANE;;AASP;AAAA;AACE;AACA;AACA,4BAAC,UAAD;AACE,UAAA,OAAO,EAAE,KAAKF,KAAL,CAAWH,WADtB;AAEE,UAAA,UAAU,EAAE,KAAKM;AAFnB,WAGMD,IAHN,GAIGD,QAAQ,CAAC,KAAKG,IAAN,CAJX;AAHF;AAUD;AA/CH;;AAAA;AAAA,EAA6Bf,SAA7B;;gBAAaG,O,kBACW;AACpBM,EAAAA,YAAY,EAAE;AADM,C;;;;AApDxB;AACA;;;;AADA;AACA;;;;AADA;AACA;AACA;;;;AAFA;AACA;AACA","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { copyToClipboard } from '../../services';\nimport { EuiToolTip } from '../tool_tip';\nexport class EuiCopy extends Component {\n  static defaultProps = {\n    afterMessage: 'Copied'\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tooltipText: this.props.beforeMessage\n    };\n  }\n\n  copy = () => {\n    const isCopied = copyToClipboard(this.props.textToCopy);\n\n    if (isCopied) {\n      this.setState({\n        tooltipText: this.props.afterMessage\n      });\n    }\n  };\n  resetTooltipText = () => {\n    this.setState({\n      tooltipText: this.props.beforeMessage\n    });\n  };\n\n  render() {\n    const {\n      children,\n      textToCopy,\n      beforeMessage,\n      afterMessage,\n      ...rest\n    } = this.props;\n    return (// See `src/components/tool_tip/tool_tip.js` for explanation of below eslint-disable\n      // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n      <EuiToolTip content={this.state.tooltipText} onMouseOut={this.resetTooltipText} {...rest}>\n        {children(this.copy)}\n      </EuiToolTip>\n    );\n  }\n\n}\nEuiCopy.propTypes = {\n  /**\n     * Text that will be copied to clipboard when copy function is executed.\n     */\n  textToCopy: PropTypes.string.isRequired,\n\n  /**\n     * Tooltip message displayed before copy function is called.\n     */\n  beforeMessage: PropTypes.node,\n\n  /**\n     * Tooltip message displayed after copy function is called that lets the user know that\n     * 'textToCopy' has been copied to the clipboard.\n     */\n  afterMessage: PropTypes.node,\n\n  /**\n     * Function that must return a component. First argument is 'copy' function.\n     * Use your own logic to create the component that users interact with when triggering copy.\n     */\n  children: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string\n};\n\ntry {\n  EuiCopy.__docgenInfo = {\n    description: '',\n    displayName: 'EuiCopy',\n    methods: [],\n    props: {\n      textToCopy: {\n        defaultValue: null,\n        description: 'Text that will be copied to clipboard when copy function is executed.',\n        name: 'textToCopy',\n        parent: {\n          fileName: 'eui/src/components/copy/copy.tsx',\n          name: 'EuiCopyProps'\n        },\n        required: true,\n        type: {\n          name: 'string'\n        }\n      },\n      beforeMessage: {\n        defaultValue: null,\n        description: 'Tooltip message displayed before copy function is called.',\n        name: 'beforeMessage',\n        parent: {\n          fileName: 'eui/src/components/copy/copy.tsx',\n          name: 'EuiCopyProps'\n        },\n        required: false,\n        type: {\n          name: 'ReactNode'\n        }\n      },\n      afterMessage: {\n        defaultValue: {\n          value: 'Copied'\n        },\n        description: 'Tooltip message displayed after copy function is called that lets the user know that\\n' + \"'textToCopy' has been copied to the clipboard.\",\n        name: 'afterMessage',\n        parent: {\n          fileName: 'eui/src/components/copy/copy.tsx',\n          name: 'EuiCopyProps'\n        },\n        required: false,\n        type: {\n          name: 'ReactNode'\n        }\n      },\n      children: {\n        defaultValue: null,\n        description: \"Function that must return a component. First argument is 'copy' function.\\n\" + 'Use your own logic to create the component that users interact with when triggering copy.',\n        name: 'children',\n        parent: {\n          fileName: 'eui/src/components/copy/copy.tsx',\n          name: 'EuiCopyProps'\n        },\n        required: true,\n        type: {\n          name: '(copy: () => void) => ReactElement'\n        }\n      },\n      className: {\n        defaultValue: null,\n        description: '',\n        name: 'className',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'aria-label': {\n        defaultValue: null,\n        description: '',\n        name: 'aria-label',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'data-test-subj': {\n        defaultValue: null,\n        description: '',\n        name: 'data-test-subj',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      title: {\n        defaultValue: null,\n        description: 'An optional title for your tooltip.',\n        name: 'title',\n        parent: {\n          fileName: 'eui/src/components/tool_tip/tool_tip.tsx',\n          name: 'EuiToolTipProps'\n        },\n        required: false,\n        type: {\n          name: 'ReactNode'\n        }\n      },\n      id: {\n        defaultValue: null,\n        description: 'Unless you provide one, this will be randomly generated.',\n        name: 'id',\n        parent: {\n          fileName: 'eui/src/components/tool_tip/tool_tip.tsx',\n          name: 'EuiToolTipProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      onMouseOut: {\n        defaultValue: null,\n        description: 'If supplied, called when mouse movement causes the tool tip to be\\n' + 'hidden.',\n        name: 'onMouseOut',\n        parent: {\n          fileName: 'eui/src/components/tool_tip/tool_tip.tsx',\n          name: 'EuiToolTipProps'\n        },\n        required: false,\n        type: {\n          name: '(event: MouseEvent<HTMLSpanElement, MouseEvent>) => void'\n        }\n      },\n      anchorClassName: {\n        defaultValue: null,\n        description: 'Passes onto the the trigger.',\n        name: 'anchorClassName',\n        parent: {\n          fileName: 'eui/src/components/tool_tip/tool_tip.tsx',\n          name: 'EuiToolTipProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      content: {\n        defaultValue: null,\n        description: 'The main content of your tooltip.',\n        name: 'content',\n        parent: {\n          fileName: 'eui/src/components/tool_tip/tool_tip.tsx',\n          name: 'EuiToolTipProps'\n        },\n        required: false,\n        type: {\n          name: 'ReactNode'\n        }\n      },\n      display: {\n        defaultValue: null,\n        description: 'Common display alternatives for the anchor wrapper',\n        name: 'display',\n        parent: {\n          fileName: 'eui/src/components/tool_tip/tool_tip.tsx',\n          name: 'EuiToolTipProps'\n        },\n        required: false,\n        type: {\n          name: 'enum',\n          raw: '\"inlineBlock\" | \"block\"',\n          value: [{\n            value: '\"inlineBlock\"'\n          }, {\n            value: '\"block\"'\n          }]\n        }\n      },\n      delay: {\n        defaultValue: null,\n        description: 'Delay before showing tooltip. Good for repeatable items.',\n        name: 'delay',\n        parent: {\n          fileName: 'eui/src/components/tool_tip/tool_tip.tsx',\n          name: 'EuiToolTipProps'\n        },\n        required: false,\n        type: {\n          name: 'enum',\n          raw: 'ToolTipDelay',\n          value: [{\n            value: '\"regular\"'\n          }, {\n            value: '\"long\"'\n          }]\n        }\n      },\n      position: {\n        defaultValue: null,\n        description: 'Suggested position. If there is not enough room for it this will be changed.',\n        name: 'position',\n        parent: {\n          fileName: 'eui/src/components/tool_tip/tool_tip.tsx',\n          name: 'EuiToolTipProps'\n        },\n        required: false,\n        type: {\n          name: 'enum',\n          raw: 'EuiPopoverPosition',\n          value: [{\n            value: '\"left\"'\n          }, {\n            value: '\"right\"'\n          }, {\n            value: '\"top\"'\n          }, {\n            value: '\"bottom\"'\n          }]\n        }\n      }\n    },\n    extendedInterfaces: ['EuiCopyProps', 'CommonProps', 'EuiToolTipProps']\n  };\n} catch (e) {}"]}]}