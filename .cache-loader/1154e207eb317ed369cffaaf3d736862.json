{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src-docs\\src\\views\\form_controls\\checkbox_group.js","dependencies":[{"path":"D:\\work\\eui\\src-docs\\src\\views\\form_controls\\checkbox_group.js","mtime":1649070093158},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAidW5kZWZpbmVkIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfQoKaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnOwppbXBvcnQgeyBFdWlDaGVja2JveEdyb3VwIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMnOwppbXBvcnQgeyBEaXNwbGF5VG9nZ2xlcyB9IGZyb20gJy4vZGlzcGxheV90b2dnbGVzJzsKaW1wb3J0IHsgaHRtbElkR2VuZXJhdG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL3NlcnZpY2VzJzsKdmFyIGlkUHJlZml4ID0gaHRtbElkR2VuZXJhdG9yKCkoKTsKZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICgpIHsKICB2YXIgY2hlY2tib3hlcyA9IFt7CiAgICBpZDogIiIuY29uY2F0KGlkUHJlZml4LCAiMCIpLAogICAgbGFiZWw6ICdPcHRpb24gb25lJywKICAgICdkYXRhLXRlc3Qtc3ViJzogJ2R0c190ZXN0JwogIH0sIHsKICAgIGlkOiAiIi5jb25jYXQoaWRQcmVmaXgsICIxIiksCiAgICBsYWJlbDogJ09wdGlvbiB0d28gaXMgY2hlY2tlZCBieSBkZWZhdWx0JywKICAgIGNsYXNzTmFtZTogJ2NsYXNzTmFtZVRlc3QnCiAgfSwgewogICAgaWQ6ICIiLmNvbmNhdChpZFByZWZpeCwgIjIiKSwKICAgIGxhYmVsOiAnT3B0aW9uIHRocmVlIGlzIGRpc2FibGVkJywKICAgIGRpc2FibGVkOiB0cnVlCiAgfV07CgogIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShfZGVmaW5lUHJvcGVydHkoe30sICIiLmNvbmNhdChpZFByZWZpeCwgIjEiKSwgdHJ1ZSkpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgY2hlY2tib3hJZFRvU2VsZWN0ZWRNYXAgPSBfdXNlU3RhdGUyWzBdLAogICAgICBzZXRDaGVja2JveElkVG9TZWxlY3RlZE1hcCA9IF91c2VTdGF0ZTJbMV07CgogIHZhciBfb25DaGFuZ2UgPSBmdW5jdGlvbiBvbkNoYW5nZShvcHRpb25JZCkgewogICAgdmFyIG5ld0NoZWNrYm94SWRUb1NlbGVjdGVkTWFwID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjaGVja2JveElkVG9TZWxlY3RlZE1hcCksIF9kZWZpbmVQcm9wZXJ0eSh7fSwgb3B0aW9uSWQsICFjaGVja2JveElkVG9TZWxlY3RlZE1hcFtvcHRpb25JZF0pKTsKCiAgICBzZXRDaGVja2JveElkVG9TZWxlY3RlZE1hcChuZXdDaGVja2JveElkVG9TZWxlY3RlZE1hcCk7CiAgfTsKCiAgcmV0dXJuICgKICAgIC8qI19fUFVSRV9fKi8KCiAgICAvKiBEaXNwbGF5VG9nZ2xlcyB3cmFwcGVyIGZvciBEb2NzIG9ubHkgKi8KICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGlzcGxheVRvZ2dsZXMsIHsKICAgICAgY2FuTG9hZGluZzogZmFsc2UsCiAgICAgIGNhblJlYWRPbmx5OiBmYWxzZSwKICAgICAgY2FuSW52YWxpZDogZmFsc2UsCiAgICAgIGNhbkZ1bGxXaWR0aDogZmFsc2UKICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEV1aUNoZWNrYm94R3JvdXAsIHsKICAgICAgb3B0aW9uczogY2hlY2tib3hlcywKICAgICAgaWRUb1NlbGVjdGVkTWFwOiBjaGVja2JveElkVG9TZWxlY3RlZE1hcCwKICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGlkKSB7CiAgICAgICAgcmV0dXJuIF9vbkNoYW5nZShpZCk7CiAgICAgIH0KICAgIH0pKQogICk7Cn0pOw=="},{"version":3,"sources":["D:/work/eui/src-docs/src/views/form_controls/checkbox_group.js"],"names":["React","useState","EuiCheckboxGroup","DisplayToggles","htmlIdGenerator","idPrefix","checkboxes","id","label","className","disabled","checkboxIdToSelectedMap","setCheckboxIdToSelectedMap","onChange","optionId","newCheckboxIdToSelectedMap"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,SAASC,eAAT,QAAgC,0BAAhC;AACA,IAAMC,QAAQ,GAAGD,eAAe,IAAhC;AAEA,gBAAe,YAAM;AACnB,MAAME,UAAU,GAAG,CACjB;AACEC,IAAAA,EAAE,YAAKF,QAAL,MADJ;AAEEG,IAAAA,KAAK,EAAE,YAFT;AAGE,qBAAiB;AAHnB,GADiB,EAMjB;AACED,IAAAA,EAAE,YAAKF,QAAL,MADJ;AAEEG,IAAAA,KAAK,EAAE,kCAFT;AAGEC,IAAAA,SAAS,EAAE;AAHb,GANiB,EAWjB;AACEF,IAAAA,EAAE,YAAKF,QAAL,MADJ;AAEEG,IAAAA,KAAK,EAAE,0BAFT;AAGEE,IAAAA,QAAQ,EAAE;AAHZ,GAXiB,CAAnB;;AADmB,kBAkB2CT,QAAQ,+BAChEI,QADgE,QAClD,IADkD,EAlBnD;AAAA;AAAA,MAkBZM,uBAlBY;AAAA,MAkBaC,0BAlBb;;AAsBnB,MAAMC,SAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAc;AAC7B,QAAMC,0BAA0B,mCAC3BJ,uBAD2B,uBAG3BG,QAH2B,EAGhB,CAACH,uBAAuB,CAACG,QAAD,CAHR,EAAhC;;AAMAF,IAAAA,0BAA0B,CAACG,0BAAD,CAA1B;AACD,GARD;;AAUA;AAAA;;AACE;AACA,wBAAC,cAAD;AACE,MAAA,UAAU,EAAE,KADd;AAEE,MAAA,WAAW,EAAE,KAFf;AAGE,MAAA,UAAU,EAAE,KAHd;AAIE,MAAA,YAAY,EAAE;AAJhB,oBAKE,oBAAC,gBAAD;AACE,MAAA,OAAO,EAAET,UADX;AAEE,MAAA,eAAe,EAAEK,uBAFnB;AAGE,MAAA,QAAQ,EAAE,kBAACJ,EAAD;AAAA,eAAQM,SAAQ,CAACN,EAAD,CAAhB;AAAA;AAHZ,MALF;AAFF;AAcD,CA9CD","sourcesContent":["import React, { useState } from 'react';\n\nimport { EuiCheckboxGroup } from '../../../../src/components';\nimport { DisplayToggles } from './display_toggles';\n\nimport { htmlIdGenerator } from '../../../../src/services';\nconst idPrefix = htmlIdGenerator()();\n\nexport default () => {\n  const checkboxes = [\n    {\n      id: `${idPrefix}0`,\n      label: 'Option one',\n      'data-test-sub': 'dts_test',\n    },\n    {\n      id: `${idPrefix}1`,\n      label: 'Option two is checked by default',\n      className: 'classNameTest',\n    },\n    {\n      id: `${idPrefix}2`,\n      label: 'Option three is disabled',\n      disabled: true,\n    },\n  ];\n  const [checkboxIdToSelectedMap, setCheckboxIdToSelectedMap] = useState({\n    [`${idPrefix}1`]: true,\n  });\n\n  const onChange = (optionId) => {\n    const newCheckboxIdToSelectedMap = {\n      ...checkboxIdToSelectedMap,\n      ...{\n        [optionId]: !checkboxIdToSelectedMap[optionId],\n      },\n    };\n    setCheckboxIdToSelectedMap(newCheckboxIdToSelectedMap);\n  };\n\n  return (\n    /* DisplayToggles wrapper for Docs only */\n    <DisplayToggles\n      canLoading={false}\n      canReadOnly={false}\n      canInvalid={false}\n      canFullWidth={false}>\n      <EuiCheckboxGroup\n        options={checkboxes}\n        idToSelectedMap={checkboxIdToSelectedMap}\n        onChange={(id) => onChange(id)}\n      />\n    </DisplayToggles>\n  );\n};\n"]}]}