{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\search_bar\\search_bar.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\search_bar\\search_bar.tsx","mtime":1649070093755},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/search_bar/search_bar.tsx"],"names":["React","Component","isString","EuiFlexGroup","EuiFlexItem","EuiSearchBox","EuiSearchFilters","Query","AST","Ast","parseQuery","query","props","schema","undefined","box","dateFormat","parseOptions","parse","EuiSearchBar","queryText","notifyControllingParent","error","setState","e","name","message","text","defaultQuery","state","newState","onChange","oldState","isQueryDifferent","oldError","newError","isErrorDifferent","tools","Array","isArray","map","tool","key","filters","toolsLeft","toolsRight","toolsLeftEl","renderTools","filtersBar","onFiltersChange","toolsRightEl","onSearch","nextProps","prevState"],"mappings":"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","sourcesContent":["function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport PropTypes from \"prop-types\";\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport { isString } from '../../services/predicate';\nimport { EuiFlexGroup, EuiFlexItem } from '../flex';\nimport { EuiSearchBox } from './search_box';\nimport { EuiSearchFilters } from './search_filters';\nimport { Query } from './query';\nexport { Query, AST as Ast } from './query';\n\nvar parseQuery = function parseQuery(query, props) {\n  var schema = undefined;\n\n  if (props.box && props.box.schema && _typeof(props.box.schema) === 'object') {\n    schema = props.box.schema;\n  }\n\n  var dateFormat = props.dateFormat;\n  var parseOptions = {\n    schema: schema,\n    dateFormat: dateFormat\n  };\n\n  if (!query) {\n    return Query.parse('', parseOptions);\n  }\n\n  return isString(query) ? Query.parse(query, parseOptions) : query;\n};\n\nexport class EuiSearchBar extends Component {\n  static Query = Query;\n\n  constructor(props) {\n    super(props);\n    const query = parseQuery(props.defaultQuery || props.query, props);\n    this.state = {\n      query,\n      queryText: query.text,\n      error: null\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if ((nextProps.query || nextProps.query === '') && (!prevState.query || typeof nextProps.query !== 'string' && nextProps.query.text !== prevState.query.text || typeof nextProps.query === 'string' && nextProps.query !== prevState.query.text)) {\n      const query = parseQuery(nextProps.query, nextProps);\n      return {\n        query,\n        queryText: query.text,\n        error: null\n      };\n    }\n\n    return null;\n  }\n\n  notifyControllingParent(newState) {\n    const {\n      onChange\n    } = this.props;\n\n    if (!onChange) {\n      return;\n    }\n\n    const oldState = this.state;\n    const {\n      query,\n      queryText,\n      error\n    } = newState;\n    const isQueryDifferent = oldState.queryText !== queryText;\n    const oldError = oldState.error ? oldState.error.message : null;\n    const newError = error ? error.message : null;\n    const isErrorDifferent = oldError !== newError;\n\n    if (isQueryDifferent || isErrorDifferent) {\n      if (error == null) {\n        onChange({\n          query: query,\n          queryText,\n          error\n        });\n      } else {\n        onChange({\n          query: null,\n          queryText,\n          error\n        });\n      }\n    }\n  }\n\n  onSearch = queryText => {\n    try {\n      const query = parseQuery(queryText, this.props);\n      this.notifyControllingParent({\n        query,\n        queryText,\n        error: null\n      });\n      this.setState({\n        query,\n        queryText,\n        error: null\n      });\n    } catch (e) {\n      const error = {\n        name: e.name,\n        message: e.message\n      };\n      this.notifyControllingParent({\n        query: null,\n        queryText,\n        error\n      });\n      this.setState({\n        queryText,\n        error\n      });\n    }\n  };\n  onFiltersChange = query => {\n    this.notifyControllingParent({\n      query,\n      queryText: query.text,\n      error: null\n    });\n    this.setState({\n      query,\n      queryText: query.text,\n      error: null\n    });\n  };\n\n  renderTools(tools) {\n    if (!tools) {\n      return undefined;\n    }\n\n    if (Array.isArray(tools)) {\n      return tools.map(tool => <EuiFlexItem grow={false} key={tool.key == null ? undefined : tool.key}>\n          {tool}\n        </EuiFlexItem>);\n    }\n\n    return <EuiFlexItem grow={false}>{tools}</EuiFlexItem>;\n  }\n\n  render() {\n    const {\n      query,\n      queryText,\n      error\n    } = this.state;\n    const {\n      box: {\n        schema,\n        ...box\n      } = {\n        schema: ''\n      },\n      // strip `schema` out to prevent passing it to EuiSearchBox\n      filters,\n      toolsLeft,\n      toolsRight\n    } = this.props;\n    const toolsLeftEl = this.renderTools(toolsLeft);\n    const filtersBar = !filters ? undefined : <EuiFlexItem className=\"euiSearchBar__filtersHolder\" grow={false}>\n        <EuiSearchFilters filters={filters} query={query} onChange={this.onFiltersChange} />\n      </EuiFlexItem>;\n    const toolsRightEl = this.renderTools(toolsRight);\n    return <EuiFlexGroup gutterSize=\"m\" alignItems=\"center\" wrap>\n        {toolsLeftEl}\n        <EuiFlexItem className=\"euiSearchBar__searchHolder\" grow={true}>\n          <EuiSearchBox {...box} query={queryText} onSearch={this.onSearch} isInvalid={error != null} title={error ? error.message : undefined} />\n        </EuiFlexItem>\n        {filtersBar}\n        {toolsRightEl}\n      </EuiFlexGroup>;\n  }\n\n}\nEuiSearchBar.propTypes = {\n  onChange: PropTypes.func,\n\n  /**\n     The initial query the bar will hold when first mounted\n     */\n  defaultQuery: PropTypes.oneOfType([PropTypes.any.isRequired, PropTypes.string.isRequired]),\n\n  /**\n     If you wish to use the search bar as a controlled component, continuously pass the query via this prop.\n     */\n  query: PropTypes.oneOfType([PropTypes.any.isRequired, PropTypes.string.isRequired]),\n\n  /**\n     Configures the search box. Set `placeholder` to change the placeholder text in the box and `incremental` to support incremental (as you type) search.\n     */\n  box: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    placeholder: PropTypes.string,\n    value: PropTypes.string,\n    isInvalid: PropTypes.bool,\n    fullWidth: PropTypes.bool,\n    isLoading: PropTypes.bool,\n\n    /**\n       * Called when the user presses [Enter] OR on change if the incremental prop is `true`.\n       * If you don't need the on[Enter] functionality, prefer using onChange\n       */\n    onSearch: PropTypes.func,\n\n    /**\n       * When `true` the search will be executed (that is, the `onSearch` will be called) as the\n       * user types.\n       */\n    incremental: PropTypes.bool,\n\n    /**\n       * when `true` creates a shorter height input\n       */\n    compressed: PropTypes.bool,\n    inputRef: PropTypes.func,\n\n    /**\n       * Shows a button that quickly clears any input\n       */\n    isClearable: PropTypes.bool,\n\n    /**\n       * Creates an input group with element(s) coming before input\n       * `string` | `ReactElement` or an array of these\n       */\n    prepend: PropTypes.oneOfType([PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.element.isRequired]).isRequired, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.element.isRequired]).isRequired).isRequired]),\n\n    /**\n       * Creates an input group with element(s) coming after input.\n       * `string` | `ReactElement` or an array of these\n       */\n    append: PropTypes.oneOfType([PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.element.isRequired]).isRequired, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.element.isRequired]).isRequired).isRequired]),\n    className: PropTypes.string,\n    \"aria-label\": PropTypes.string,\n    \"data-test-subj\": PropTypes.string,\n    // Boolean values are not meaningful to this EuiSearchBox, but are allowed so that other\n    // components can use e.g. a true value to mean \"auto-derive a schema\". See EuiInMemoryTable.\n    // Admittedly, this is a bit of a hack.\n    schema: PropTypes.oneOfType([PropTypes.shape({\n      strict: PropTypes.bool,\n      fields: PropTypes.any,\n      flags: PropTypes.arrayOf(PropTypes.string.isRequired)\n    }).isRequired, PropTypes.bool.isRequired])\n  }),\n\n  /**\n     An array of search filters. See #SearchFilterConfig.\n     */\n  filters: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({\n    type: PropTypes.oneOf([\"is\"]).isRequired,\n    field: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    negatedName: PropTypes.string,\n    available: PropTypes.func\n  }).isRequired, PropTypes.shape({\n    type: PropTypes.oneOf([\"field_value_selection\"]).isRequired,\n    field: PropTypes.string,\n    name: PropTypes.string.isRequired,\n\n    /**\n       * See #FieldValueOptionType\n       */\n    options: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({\n      field: PropTypes.string,\n      value: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired, PropTypes.bool.isRequired, PropTypes.shape({\n        type: PropTypes.oneOf([\"date\"]).isRequired,\n        raw: PropTypes.any.isRequired,\n        granularity: PropTypes.oneOfType([PropTypes.shape({\n          es: PropTypes.oneOf([\"d\", \"w\", \"M\", \"y\"]).isRequired,\n          js: PropTypes.oneOf([\"day\", \"week\", \"month\", \"year\"]).isRequired,\n          isSame: PropTypes.func.isRequired,\n          start: PropTypes.func.isRequired,\n          startOfNext: PropTypes.func.isRequired,\n          iso8601: PropTypes.func.isRequired\n        }).isRequired, PropTypes.oneOf([undefined])]).isRequired,\n        text: PropTypes.string.isRequired,\n        resolve: PropTypes.func.isRequired\n      }).isRequired]).isRequired,\n      name: PropTypes.string,\n      view: PropTypes.node\n    }).isRequired).isRequired, PropTypes.func.isRequired]).isRequired,\n    filterWith: PropTypes.oneOfType([PropTypes.oneOf([\"prefix\", \"includes\"]), PropTypes.func.isRequired]),\n    cache: PropTypes.number,\n    multiSelect: PropTypes.oneOfType([PropTypes.bool.isRequired, PropTypes.oneOf([\"and\", \"or\"])]),\n    loadingMessage: PropTypes.string,\n    noOptionsMessage: PropTypes.string,\n    searchThreshold: PropTypes.number,\n    available: PropTypes.func,\n    autoClose: PropTypes.bool,\n    operator: PropTypes.oneOf([\"eq\", \"exact\", \"gt\", \"gte\", \"lt\", \"lte\"])\n  }).isRequired, PropTypes.shape({\n    type: PropTypes.oneOf([\"field_value_toggle\"]).isRequired,\n    field: PropTypes.string.isRequired,\n    value: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired, PropTypes.bool.isRequired, PropTypes.shape({\n      type: PropTypes.oneOf([\"date\"]).isRequired,\n      raw: PropTypes.any.isRequired,\n      granularity: PropTypes.oneOfType([PropTypes.shape({\n        es: PropTypes.oneOf([\"d\", \"w\", \"M\", \"y\"]).isRequired,\n        js: PropTypes.oneOf([\"day\", \"week\", \"month\", \"year\"]).isRequired,\n        isSame: PropTypes.func.isRequired,\n        start: PropTypes.func.isRequired,\n        startOfNext: PropTypes.func.isRequired,\n        iso8601: PropTypes.func.isRequired\n      }).isRequired, PropTypes.oneOf([undefined])]).isRequired,\n      text: PropTypes.string.isRequired,\n      resolve: PropTypes.func.isRequired\n    }).isRequired]).isRequired,\n    name: PropTypes.string.isRequired,\n    negatedName: PropTypes.string,\n    available: PropTypes.func,\n    operator: PropTypes.oneOf([\"eq\", \"exact\", \"gt\", \"gte\", \"lt\", \"lte\"])\n  }).isRequired, PropTypes.shape({\n    type: PropTypes.oneOf([\"field_value_toggle_group\"]).isRequired,\n    field: PropTypes.string.isRequired,\n\n    /**\n       * See #FieldValueToggleGroupFilterItemType\n       */\n    items: PropTypes.arrayOf(PropTypes.shape({\n      value: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired, PropTypes.bool.isRequired]).isRequired,\n      name: PropTypes.string.isRequired,\n      negatedName: PropTypes.string,\n      operator: PropTypes.oneOf([\"eq\", \"exact\", \"gt\", \"gte\", \"lt\", \"lte\"])\n    }).isRequired).isRequired,\n    available: PropTypes.func\n  }).isRequired]).isRequired),\n\n  /**\n     * Tools which go to the left of the search bar.\n     */\n  toolsLeft: PropTypes.oneOfType([PropTypes.element.isRequired, PropTypes.arrayOf(PropTypes.element.isRequired).isRequired]),\n\n  /**\n     * Tools which go to the right of the search bar.\n     */\n  toolsRight: PropTypes.oneOfType([PropTypes.element.isRequired, PropTypes.arrayOf(PropTypes.element.isRequired).isRequired]),\n\n  /**\n     * Date formatter to use when parsing date values\n     */\n  dateFormat: PropTypes.any,\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string\n};\n\ntry {\n  Query.__docgenInfo = {\n    description: \"This is the consumer interface for the query - it's effectively a wrapper construct around\\n\" + 'the AST and some of its related utility functions (e.g. parsing, text representation, executing, etc...)\\n' + 'It is immutable - all mutating operations return a new (mutated) query instance.',\n    displayName: 'Query',\n    methods: [],\n    props: {},\n    extendedInterfaces: ['EuiSearchBarProps', 'CommonProps']\n  };\n} catch (e) {}\n\ntry {\n  EuiSearchBar.__docgenInfo = {\n    description: '',\n    displayName: 'EuiSearchBar',\n    methods: [],\n    props: {\n      onChange: {\n        defaultValue: null,\n        description: '',\n        name: 'onChange',\n        parent: {\n          fileName: 'eui/src/components/search_bar/search_bar.tsx',\n          name: 'EuiSearchBarProps'\n        },\n        required: false,\n        type: {\n          name: '(args: ArgsWithQuery | ArgsWithError) => boolean | void'\n        }\n      },\n      defaultQuery: {\n        defaultValue: null,\n        description: 'The initial query the bar will hold when first mounted',\n        name: 'defaultQuery',\n        parent: {\n          fileName: 'eui/src/components/search_bar/search_bar.tsx',\n          name: 'EuiSearchBarProps'\n        },\n        required: false,\n        type: {\n          name: 'QueryType'\n        }\n      },\n      query: {\n        defaultValue: null,\n        description: 'If you wish to use the search bar as a controlled component, continuously pass the query via this prop.',\n        name: 'query',\n        parent: {\n          fileName: 'eui/src/components/search_bar/search_bar.tsx',\n          name: 'EuiSearchBarProps'\n        },\n        required: false,\n        type: {\n          name: 'QueryType'\n        }\n      },\n      box: {\n        defaultValue: null,\n        description: 'Configures the search box. Set `placeholder` to change the placeholder text in the box and `incremental` to support incremental (as you type) search.',\n        name: 'box',\n        parent: {\n          fileName: 'eui/src/components/search_bar/search_bar.tsx',\n          name: 'EuiSearchBarProps'\n        },\n        required: false,\n        type: {\n          name: 'EuiFieldSearchProps & { schema?: boolean | SchemaType; }'\n        }\n      },\n      filters: {\n        defaultValue: null,\n        description: 'An array of search filters. See #SearchFilterConfig.',\n        name: 'filters',\n        parent: {\n          fileName: 'eui/src/components/search_bar/search_bar.tsx',\n          name: 'EuiSearchBarProps'\n        },\n        required: false,\n        type: {\n          name: 'SearchFilterConfig[]'\n        }\n      },\n      toolsLeft: {\n        defaultValue: null,\n        description: 'Tools which go to the left of the search bar.',\n        name: 'toolsLeft',\n        parent: {\n          fileName: 'eui/src/components/search_bar/search_bar.tsx',\n          name: 'EuiSearchBarProps'\n        },\n        required: false,\n        type: {\n          name: 'Tools'\n        }\n      },\n      toolsRight: {\n        defaultValue: null,\n        description: 'Tools which go to the right of the search bar.',\n        name: 'toolsRight',\n        parent: {\n          fileName: 'eui/src/components/search_bar/search_bar.tsx',\n          name: 'EuiSearchBarProps'\n        },\n        required: false,\n        type: {\n          name: 'Tools'\n        }\n      },\n      dateFormat: {\n        defaultValue: null,\n        description: 'Date formatter to use when parsing date values',\n        name: 'dateFormat',\n        parent: {\n          fileName: 'eui/src/components/search_bar/search_bar.tsx',\n          name: 'EuiSearchBarProps'\n        },\n        required: false,\n        type: {\n          name: 'object'\n        }\n      },\n      className: {\n        defaultValue: null,\n        description: '',\n        name: 'className',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'aria-label': {\n        defaultValue: null,\n        description: '',\n        name: 'aria-label',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'data-test-subj': {\n        defaultValue: null,\n        description: '',\n        name: 'data-test-subj',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      }\n    },\n    extendedInterfaces: ['EuiSearchBarProps', 'CommonProps']\n  };\n} catch (e) {}\n\ntry {\n  EuiSearchBar.Query.__docgenInfo = {\n    description: \"This is the consumer interface for the query - it's effectively a wrapper construct around\\n\" + 'the AST and some of its related utility functions (e.g. parsing, text representation, executing, etc...)\\n' + 'It is immutable - all mutating operations return a new (mutated) query instance.',\n    displayName: 'EuiSearchBar.Query',\n    methods: [],\n    props: {},\n    extendedInterfaces: ['EuiSearchBarProps', 'CommonProps']\n  };\n} catch (e) {}"]}]}