{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\datagrid\\data_grid_schema.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\datagrid\\data_grid_schema.tsx","mtime":1649070093366},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/datagrid/data_grid_schema.tsx"],"names":["React","useMemo","EuiI18n","numericChars","Set","schemaDetectors","type","detector","value","toLowerCase","comparator","a","b","direction","aValue","bValue","icon","sortTextAsc","sortTextDesc","matchLength","match","length","hasCurrency","indexOf","confidenceAdjustment","aChars","split","filter","char","has","parseFloat","join","bChars","color","isoTimestampMatch","unixTimestampMatch","isoMatchLength","unixMatchLength","Math","max","aGroups","bGroups","maxGroups","i","parseInt","maybeArray","maybeObject","JSON","parse","e","scoreValueBySchemaType","scores","score","push","MINIMUM_SCORE_MATCH","emptyArray","useDetectSchema","inMemory","inMemoryValues","definedColumnSchemas","autoDetectSchema","inMemorySkipColumns","skipColumns","schema","columnSchemas","rowIndices","Object","keys","columnIdsWithDefinedSchemas","rowIndex","rowData","columnIds","j","columnId","schemaColumn","columnValue","trim","valueScores","k","valueScore","hasOwnProperty","existingScore","reduce","columnScores","typeIds","typeSummaries","bestType","bestScore","typeId","typeScores","totalScore","mean","sdSum","sd","sqrt","summary","columnType","useMergedSchema","detectedSchema","columns","mergedSchema","id","getDetailsForSchema","detectors","providedSchema","results","matches"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useMemo, ReactNode } from 'react';\nimport {\n  EuiDataGridColumn,\n  EuiDataGridInMemory,\n  EuiDataGridInMemoryValues,\n} from './data_grid_types';\n\nimport { EuiI18n } from '../i18n';\n\nimport { IconType } from '../icon';\nimport { EuiTokenProps } from '../token';\n\nexport interface EuiDataGridSchemaDetector {\n  /**\n   * The name of this data type, matches #EuiDataGridColumn / schema `schema`\n   */\n  type: string;\n  /**\n   * The function given the text value of a cell and returns a score of [0...1] of how well the value matches this data type\n   */\n  detector: (value: string) => number;\n  /**\n   * A custom comparator function when performing in-memory sorting on this data type, takes `(a: string, b: string, direction: 'asc' | 'desc) => -1 | 0 | 1`\n   */\n  comparator?: (a: string, b: string, direction: 'asc' | 'desc') => -1 | 0 | 1;\n  /**\n   * The icon used to visually represent this data type. Accepts any `EuiIcon IconType`.\n   */\n  icon: IconType;\n  /**\n   * The color associated with this data type; it's used to color the icon token\n   */\n  color?: EuiTokenProps['color'] | string;\n  /**\n   * Text for how to represent an ascending sort of this data type, e.g. 'A -> Z'\n   */\n  sortTextAsc: ReactNode;\n  /**\n   * Text for how to represent a descending sort of this data type, e.g. 'Z -> A'\n   */\n  sortTextDesc: ReactNode;\n  /**\n   * Whether this column is sortable (defaults to true)\n   */\n  isSortable?: boolean;\n  /**\n   *  This property controls the capitalization of text\n   */\n  textTransform?: 'uppercase' | 'lowercase' | 'capitalize';\n  /**\n   * Default sort direction of the column\n   */\n  defaultSortDirection?: 'asc' | 'desc';\n}\n\nconst numericChars = new Set([\n  '0',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '.',\n  '-',\n]);\nexport const schemaDetectors: EuiDataGridSchemaDetector[] = [\n  {\n    type: 'boolean',\n    detector(value) {\n      return value.toLowerCase() === 'true' || value.toLowerCase() === 'false'\n        ? 1\n        : 0;\n    },\n    comparator(a, b, direction) {\n      const aValue = a.toLowerCase() === 'true';\n      const bValue = b.toLowerCase() === 'true';\n      if (aValue < bValue) return direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return direction === 'asc' ? 1 : -1;\n      return 0;\n    },\n    icon: 'tokenBoolean',\n    sortTextAsc: (\n      <EuiI18n\n        token=\"euiDataGridSchema.booleanSortTextAsc\"\n        default=\"False-True\"\n      />\n    ),\n    sortTextDesc: (\n      <EuiI18n\n        token=\"euiDataGridSchema.booleanSortTextDesc\"\n        default=\"True-False\"\n      />\n    ),\n  },\n  {\n    type: 'currency',\n    detector(value) {\n      const matchLength = (value.match(\n        // currency prefers starting with 1-3 characters for the currency symbol\n        // then it matches against numerical data + $\n        /(^[^-(.]{1,3})?[$-(]*[\\d,]+(\\.\\d*)?[$)]*/\n      ) || [''])[0].length;\n\n      // if there is no currency symbol then reduce the score\n      const hasCurrency = value.indexOf('$') !== -1;\n      const confidenceAdjustment = hasCurrency ? 1 : 0.95;\n\n      return (matchLength / value.length) * confidenceAdjustment || 0;\n    },\n    comparator: (a, b, direction) => {\n      const aChars = a.split('').filter((char) => numericChars.has(char));\n      const aValue = parseFloat(aChars.join(''));\n\n      const bChars = b.split('').filter((char) => numericChars.has(char));\n      const bValue = parseFloat(bChars.join(''));\n\n      if (aValue < bValue) return direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return direction === 'asc' ? 1 : -1;\n      return 0;\n    },\n    icon: 'currency',\n    color: 'euiColorVis0',\n    sortTextAsc: (\n      <EuiI18n\n        token=\"euiDataGridSchema.currencySortTextAsc\"\n        default=\"Low-High\"\n      />\n    ),\n    sortTextDesc: (\n      <EuiI18n\n        token=\"euiDataGridSchema.currencySortTextDesc\"\n        default=\"High-Low\"\n      />\n    ),\n  },\n  {\n    type: 'datetime',\n    detector(value) {\n      // matches the most common forms of ISO-8601\n      const isoTimestampMatch = value.match(\n        // 2019 - 09    - 17     T 12     : 18    : 32      .853     Z or -0600\n        /^\\d{2,4}-\\d{1,2}-\\d{1,2}(T?\\d{1,2}:\\d{1,2}:\\d{1,2}(\\.\\d{3})?(Z|[+-]\\d{4})?)?/\n      );\n\n      // matches 9 digits (seconds) or 13 digits (milliseconds) since unix epoch\n      const unixTimestampMatch = value.match(/^(\\d{9}|\\d{13})$/);\n\n      const isoMatchLength = isoTimestampMatch\n        ? isoTimestampMatch[0].length\n        : 0;\n\n      // reduce the confidence of a unix timestamp match to 75%\n      // (a column of all unix timestamps should be numeric instead)\n      const unixMatchLength = unixTimestampMatch\n        ? unixTimestampMatch[0].length * 0.75\n        : 0;\n\n      return Math.max(isoMatchLength, unixMatchLength) / value.length || 0;\n    },\n    icon: 'tokenDate',\n    sortTextAsc: (\n      <EuiI18n token=\"euiDataGridSchema.dateSortTextAsc\" default=\"Old-New\" />\n    ),\n    sortTextDesc: (\n      <EuiI18n token=\"euiDataGridSchema.dateSortTextDesc\" default=\"New-Old\" />\n    ),\n  },\n  {\n    type: 'numeric',\n    detector(value) {\n      const matchLength = (value.match(/[%-(]*[\\d,]+(\\.\\d*)?[%)]*/) || [''])[0]\n        .length;\n      return matchLength / value.length || 0;\n    },\n    comparator: (a, b, direction) => {\n      // sort on all digits groups\n      const aGroups = a.split(/\\D+/);\n      const bGroups = b.split(/\\D+/);\n\n      const maxGroups = Math.max(aGroups.length, bGroups.length);\n      for (let i = 0; i < maxGroups; i++) {\n        // if A and B's group counts differ and they match until that difference, prefer whichever is shorter\n        if (i >= aGroups.length) return direction === 'asc' ? -1 : 1;\n        if (i >= bGroups.length) return direction === 'asc' ? 1 : -1;\n\n        const aChars = aGroups[i];\n        const bChars = bGroups[i];\n        const aValue = parseInt(aChars, 10);\n        const bValue = parseInt(bChars, 10);\n\n        if (aValue < bValue) return direction === 'asc' ? -1 : 1;\n        if (aValue > bValue) return direction === 'asc' ? 1 : -1;\n      }\n\n      return 0;\n    },\n    icon: 'tokenNumber',\n    sortTextAsc: (\n      <EuiI18n token=\"euiDataGridSchema.numberSortTextAsc\" default=\"Low-High\" />\n    ),\n    sortTextDesc: (\n      <EuiI18n\n        token=\"euiDataGridSchema.numberSortTextDesc\"\n        default=\"High-Low\"\n      />\n    ),\n  },\n  {\n    type: 'json',\n    detector(value: string) {\n      // does this look like it might be a JSON object?\n      const maybeArray = value[0] === '[' && value[value.length - 1] === ']';\n      const maybeObject = value[0] === '{' && value[value.length - 1] === '}';\n      if (!maybeArray && !maybeObject) return 0;\n\n      try {\n        JSON.parse(value);\n        return 1;\n      } catch (e) {\n        return 0;\n      }\n    },\n    comparator: (a, b, direction) => {\n      if (a.length > b.length) return direction === 'asc' ? 1 : -1;\n      if (a.length < b.length) return direction === 'asc' ? 1 : -1;\n      return 0;\n    },\n    icon: 'tokenObject',\n    sortTextAsc: (\n      <EuiI18n\n        token=\"euiDataGridSchema.jsonSortTextAsc\"\n        default=\"Small-Large\"\n      />\n    ),\n    sortTextDesc: (\n      <EuiI18n\n        token=\"euiDataGridSchema.jsonSortTextDesc\"\n        default=\"Large-Small\"\n      />\n    ),\n  },\n];\n\nexport interface EuiDataGridSchema {\n  [columnId: string]: { columnType: string | null };\n}\n\nexport interface SchemaTypeScore {\n  type: string;\n  score: number;\n}\n\nfunction scoreValueBySchemaType(\n  value: string,\n  schemaDetectors: EuiDataGridSchemaDetector[] = []\n) {\n  const scores: SchemaTypeScore[] = [];\n\n  for (let i = 0; i < schemaDetectors.length; i++) {\n    const { type, detector } = schemaDetectors[i];\n    const score = detector(value);\n    scores.push({ type, score });\n  }\n\n  return scores;\n}\n\n// completely arbitrary minimum match I came up with\n// represents lowest score a type detector can have to be considered valid\nconst MINIMUM_SCORE_MATCH = 0.5;\n\nconst emptyArray: unknown = []; // for in-memory object permanence\nexport function useDetectSchema(\n  inMemory: EuiDataGridInMemory | undefined,\n  inMemoryValues: EuiDataGridInMemoryValues,\n  schemaDetectors: EuiDataGridSchemaDetector[] | undefined,\n  definedColumnSchemas: { [key: string]: string },\n  autoDetectSchema: boolean\n) {\n  const inMemorySkipColumns =\n    inMemory?.skipColumns ??\n    (emptyArray as NonNullable<EuiDataGridInMemory['skipColumns']>);\n\n  const schema = useMemo(() => {\n    const schema: EuiDataGridSchema = {};\n    if (autoDetectSchema === false) {\n      return schema;\n    }\n\n    const columnSchemas: {\n      [columnId: string]: { [type: string]: number[] };\n    } = {};\n\n    // for each row, score each value by each detector and put the results on `columnSchemas`\n    const rowIndices = Object.keys(inMemoryValues);\n\n    const columnIdsWithDefinedSchemas = new Set<string>([\n      ...inMemorySkipColumns,\n      ...Object.keys(definedColumnSchemas),\n    ]);\n\n    for (let i = 0; i < rowIndices.length; i++) {\n      const rowIndex = rowIndices[i];\n      const rowData = inMemoryValues[rowIndex];\n      const columnIds = Object.keys(rowData);\n\n      for (let j = 0; j < columnIds.length; j++) {\n        const columnId = columnIds[j];\n        if (columnIdsWithDefinedSchemas.has(columnId)) continue;\n\n        const schemaColumn = (columnSchemas[columnId] =\n          columnSchemas[columnId] || {});\n\n        const columnValue = rowData[columnId].trim();\n        const valueScores = scoreValueBySchemaType(\n          columnValue,\n          schemaDetectors\n        );\n\n        for (let k = 0; k < valueScores.length; k++) {\n          const valueScore = valueScores[k];\n          if (schemaColumn.hasOwnProperty(valueScore.type)) {\n            const existingScore = schemaColumn[valueScore.type];\n            existingScore.push(valueScore.score);\n          } else {\n            // first entry for this column\n            schemaColumn[valueScore.type] = [valueScore.score];\n          }\n        }\n      }\n    }\n\n    // for each column, reduce each detector type's score to a single value and find the best fit\n    return Object.keys(columnSchemas).reduce<EuiDataGridSchema | any>(\n      (schema, columnId) => {\n        const columnScores = columnSchemas[columnId];\n        const typeIds = Object.keys(columnScores);\n\n        const typeSummaries: {\n          [type: string]: {\n            mean: number;\n            sd: number;\n          };\n        } = {};\n\n        let bestType = null;\n        let bestScore = 0;\n\n        for (let i = 0; i < typeIds.length; i++) {\n          const typeId = typeIds[i];\n\n          const typeScores = columnScores[typeId];\n\n          // find the mean\n          let totalScore = 0;\n          for (let j = 0; j < typeScores.length; j++) {\n            const score = typeScores[j];\n            totalScore += score;\n          }\n          const mean = totalScore / typeScores.length;\n\n          // compute standard deviation\n          let sdSum = 0;\n          for (let j = 0; j < typeScores.length; j++) {\n            const score = typeScores[j];\n            sdSum += (score - mean) * (score - mean);\n          }\n          const sd = Math.sqrt(sdSum / typeScores.length);\n\n          const summary = { mean, sd };\n\n          // the mean-standard_deviation calculation is fairly arbitrary but fits the patterns I've thrown at it\n          // it is meant to represent the scores' average and distribution\n          const score = summary.mean - summary.sd;\n          if (score > MINIMUM_SCORE_MATCH) {\n            if (bestType == null || score > bestScore) {\n              bestType = typeId;\n              bestScore = score;\n            }\n          }\n\n          typeSummaries[typeId] = summary;\n        }\n        schema[columnId] = { columnType: bestType };\n\n        return schema;\n      },\n      {}\n    );\n  }, [\n    autoDetectSchema,\n    definedColumnSchemas,\n    inMemorySkipColumns,\n    inMemoryValues,\n    schemaDetectors,\n  ]);\n  return schema;\n}\n\nexport function useMergedSchema(\n  detectedSchema: EuiDataGridSchema,\n  columns: EuiDataGridColumn[]\n) {\n  return useMemo(() => {\n    const mergedSchema = { ...detectedSchema };\n\n    for (let i = 0; i < columns.length; i++) {\n      const { id, schema } = columns[i];\n      if (schema != null) {\n        if (detectedSchema.hasOwnProperty(id)) {\n          mergedSchema[id] = { ...detectedSchema[id], columnType: schema };\n        } else {\n          mergedSchema[id] = { columnType: schema };\n        }\n      }\n    }\n\n    return mergedSchema;\n  }, [detectedSchema, columns]);\n}\n\n// Given a provided schema, return the details for the schema\n// Useful for grabbing the color or icon\nexport function getDetailsForSchema(\n  detectors: EuiDataGridSchemaDetector[],\n  providedSchema: string | null\n) {\n  const results = detectors.filter((matches) => {\n    return matches.type === providedSchema;\n  });\n\n  return results[0];\n}\n"]}]}