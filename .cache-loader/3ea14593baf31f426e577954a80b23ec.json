{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\datagrid\\data_grid_types.ts","dependencies":[{"path":"D:\\work\\eui\\src\\components\\datagrid\\data_grid_types.ts","mtime":1649070093367},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":""},{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ComponentType, JSXElementConstructor, ReactNode } from 'react';\nimport { EuiDataGridCellProps } from './data_grid_cell';\nimport { EuiListGroupItemProps } from '../list_group';\nimport { EuiButtonEmpty, EuiButtonIcon } from '../button';\nimport { ExclusiveUnion } from '../common';\n\nexport interface EuiDataGridControlColumn {\n  /**\n   * Used as the React `key` when rendering content\n   */\n  id: string;\n  /**\n   * Component to render in the column header\n   */\n  headerCellRender: ComponentType;\n  /**\n   * Component to render for each row in the column\n   */\n  rowCellRender: EuiDataGridCellProps['renderCellValue'];\n  /**\n   * Width of the column, uses are unable to change this\n   */\n  width: number;\n}\n\nexport interface EuiDataGridColumn {\n  /**\n   * The unique identifier for this column\n   */\n  id: string;\n  /**\n   * A `ReactNode` used when rendering the column header. When providing complicated content, please make sure to utilize CSS to respect truncation as space allows. Check the docs example.\n   */\n  display?: ReactNode;\n  /**\n   * A Schema to use for the column. Built-in values are ['boolean', 'currency', 'datetime', 'numeric', 'json'] but can be expanded by defining your own #EuiDataGrid `schemaDetectors` (for in-memory detection). In general, it is advised to pass in a value here when you are sure of the schema ahead of time, so that you don't need to rely on the automatic detection.\n   */\n  schema?: string;\n  /**\n   * Defaults to true, always true if cellActions are defined. Defines whether or not the column's cells can be expanded with a popup onClick / keydown.\n   */\n  isExpandable?: boolean;\n  /**\n   * Whether this column's width can be changed by the user, defaults to true\n   */\n  isResizable?: boolean;\n  /**\n   * Initial width (in pixels) of the column\n   */\n  initialWidth?: number;\n  /**\n   * Whether this column is sortable\n   */\n  isSortable?: boolean;\n  /**\n   * Default sort direction of the column\n   */\n  defaultSortDirection?: 'asc' | 'desc';\n  /**\n   * Display name as text for column. This can be used to display column name in column selector and column sorting where `display` won't be used. If not used `id` will be shown as column name in column selector and column sorting.\n   */\n  displayAsText?: string;\n  /**\n   * Configuration of column actions. Set to false to disable or use #EuiDataGridColumnActions to configure the actions displayed in the header cell of the column.\n   */\n  actions?: false | EuiDataGridColumnActions;\n  /**\n   * Additional actions displayed as icon on hover / focus, and in the expanded view of the cell containing the value\n   */\n  cellActions?: EuiDataGridColumnCellAction[];\n}\n\nexport type EuiDataGridColumnCellAction =\n  | JSXElementConstructor<EuiDataGridColumnCellActionProps>\n  | ((props: EuiDataGridColumnCellActionProps) => ReactNode);\n\nexport interface EuiDataGridColumnActions {\n  /**\n   * Show/hide/configure the action to hide a column, provided EuiListGroupItemProps are merged\n   */\n  showHide?: boolean | EuiListGroupItemProps;\n  /**\n   * Show/hide/configure the action that switches the actual column with the column to the left side, provided EuiListGroupItemProps are merged\n   */\n  showMoveLeft?: boolean | EuiListGroupItemProps;\n  /**\n   * Show/hide/configure the action that switches the actual column with the column to the right side, provided EuiListGroupItemProps are merged\n   */\n  showMoveRight?: boolean | EuiListGroupItemProps;\n  /**\n   * Show/hide/configure the action to sort ascending by the actual column, provided EuiListGroupItemProps are merged\n   */\n  showSortAsc?: boolean | EuiListGroupItemProps;\n  /**\n   * Show/hide/configure the action to sort descending by the actual column, provided EuiListGroupItemProps are merged\n   */\n  showSortDesc?: boolean | EuiListGroupItemProps;\n  /**\n   * Append additional actions\n   */\n  additional?: EuiListGroupItemProps[];\n}\n\nexport interface EuiDataGridColumnCellActionProps {\n  /**\n   * The index of the row that contains cell's data\n   */\n  rowIndex: number;\n  /**\n   * The id of the column that contains the cell's data\n   */\n  columnId: string;\n  /**\n   * React component representing the action displayed in the cell\n   */\n  // Component: ComponentType<EuiButtonEmptyProps | EuiButtonProps>;\n  Component: typeof EuiButtonEmpty | typeof EuiButtonIcon;\n  /**\n   * Determines whether the cell's action is displayed expanded (in the Popover)\n   */\n  isExpanded: boolean;\n  /**\n   * Closes the popover if a cell is expanded.\n   * The prop is provided for an expanded cell only.\n   */\n  closePopover: () => void;\n}\n\nexport interface EuiDataGridColumnVisibility {\n  /**\n   * An array of #EuiDataGridColumn `id`s dictating the order and visibility of columns.\n   */\n  visibleColumns: string[];\n  /**\n   * A callback for when a column's visibility or order is modified by the user.\n   */\n  setVisibleColumns: (visibleColumns: string[]) => void;\n}\n\nexport interface EuiDataGridColumnWidths {\n  [key: string]: number;\n}\n// Types for styling options, passed down through the `gridStyle` prop\nexport type EuiDataGridStyleFontSizes = 's' | 'm' | 'l';\nexport type EuiDataGridStyleBorders = 'all' | 'horizontal' | 'none';\nexport type EuiDataGridStyleHeader = 'shade' | 'underline';\nexport type EuiDataGridStyleFooter = 'shade' | 'overline' | 'striped';\nexport type EuiDataGridStyleRowHover = 'highlight' | 'none';\nexport type EuiDataGridStyleCellPaddings = 's' | 'm' | 'l';\n\nexport interface EuiDataGridStyle {\n  /**\n   * Size of fonts used within the row and column cells\n   */\n  fontSize?: EuiDataGridStyleFontSizes;\n  /**\n   * Border uses for the row and column cells\n   */\n  border?: EuiDataGridStyleBorders;\n  /**\n   * If set to true, rows will alternate zebra striping for clarity\n   */\n  stripes?: boolean;\n  /**\n   * Visual style for the column headers. Recommendation is to use the `underline` style in times when #EuiDataGrid `toolbarVisibility` is set to `false`.\n   */\n  header?: EuiDataGridStyleHeader;\n  /**\n   * Visual style for the column footers.\n   */\n  footer?: EuiDataGridStyleFooter;\n  /**\n   * Will define what visual style to show on row hover\n   */\n  rowHover?: EuiDataGridStyleRowHover;\n  /**\n   * Defines the padding with the row and column cells\n   */\n  cellPadding?: EuiDataGridStyleCellPaddings;\n  /**\n   * If set to true, the footer row will be sticky\n   */\n  stickyFooter?: boolean;\n}\n\nexport interface EuiDataGridToolBarVisibilityColumnSelectorOptions {\n  /**\n   * When `false`, removes the ability to show & hide columns through the UI\n   */\n  allowHide?: boolean;\n  /**\n   * When `false`, removes the ability to re-order columns through the UI\n   */\n  allowReorder?: boolean;\n}\n\nexport interface EuiDataGridToolBarVisibilityOptions {\n  /**\n   * Allows the ability for the user to hide fields and sort columns, boolean or a #EuiDataGridToolBarVisibilityColumnSelectorOptions\n   */\n  showColumnSelector?:\n    | boolean\n    | EuiDataGridToolBarVisibilityColumnSelectorOptions;\n  /**\n   * Allows the ability for the user to set the grid density. If on, this merges against what is provided in #EuiDataGridStyle\n   */\n  showStyleSelector?: boolean;\n  /**\n   * Allows the ability for the user to sort rows based upon column values\n   */\n  showSortSelector?: boolean;\n  /**\n   * Allows user to be able to full screen the data grid. If set to `false` make sure your grid fits within a large enough panel to still show the other controls.\n   */\n  showFullScreenSelector?: boolean;\n  /**\n   * Will place any passed node into the toolbar in front of the fullscreen button. Recommend using EuiButtonEmpty with the props shown in the examples.\n   */\n  additionalControls?: ReactNode;\n}\n\n// ideally this would use a generic to enforce `pageSize` exists in `pageSizeOptions`,\n// but TypeScript's default understanding of an array is number[] unless `as const` is used\n// which defeats the generic's purpose & functionality as it would check for `number` in `number[]`\nexport interface EuiDataGridPaginationProps {\n  /**\n   * The index of the current page, starts at 0 for the first page\n   */\n  pageIndex: number;\n  /**\n   * How many rows should initially be shown per page\n   */\n  pageSize: number;\n  /**\n   * An array of page sizes the user can select from.\n   * Leave this prop undefined or use an empty array to hide \"Rows per page\" select button\n   */\n  pageSizeOptions?: number[];\n  /**\n   * A callback for when the user changes the page size selection\n   */\n  onChangeItemsPerPage: (itemsPerPage: number) => void;\n  /**\n   * A callback for when the current page index changes\n   */\n  onChangePage: (pageIndex: number) => void;\n}\n\nexport interface EuiDataGridSorting {\n  /**\n   * A function that receives updated column sort details in response to user interactions in the toolbar controls\n   */\n  onSort: (columns: EuiDataGridSorting['columns']) => void;\n  /**\n   * An array of the column ids currently being sorted and their sort direction. The array order determines the sort order. `{ id: 'A'; direction: 'asc' }`\n   */\n  columns: Array<{\n    id: string;\n    direction: 'asc' | 'desc';\n  }>;\n}\n\nexport interface EuiDataGridInMemory {\n  /**\n    Given the data flow Sorting->Pagination:\n    Each step can be performed by service calls or in-memory by the grid.\n    However, we cannot allow any service calls after an in-memory operation.\n    E.g. if Pagination requires a service call the grid cannot perform\n    in-memory Sorting. This means a single value representing the\n    service / in-memory boundary can be used. Thus there are four states for in-memory's level:\n    * \"enhancements\" - no in-memory operations, but use the available data to enhance the grid\n    * \"pagination\" - only pagination is performed in-memory\n    * \"sorting\" - sorting & pagination is performed in-memory\n */\n  level: 'enhancements' | 'pagination' | 'sorting';\n  /**\n   * An array of column ids for the in-memory processing to skip\n   */\n  skipColumns?: string[];\n}\n\nexport type EuiDataGridFocusedCell = [number, number];\n\nexport interface EuiDataGridInMemoryValues {\n  [key: string]: { [key: string]: string };\n}\n\nexport interface EuiDataGridPopoverContentProps {\n  /**\n   * your `cellValueRenderer` as a ReactElement; allows wrapping the rendered content: `({children}) => <div>{children}</div>`\n   */\n  children: ReactNode;\n  /**\n   * div element the cell contents have been rendered into; useful for processing the rendered text\n   */\n  cellContentsElement: HTMLDivElement;\n}\nexport type EuiDataGridPopoverContent = ComponentType<\n  EuiDataGridPopoverContentProps\n>;\nexport interface EuiDataGridPopoverContents {\n  [key: string]: EuiDataGridPopoverContent;\n}\n\nexport interface EuiDataGridOnColumnResizeData {\n  columnId: string;\n  width: number;\n}\n\nexport type EuiDataGridOnColumnResizeHandler = (\n  data: EuiDataGridOnColumnResizeData\n) => void;\n\nexport type EuiDataGridRowHeightOption =\n  | number\n  | ExclusiveUnion<{ lineCount: number }, { height: number }>;\n\nexport interface EuiDataGridRowHeightsOptions {\n  /**\n   * Defines the default size for all rows. It can be line count or just height.\n   */\n  defaultHeight?: EuiDataGridRowHeightOption;\n  /**\n   * Defines the height for a specific row. It can be line count or just height.\n   */\n  rowHeights?: Record<number, EuiDataGridRowHeightOption>;\n}\n"]}]}