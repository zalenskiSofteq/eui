{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\breadcrumbs\\breadcrumbs.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\breadcrumbs\\breadcrumbs.tsx","mtime":1649070093302},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/breadcrumbs/breadcrumbs.tsx"],"names":["React","Fragment","useEffect","useState","classNames","EuiI18n","EuiInnerText","EuiLink","EuiPopover","EuiIcon","throttle","getBreakpoint","responsiveDefault","xs","s","m","limitBreadcrumbs","breadcrumbs","max","allBreadcrumbs","breadcrumbsAtStart","breadcrumbsAtEnd","limit","Math","min","length","start","floor","overflowBreadcrumbs","slice","i","isEven","normalizedIndex","indexOfBreadcrumb","breadcrumb","unshift","push","EuiBreadcrumbCollapsed","isPopoverOpen","setIsPopoverOpen","ellipsisButton","ariaLabel","EuiBreadcrumbSeparator","EuiBreadcrumbs","className","responsive","truncate","rest","window","Infinity","innerWidth","currentBreakpoint","setCurrentBreakpoint","functionToCallOnWindowResize","newBreakpoint","addEventListener","removeEventListener","breadcrumbElements","map","index","text","href","onClick","breadcrumbClassName","breadcrumbRest","isLastBreadcrumb","breadcrumbClasses","link","ref","innerText","separator","responsiveObject","calculatedMax","limitedBreadcrumbs","classes"],"mappings":"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","sourcesContent":["function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nimport PropTypes from \"prop-types\";\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { EuiI18n } from '../i18n';\nimport { EuiInnerText } from '../inner_text';\nimport { EuiLink } from '../link';\nimport { EuiPopover } from '../popover';\nimport { EuiIcon } from '../icon';\nimport { throttle } from '../../services';\nimport { getBreakpoint } from '../../services/breakpoint';\nvar responsiveDefault = {\n  xs: 1,\n  s: 2,\n  m: 4\n};\n\nvar limitBreadcrumbs = function limitBreadcrumbs(breadcrumbs, max, allBreadcrumbs) {\n  var breadcrumbsAtStart = [];\n  var breadcrumbsAtEnd = [];\n  var limit = Math.min(max, breadcrumbs.length);\n  var start = Math.floor(limit / 2);\n  var overflowBreadcrumbs = allBreadcrumbs.slice(start, start + breadcrumbs.length - limit);\n\n  for (var i = 0; i < limit; i++) {\n    // We'll alternate with displaying breadcrumbs at the end and at the start, but be biased\n    // towards breadcrumbs the end so that if max is an odd number, we'll have one more\n    // breadcrumb visible at the end than at the beginning.\n    var isEven = i % 2 === 0; // We're picking breadcrumbs from the front AND the back, so we treat each iteration as a\n    // half-iteration.\n\n    var normalizedIndex = Math.floor(i * 0.5);\n    var indexOfBreadcrumb = isEven ? breadcrumbs.length - 1 - normalizedIndex : normalizedIndex;\n    var breadcrumb = breadcrumbs[indexOfBreadcrumb];\n\n    if (isEven) {\n      breadcrumbsAtEnd.unshift(breadcrumb);\n    } else {\n      breadcrumbsAtStart.push(breadcrumb);\n    }\n  }\n\n  var EuiBreadcrumbCollapsed = function EuiBreadcrumbCollapsed() {\n    var _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isPopoverOpen = _useState2[0],\n        setIsPopoverOpen = _useState2[1];\n\n    var ellipsisButton = /*#__PURE__*/React.createElement(EuiI18n, {\n      token: \"euiBreadcrumbs.collapsedBadge.ariaLabel\",\n      default: \"Show collapsed breadcrumbs\"\n    }, function (ariaLabel) {\n      return /*#__PURE__*/React.createElement(EuiLink, {\n        className: \"euiBreadcrumb__collapsedLink\",\n        color: \"subdued\",\n        \"aria-label\": ariaLabel,\n        title: ariaLabel,\n        onClick: function onClick() {\n          return setIsPopoverOpen(!isPopoverOpen);\n        }\n      }, \"\\u2026 \", /*#__PURE__*/React.createElement(EuiIcon, {\n        type: \"arrowDown\",\n        size: \"s\"\n      }));\n    });\n    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(EuiPopover, {\n      className: \"euiBreadcrumb euiBreadcrumb--collapsed\",\n      button: ellipsisButton,\n      isOpen: isPopoverOpen,\n      closePopover: function closePopover() {\n        return setIsPopoverOpen(false);\n      }\n    }, /*#__PURE__*/React.createElement(EuiBreadcrumbs, {\n      className: \"euiBreadcrumbs__inPopover\",\n      breadcrumbs: overflowBreadcrumbs,\n      responsive: false,\n      truncate: false,\n      max: 0\n    })), /*#__PURE__*/React.createElement(EuiBreadcrumbSeparator, null));\n  };\n\n  if (max < breadcrumbs.length) {\n    breadcrumbsAtStart.push( /*#__PURE__*/React.createElement(EuiBreadcrumbCollapsed, {\n      key: \"collapsed\"\n    }));\n  }\n\n  return [].concat(breadcrumbsAtStart, breadcrumbsAtEnd);\n};\n\nvar EuiBreadcrumbSeparator = function EuiBreadcrumbSeparator() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"euiBreadcrumbSeparator\"\n  });\n};\n\nexport var EuiBreadcrumbs = ({\n  breadcrumbs,\n  className,\n  responsive = responsiveDefault,\n  truncate = true,\n  max = 5,\n  ...rest\n}) => {\n  const [currentBreakpoint, setCurrentBreakpoint] = useState(getBreakpoint(typeof window === 'undefined' ? -Infinity : window.innerWidth));\n  const functionToCallOnWindowResize = throttle(() => {\n    const newBreakpoint = getBreakpoint(window.innerWidth);\n\n    if (newBreakpoint !== currentBreakpoint) {\n      setCurrentBreakpoint(newBreakpoint);\n    } // reacts every 50ms to resize changes and always gets the final update\n\n  }, 50); // Add window resize handlers\n\n  useEffect(() => {\n    window.addEventListener('resize', functionToCallOnWindowResize);\n    return () => {\n      window.removeEventListener('resize', functionToCallOnWindowResize);\n    };\n  }, [responsive, functionToCallOnWindowResize]);\n  const breadcrumbElements = breadcrumbs.map((breadcrumb, index) => {\n    const {\n      text,\n      href,\n      onClick,\n      truncate,\n      className: breadcrumbClassName,\n      ...breadcrumbRest\n    } = breadcrumb;\n    const isLastBreadcrumb = index === breadcrumbs.length - 1;\n    const breadcrumbClasses = classNames('euiBreadcrumb', breadcrumbClassName, {\n      'euiBreadcrumb--last': isLastBreadcrumb,\n      'euiBreadcrumb--truncate': truncate\n    });\n    let link;\n\n    if (!href && !onClick) {\n      link = <EuiInnerText>\n          {(ref, innerText) => <span ref={ref} className={breadcrumbClasses} title={innerText} aria-current={isLastBreadcrumb ? 'page' : 'false'} {...breadcrumbRest}>\n              {text}\n            </span>}\n        </EuiInnerText>;\n    } else {\n      link = <EuiInnerText>\n          {(ref, innerText) => <EuiLink ref={ref} color={isLastBreadcrumb ? 'text' : 'subdued'} onClick={onClick} href={href} className={breadcrumbClasses} title={innerText} {...breadcrumbRest}>\n              {text}\n            </EuiLink>}\n        </EuiInnerText>;\n    }\n\n    let separator;\n\n    if (!isLastBreadcrumb) {\n      separator = <EuiBreadcrumbSeparator />;\n    }\n\n    return <Fragment key={index}>\n        {link}\n        {separator}\n      </Fragment>;\n  }); // Use the default object if they simply passed `true` for responsive\n\n  const responsiveObject = typeof responsive === 'object' ? responsive : responsiveDefault; // The max property collapses any breadcrumbs past the max quantity.\n  // This is the same behavior we want for responsiveness.\n  // So calculate the max value based on the combination of `max` and `responsive`\n\n  let calculatedMax = max; // Set the calculated max to the number associated with the currentBreakpoint key if it exists\n\n  if (responsive && responsiveObject[currentBreakpoint]) {\n    calculatedMax = responsiveObject[currentBreakpoint];\n  } // Final check is to make sure max is used over a larger breakpoint value\n\n\n  if (max && calculatedMax) {\n    calculatedMax = max < calculatedMax ? max : calculatedMax;\n  }\n\n  const limitedBreadcrumbs = calculatedMax ? limitBreadcrumbs(breadcrumbElements, calculatedMax, breadcrumbs) : breadcrumbElements;\n  const classes = classNames('euiBreadcrumbs', className, {\n    'euiBreadcrumbs--truncate': truncate\n  });\n  return <nav aria-label=\"breadcrumb\" className={classes} {...rest}>\n      {limitedBreadcrumbs}\n    </nav>;\n};\nEuiBreadcrumbs.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n\n  /**\n     * Hides extra (above the max) breadcrumbs under a collapsed item as the window gets smaller.\n     * Pass a custom #EuiBreadcrumbResponsiveMaxCount object to change the number of breadcrumbs to show at the particular breakpoints.\n     * Omitting or passing a `0` value will show all breadcrumbs.\n     *\n     * Pass `false` to turn this behavior off.\n     *\n     * Default: `{ xs: 1, s: 2, m: 4 }`\n     */\n  responsive: PropTypes.oneOfType([PropTypes.bool.isRequired, PropTypes.any.isRequired]),\n\n  /**\n     * Forces all breadcrumbs to single line and\n     * truncates each breadcrumb to a particular width,\n     * except for the last item\n     */\n  truncate: PropTypes.bool,\n\n  /**\n     * Collapses the inner items past the maximum set here\n     * into a single ellipses item\n     */\n  max: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.oneOf([null])]),\n\n  /**\n     * The array of individual #EuiBreadcrumb items\n     */\n  breadcrumbs: PropTypes.arrayOf(PropTypes.shape({\n    className: PropTypes.string,\n    \"aria-label\": PropTypes.string,\n    \"data-test-subj\": PropTypes.string,\n\n    /**\n       * Visible label of the breadcrumb\n       */\n    text: PropTypes.node.isRequired,\n    href: PropTypes.string,\n    onClick: PropTypes.func,\n\n    /**\n       * Force a max-width on the breadcrumb text\n       */\n    truncate: PropTypes.bool\n  }).isRequired).isRequired\n};\n\ntry {\n  EuiBreadcrumbs.__docgenInfo = {\n    description: '',\n    displayName: 'EuiBreadcrumbs',\n    methods: [],\n    props: {\n      className: {\n        defaultValue: null,\n        description: '',\n        name: 'className',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'aria-label': {\n        defaultValue: null,\n        description: '',\n        name: 'aria-label',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'data-test-subj': {\n        defaultValue: null,\n        description: '',\n        name: 'data-test-subj',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      responsive: {\n        defaultValue: {\n          value: null\n        },\n        description: 'Hides extra (above the max) breadcrumbs under a collapsed item as the window gets smaller.\\n' + 'Pass a custom #EuiBreadcrumbResponsiveMaxCount object to change the number of breadcrumbs to show at the particular breakpoints.\\n' + 'Omitting or passing a `0` value will show all breadcrumbs.\\n' + '\\n' + 'Pass `false` to turn this behavior off.\\n' + '\\n' + 'Default: `{ xs: 1, s: 2, m: 4 }`',\n        name: 'responsive',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean | EuiBreadcrumbResponsiveMaxCount'\n        }\n      },\n      truncate: {\n        defaultValue: {\n          value: 'true'\n        },\n        description: 'Forces all breadcrumbs to single line and\\n' + 'truncates each breadcrumb to a particular width,\\n' + 'except for the last item',\n        name: 'truncate',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      max: {\n        defaultValue: {\n          value: '5'\n        },\n        description: 'Collapses the inner items past the maximum set here\\n' + 'into a single ellipses item',\n        name: 'max',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'number'\n        }\n      },\n      breadcrumbs: {\n        defaultValue: null,\n        description: 'The array of individual #EuiBreadcrumb items',\n        name: 'breadcrumbs',\n        parent: undefined,\n        required: true,\n        type: {\n          name: 'EuiBreadcrumb[]'\n        }\n      }\n    },\n    extendedInterfaces: ['CommonProps']\n  };\n} catch (e) {}"]}]}