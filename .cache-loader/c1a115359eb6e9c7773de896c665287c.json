{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\tree_view\\tree_view.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\tree_view\\tree_view.tsx","mtime":1649070093815},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/tree_view/tree_view.tsx"],"names":["React","Component","createContext","classNames","EuiI18n","EuiIcon","EuiScreenReaderOnly","EuiText","keys","htmlIdGenerator","EuiInnerText","EuiTreeViewContext","hasAriaLabel","x","hasOwnProperty","getTreeId","propId","contextId","idGenerator","displayToClassNameMap","default","compressed","EuiTreeView","context","openItems","props","expandByDefault","items","map","id","children","filter","isExpanded","activeItem","treeID","treeIdGenerator","expandChildNodes","ref","index","buttonRef","node","ignoreCallback","state","indexOf","setState","callback","undefined","isNodeOpen","_","i","prevState","includes","event","key","ARROW_DOWN","nodeButtons","Array","from","document","querySelectorAll","currentIndex","currentTarget","nextButton","preventDefault","stopPropagation","focus","ARROW_UP","prevButton","ARROW_RIGHT","handleNodeClick","ARROW_LEFT","prevProps","className","display","showExpansionArrows","rest","classes","instructionsId","isNested","listNavigationInstructions","buttonId","wrappingId","label","innerText","nodeLabel","ariaLabel","nodeClasses","nodeButtonClasses","setButtonRef","onKeyDown","icon","useEmptyIcon","iconWhenExpanded","onChildrenKeydown"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2CC,aAA3C,QAAgE,OAAhE;;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,OAAT,QAAwB,SAAxB;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,SAASC,mBAAT,QAAoC,kBAApC;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,SAASC,IAAT,EAAeC,eAAf,QAAsC,gBAAtC;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,IAAMC,kBAAkB,gBAAGT,aAAa,CAAS,EAAT,CAAxC;;AAEA,SAASU,YAAT,CACEC,CADF,EAEiC;AAC/B,SAAOA,CAAC,CAACC,cAAF,CAAiB,YAAjB,CAAP;AACD;;AAED,SAASC,SAAT,CACEC,MADF,EAEEC,SAFF,EAGEC,WAHF,EAIE;AACA,SAAOF,MAAP,aAAOA,MAAP,cAAOA,MAAP,GAAkBC,SAAS,KAAK,EAAd,GAAmBC,WAAW,EAA9B,GAAmCD,SAArD;AACD;;AAqCD,IAAME,qBAEL,GAAG;AACFC,EAAAA,OAAO,EAAE,IADP;AAEFC,EAAAA,UAAU,EAAE;AAFV,CAFJ;AAqCA,WAAaC,WAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,sEACoBb,eAAe,CAAC,aAAD,CADnC;;AAAA,+DAGsB,CAAC,CAAC,MAAKc,OAH7B;;AAAA,4DAI4B;AACxBC,MAAAA,SAAS,EAAE,MAAKC,KAAL,CAAWC,eAAX,GACP,MAAKD,KAAL,CAAWE,KAAX,CACGC,GADH,CACe;AAAA,YAAGC,EAAH,QAAGA,EAAH;AAAA,YAAOC,QAAP,QAAOA,QAAP;AAAA,eACXA,QAAQ,GAAGD,EAAH,GAAU,IADP;AAAA,OADf,EAIGE,MAJH,CAIU,UAAClB,CAAD;AAAA,eAAOA,CAAC,IAAI,IAAZ;AAAA,OAJV,CADO,GAMP,MAAKY,KAAL,CAAWE,KAAX,CACGC,GADH,CACe;AAAA,YAAGC,EAAH,SAAGA,EAAH;AAAA,YAAOC,QAAP,SAAOA,QAAP;AAAA,YAAiBE,UAAjB,SAAiBA,UAAjB;AAAA,eACXF,QAAQ,IAAIE,UAAZ,GAAyBH,EAAzB,GAAgC,IADrB;AAAA,OADf,EAIGE,MAJH,CAIU,UAAClB,CAAD;AAAA,eAAOA,CAAC,IAAI,IAAZ;AAAA,OAJV,CAPoB;AAYxBoB,MAAAA,UAAU,EAAE,EAZY;AAaxBC,MAAAA,MAAM,EAAEnB,SAAS,CAAC,MAAKU,KAAL,CAAWI,EAAZ,EAAgB,MAAKN,OAArB,EAA8B,MAAKY,eAAnC,CAbO;AAcxBC,MAAAA,gBAAgB,EAAE,MAAKX,KAAL,CAAWC,eAAX,IAA8B;AAdxB,KAJ5B;;AAAA,gEA8BoD,EA9BpD;;AAAA,mEAgCiB,UACbW,GADa,EAEbC,KAFa,EAGV;AACH,YAAKC,SAAL,CAAeD,KAAf,IAAwBD,GAAxB;AACD,KArCH;;AAAA,sEAuCoB,UAACG,IAAD,EAAiD;AAAA,UAApCC,cAAoC,uEAAV,KAAU;;AACjE,UAAMH,KAAK,GAAG,MAAKI,KAAL,CAAWlB,SAAX,CAAqBmB,OAArB,CAA6BH,IAAI,CAACX,EAAlC,CAAd;;AAEA,YAAKe,QAAL,CAAc;AACZR,QAAAA,gBAAgB,EAAE;AADN,OAAd;;AAIAI,MAAAA,IAAI,CAACR,UAAL,GAAkB,CAACQ,IAAI,CAACR,UAAxB;;AAEA,UAAI,CAACS,cAAD,IAAmBD,IAAI,CAACK,QAAL,KAAkBC,SAAzC,EAAoD;AAClDN,QAAAA,IAAI,CAACK,QAAL;AACD;;AAED,UAAI,MAAKE,UAAL,CAAgBP,IAAhB,CAAJ,EAA2B;AACzB;AACA,cAAKI,QAAL,CAAc;AACZpB,UAAAA,SAAS,EAAE,MAAKkB,KAAL,CAAWlB,SAAX,CAAqBO,MAArB,CAA4B,UAACiB,CAAD,EAAIC,CAAJ;AAAA,mBAAUA,CAAC,KAAKX,KAAhB;AAAA,WAA5B;AADC,SAAd;AAGD,OALD,MAKO;AACL;AACA,cAAKM,QAAL,CAAc,UAACM,SAAD;AAAA,iBAAgB;AAC5B1B,YAAAA,SAAS,+BAAM0B,SAAS,CAAC1B,SAAhB,IAA2BgB,IAAI,CAACX,EAAhC,EADmB;AAE5BI,YAAAA,UAAU,EAAEO,IAAI,CAACX;AAFW,WAAhB;AAAA,SAAd;AAID;AACF,KAhEH;;AAAA,iEAmEe,UAACW,IAAD,EAAgB;AAC3B,aAAO,MAAKE,KAAL,CAAWlB,SAAX,CAAqB2B,QAArB,CAA8BX,IAAI,CAACX,EAAnC,CAAP;AACD,KArEH;;AAAA,gEAwEc,UAACuB,KAAD,EAA6BZ,IAA7B,EAA4C;AACtD,cAAQY,KAAK,CAACC,GAAd;AACE,aAAK7C,IAAI,CAAC8C,UAAV;AAAsB;AACpB,gBAAMC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAClBC,QAAQ,CAACC,gBAAT,+CACwC,MAAKjB,KAAL,CAAWR,MADnD,SADkB,CAApB;AAKA,gBAAM0B,YAAY,GAAGL,WAAW,CAACZ,OAAZ,CAAoBS,KAAK,CAACS,aAA1B,CAArB;;AACA,gBAAID,YAAY,GAAG,CAAC,CAApB,EAAuB;AACrB,kBAAME,UAAU,GAAGP,WAAW,CAACK,YAAY,GAAG,CAAhB,CAA9B;;AACA,kBAAIE,UAAJ,EAAgB;AACdV,gBAAAA,KAAK,CAACW,cAAN;AACAX,gBAAAA,KAAK,CAACY,eAAN;AACAF,gBAAAA,UAAU,CAACG,KAAX;AACD;AACF;;AACD;AACD;;AACD,aAAKzD,IAAI,CAAC0D,QAAV;AAAoB;AAClB,gBAAMX,YAAW,GAAGC,KAAK,CAACC,IAAN,CAClBC,QAAQ,CAACC,gBAAT,+CACwC,MAAKjB,KAAL,CAAWR,MADnD,SADkB,CAApB;;AAKA,gBAAM0B,aAAY,GAAGL,YAAW,CAACZ,OAAZ,CAAoBS,KAAK,CAACS,aAA1B,CAArB;;AACA,gBAAID,aAAY,GAAG,CAAC,CAApB,EAAuB;AACrB,kBAAMO,UAAU,GAAGZ,YAAW,CAACK,aAAY,GAAG,CAAC,CAAjB,CAA9B;;AACA,kBAAIO,UAAJ,EAAgB;AACdf,gBAAAA,KAAK,CAACW,cAAN;AACAX,gBAAAA,KAAK,CAACY,eAAN;AACAG,gBAAAA,UAAU,CAACF,KAAX;AACD;AACF;;AACD;AACD;;AACD,aAAKzD,IAAI,CAAC4D,WAAV;AAAuB;AACrB,gBAAI,CAAC,MAAKrB,UAAL,CAAgBP,IAAhB,CAAL,EAA4B;AAC1BY,cAAAA,KAAK,CAACW,cAAN;AACAX,cAAAA,KAAK,CAACY,eAAN;;AACA,oBAAKK,eAAL,CAAqB7B,IAArB,EAA2B,IAA3B;AACD;;AACD;AACD;;AACD,aAAKhC,IAAI,CAAC8D,UAAV;AAAsB;AACpB,gBAAI,MAAKvB,UAAL,CAAgBP,IAAhB,CAAJ,EAA2B;AACzBY,cAAAA,KAAK,CAACW,cAAN;AACAX,cAAAA,KAAK,CAACY,eAAN;;AACA,oBAAKK,eAAL,CAAqB7B,IAArB,EAA2B,IAA3B;AACD;AACF;;AACD;AACE;AAnDJ;AAqDD,KA9HH;;AAAA,wEAgIsB,UAACY,KAAD,EAA6Bd,KAA7B,EAA+C;AACjE,UAAIc,KAAK,CAACC,GAAN,KAAc7C,IAAI,CAAC8D,UAAvB,EAAmC;AACjClB,QAAAA,KAAK,CAACW,cAAN;AACAX,QAAAA,KAAK,CAACY,eAAN;;AACA,cAAKzB,SAAL,CAAeD,KAAf,EAAuB2B,KAAvB;AACD;AACF,KAtIH;;AAAA;AAAA;;AAAA;AAAA;AAAA,uCAqBqBM,SArBrB,EAqBkD;AAC9C,UAAI,KAAK9C,KAAL,CAAWI,EAAX,KAAkB0C,SAAS,CAAC1C,EAAhC,EAAoC;AAClC;AACA,aAAKe,QAAL,CAAc;AACZV,UAAAA,MAAM,EAAEnB,SAAS,CAAC,KAAKU,KAAL,CAAWI,EAAZ,EAAgB,KAAKN,OAArB,EAA8B,KAAKY,eAAnC;AADL,SAAd;AAGD;AACF;AA5BH;AAAA;AAAA,6BAwIW;AAAA;;AAAA,wBASH,KAAKV,KATF;AAAA,UAELK,QAFK,eAELA,QAFK;AAAA,UAGL0C,SAHK,eAGLA,SAHK;AAAA,UAIL7C,KAJK,eAILA,KAJK;AAAA,4CAKL8C,OALK;AAAA,UAKLA,OALK,oCAKK,SALL;AAAA,UAML/C,eANK,eAMLA,eANK;AAAA,UAOLgD,mBAPK,eAOLA,mBAPK;AAAA,UAQFC,IARE,mIAWP;;;AACA,UAAMC,OAAO,GAAGzE,UAAU,CACxB,aADwB,EAExBsE,OAAO,GAAGtD,qBAAqB,CAACsD,OAAD,CAAxB,GAAoC,IAFnB,EAGxB;AAAE,mCAA2BC;AAA7B,OAHwB,EAIxBF,SAJwB,CAA1B;AAOA,UAAMK,cAAc,aAAM,KAAKnC,KAAL,CAAWR,MAAjB,kBAApB;AAEA,0BACE,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,QAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWR;AAA/C,sBACE,oBAAC,OAAD;AACE,QAAA,IAAI,EAAEuC,OAAO,KAAK,YAAZ,GAA2B,GAA3B,GAAiC,GADzC;AAEE,QAAA,SAAS,EAAC;AAFZ,SAGG,CAAC,KAAKK,QAAN,iBACC,oBAAC,OAAD;AACE,QAAA,KAAK,EAAC,wCADR;AAEE,QAAA,OAAO,EAAC;AAFV,SAGG,UAACC,0BAAD;AAAA,4BACC,oBAAC,mBAAD,qBACE;AAAG,UAAA,EAAE,EAAEF;AAAP,WAAwBE,0BAAxB,CADF,CADD;AAAA,OAHH,CAJJ,eAcE;AACE,QAAA,SAAS,EAAEH,OADb;AAEE,QAAA,EAAE,EAAE,CAAC,KAAKE,QAAN,GAAiB,KAAKpC,KAAL,CAAWR,MAA5B,GAAqCY,SAF3C;AAGE,4BAAkB,CAAC,KAAKgC,QAAN,GAAiBD,cAAjB,GAAkC/B;AAHtD,SAIM6B,IAJN,GAKGhD,KAAK,CAACC,GAAN,CAAU,UAACY,IAAD,EAAOF,KAAP,EAAiB;AAC1B,YAAM0C,QAAQ,GAAGxC,IAAI,CAACX,EAAtB;;AACA,YAAMoD,UAAU,GAAG,MAAI,CAAC9C,eAAL,CAAqB6C,QAArB,CAAnB;;AAEA,4BACE,oBAAC,YAAD;AACE,UAAA,GAAG,EAAExC,IAAI,CAACX,EAAL,GAAUS,KADjB;AAEE,UAAA,QAAQ,EAAE,OAAOE,IAAI,CAAC0C,KAAZ,KAAsB,QAAtB,GAAiC1C,IAAI,CAAC0C,KAAtC,GAA8C;AAF1D,WAGG,UAAC7C,GAAD,EAAM8C,SAAN;AAAA,8BACC,oBAAC,OAAD;AACE,YAAA,GAAG,EAAE3C,IAAI,CAACX,EAAL,GAAUS,KADjB;AAEE,YAAA,KAAK,EAAC,uBAFR;AAGE,YAAA,OAAO,EAAC,kCAHV;AAIE,YAAA,MAAM,EAAE;AACN8C,cAAAA,SAAS,EAAED,SADL;AAENE,cAAAA,SAAS,EAAEzE,YAAY,CAAC+D,IAAD,CAAZ,GAAqBA,IAAI,CAAC,YAAD,CAAzB,GAA0C;AAF/C;AAJV,aAQG,UAACU,SAAD,EAAuB;AACtB,gBAAMH,KAE2B,GAAGtE,YAAY,CAAC+D,IAAD,CAAZ,GAChC;AACE,4BAAcU;AADhB,aADgC,GAIhC;AACE,2CAAsBL,QAAtB,cAAkCL,IAAI,CAAC,iBAAD,CAAtC;AADF,aANJ;AAUA,gBAAMW,WAAW,GAAGnF,UAAU,CAC5B,mBAD4B,EAE5BsE,OAAO,GAAGtD,qBAAqB,CAACsD,OAAD,CAAxB,GAAoC,IAFf,EAG5B;AACE,6CAA+B,MAAI,CAAC1B,UAAL,CAC7BP,IAD6B;AADjC,aAH4B,CAA9B;AAUA,gBAAM+C,iBAAiB,GAAGpF,UAAU,CAClC,wBADkC,EAElCuE,mBAAmB,IAAIlC,IAAI,CAACV,QAA5B,GACI,oCADJ,GAEI,IAJ8B,EAKlC,MAAI,CAACY,KAAL,CAAWT,UAAX,KAA0BO,IAAI,CAACX,EAA/B,GACI,2BADJ,GAEI,IAP8B,EAQlCW,IAAI,CAACgC,SAAL,GAAiBhC,IAAI,CAACgC,SAAtB,GAAkC,IARA,CAApC;AAWA,gCACE,oBAAC,KAAD,CAAO,QAAP,qBACE;AAAI,cAAA,SAAS,EAAEc;AAAf,4BACE;AACE,cAAA,EAAE,EAAEN,QADN;AAEE,+BAAeC,UAFjB;AAGE,+BAAe,MAAI,CAAClC,UAAL,CAAgBP,IAAhB,CAHjB;AAIE,cAAA,GAAG,EAAE,aAACH,KAAD;AAAA,uBAAS,MAAI,CAACmD,YAAL,CAAkBnD,KAAlB,EAAuBC,KAAvB,CAAT;AAAA,eAJP;AAKE,4DAAqC,MAAI,CAACI,KAAL,CAAWR,MAAhD,CALF;AAME,cAAA,SAAS,EAAE,mBAACkB,KAAD;AAAA,uBACT,MAAI,CAACqC,SAAL,CAAerC,KAAf,EAAsBZ,IAAtB,CADS;AAAA,eANb;AASE,cAAA,OAAO,EAAE;AAAA,uBAAM,MAAI,CAAC6B,eAAL,CAAqB7B,IAArB,CAAN;AAAA,eATX;AAUE,cAAA,SAAS,EAAE+C;AAVb,eAWGb,mBAAmB,IAAIlC,IAAI,CAACV,QAA5B,gBACC,oBAAC,OAAD;AACE,cAAA,SAAS,EAAC,6BADZ;AAEE,cAAA,IAAI,EAAE2C,OAAO,KAAK,YAAZ,GAA2B,GAA3B,GAAiC,GAFzC;AAGE,cAAA,IAAI,EACF,MAAI,CAAC1B,UAAL,CAAgBP,IAAhB,IACI,WADJ,GAEI;AANR,cADD,GAUG,IArBN,EAsBGA,IAAI,CAACkD,IAAL,IAAa,CAAClD,IAAI,CAACmD,YAAnB,gBACC;AAAM,cAAA,SAAS,EAAC;AAAhB,eACG,MAAI,CAAC5C,UAAL,CAAgBP,IAAhB,KACDA,IAAI,CAACoD,gBADJ,GAEGpD,IAAI,CAACoD,gBAFR,GAGGpD,IAAI,CAACkD,IAJX,CADD,GAOG,IA7BN,EA8BGlD,IAAI,CAACmD,YAAL,IAAqB,CAACnD,IAAI,CAACkD,IAA3B,gBACC;AAAM,cAAA,SAAS,EAAC;AAAhB,cADD,GAEG,IAhCN,eAiCE;AACE,cAAA,GAAG,EAAErD,GADP;AAEE,cAAA,SAAS,EAAC;AAFZ,eAGGG,IAAI,CAAC0C,KAHR,CAjCF,CADF,eAwCE;AACE,cAAA,EAAE,EAAED,UADN;AAEE,cAAA,SAAS,EAAE,mBAAC7B,KAAD;AAAA,uBACT,MAAI,CAACyC,iBAAL,CAAuBzC,KAAvB,EAA8Bd,KAA9B,CADS;AAAA;AAFb,eAKGE,IAAI,CAACV,QAAL,IAAiB,MAAI,CAACiB,UAAL,CAAgBP,IAAhB,CAAjB,gBACC,oBAAC,WAAD;AACE,cAAA,KAAK,EAAEA,IAAI,CAACV,QADd;AAEE,cAAA,OAAO,EAAE2C,OAFX;AAGE,cAAA,mBAAmB,EAAEC,mBAHvB;AAIE,cAAA,eAAe,EACb,MAAI,CAAChC,KAAL,CAAWN;AALf,eAOM8C,KAPN,EADD,GAUG,IAfN,CAxCF,CADF,CADF;AA8DD,WAtGH,CADD;AAAA,SAHH,CADF;AAgHD,OApHA,CALH,CAdF,CADF,CADF;AA8ID;AA3SH;;AAAA;AAAA,EAAiCjF,SAAjC;;gBAAaqB,W,iBAEUX,kB;;;;;;;AAvHvB;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;AACA;;;;AADA;AACA;;;;AADA;;;;AAAA;;;;AAAA;AACA;;;;;AADA;;;;AAAA;;;;AAAA;AACA","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Component, createContext } from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nimport { EuiI18n } from '../i18n';\nimport { EuiIcon } from '../icon';\nimport { EuiScreenReaderOnly } from '../accessibility';\nimport { EuiText } from '../text';\nimport { keys, htmlIdGenerator } from '../../services';\nimport { EuiInnerText } from '../inner_text';\nvar EuiTreeViewContext = /*#__PURE__*/createContext('');\n\nfunction hasAriaLabel(x) {\n  return x.hasOwnProperty('aria-label');\n}\n\nfunction getTreeId(propId, contextId, idGenerator) {\n  return propId !== null && propId !== void 0 ? propId : contextId === '' ? idGenerator() : contextId;\n}\n\nvar displayToClassNameMap = {\n  default: null,\n  compressed: 'euiTreeView--compressed'\n};\nexport class EuiTreeView extends Component {\n  treeIdGenerator = htmlIdGenerator('euiTreeView');\n  static contextType = EuiTreeViewContext;\n  isNested = !!this.context;\n  state = {\n    openItems: this.props.expandByDefault ? this.props.items.map(({\n      id,\n      children\n    }) => children ? id : null).filter(x => x != null) : this.props.items.map(({\n      id,\n      children,\n      isExpanded\n    }) => children && isExpanded ? id : null).filter(x => x != null),\n    activeItem: '',\n    treeID: getTreeId(this.props.id, this.context, this.treeIdGenerator),\n    expandChildNodes: this.props.expandByDefault || false\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.id !== prevProps.id) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        treeID: getTreeId(this.props.id, this.context, this.treeIdGenerator)\n      });\n    }\n  }\n\n  buttonRef = [];\n  setButtonRef = (ref, index) => {\n    this.buttonRef[index] = ref;\n  };\n  handleNodeClick = (node, ignoreCallback = false) => {\n    const index = this.state.openItems.indexOf(node.id);\n    this.setState({\n      expandChildNodes: false\n    });\n    node.isExpanded = !node.isExpanded;\n\n    if (!ignoreCallback && node.callback !== undefined) {\n      node.callback();\n    }\n\n    if (this.isNodeOpen(node)) {\n      // if the node is part of openItems[] then remove it\n      this.setState({\n        openItems: this.state.openItems.filter((_, i) => i !== index)\n      });\n    } else {\n      // if the node isn't part of openItems[] then add it\n      this.setState(prevState => ({\n        openItems: [...prevState.openItems, node.id],\n        activeItem: node.id\n      }));\n    }\n  }; // check if the node is included in openItems[]\n\n  isNodeOpen = node => {\n    return this.state.openItems.includes(node.id);\n  }; // Enable keyboard navigation\n\n  onKeyDown = (event, node) => {\n    switch (event.key) {\n      case keys.ARROW_DOWN:\n        {\n          const nodeButtons = Array.from(document.querySelectorAll(`[data-test-subj=\"euiTreeViewButton-${this.state.treeID}\"]`));\n          const currentIndex = nodeButtons.indexOf(event.currentTarget);\n\n          if (currentIndex > -1) {\n            const nextButton = nodeButtons[currentIndex + 1];\n\n            if (nextButton) {\n              event.preventDefault();\n              event.stopPropagation();\n              nextButton.focus();\n            }\n          }\n\n          break;\n        }\n\n      case keys.ARROW_UP:\n        {\n          const nodeButtons = Array.from(document.querySelectorAll(`[data-test-subj=\"euiTreeViewButton-${this.state.treeID}\"]`));\n          const currentIndex = nodeButtons.indexOf(event.currentTarget);\n\n          if (currentIndex > -1) {\n            const prevButton = nodeButtons[currentIndex + -1];\n\n            if (prevButton) {\n              event.preventDefault();\n              event.stopPropagation();\n              prevButton.focus();\n            }\n          }\n\n          break;\n        }\n\n      case keys.ARROW_RIGHT:\n        {\n          if (!this.isNodeOpen(node)) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.handleNodeClick(node, true);\n          }\n\n          break;\n        }\n\n      case keys.ARROW_LEFT:\n        {\n          if (this.isNodeOpen(node)) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.handleNodeClick(node, true);\n          }\n        }\n\n      default:\n        break;\n    }\n  };\n  onChildrenKeydown = (event, index) => {\n    if (event.key === keys.ARROW_LEFT) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.buttonRef[index].focus();\n    }\n  };\n\n  render() {\n    const {\n      children,\n      className,\n      items,\n      display = 'default',\n      expandByDefault,\n      showExpansionArrows,\n      ...rest\n    } = this.props; // Computed classNames\n\n    const classes = classNames('euiTreeView', display ? displayToClassNameMap[display] : null, {\n      'euiTreeView--withArrows': showExpansionArrows\n    }, className);\n    const instructionsId = `${this.state.treeID}--instruction`;\n    return <EuiTreeViewContext.Provider value={this.state.treeID}>\n        <EuiText size={display === 'compressed' ? 's' : 'm'} className=\"euiTreeView__wrapper\">\n          {!this.isNested && <EuiI18n token=\"euiTreeView.listNavigationInstructions\" default=\"You can quickly navigate this list using arrow keys.\">\n              {listNavigationInstructions => <EuiScreenReaderOnly>\n                  <p id={instructionsId}>{listNavigationInstructions}</p>\n                </EuiScreenReaderOnly>}\n            </EuiI18n>}\n          <ul className={classes} id={!this.isNested ? this.state.treeID : undefined} aria-describedby={!this.isNested ? instructionsId : undefined} {...rest}>\n            {items.map((node, index) => {\n            const buttonId = node.id;\n            const wrappingId = this.treeIdGenerator(buttonId);\n            return <EuiInnerText key={node.id + index} fallback={typeof node.label === 'string' ? node.label : ''}>\n                  {(ref, innerText) => <EuiI18n key={node.id + index} token=\"euiTreeView.ariaLabel\" default=\"{nodeLabel} child of {ariaLabel}\" values={{\n                nodeLabel: innerText,\n                ariaLabel: hasAriaLabel(rest) ? rest['aria-label'] : ''\n              }}>\n                      {ariaLabel => {\n                  const label = hasAriaLabel(rest) ? {\n                    'aria-label': ariaLabel\n                  } : {\n                    'aria-labelledby': `${buttonId} ${rest['aria-labelledby']}`\n                  };\n                  const nodeClasses = classNames('euiTreeView__node', display ? displayToClassNameMap[display] : null, {\n                    'euiTreeView__node--expanded': this.isNodeOpen(node)\n                  });\n                  const nodeButtonClasses = classNames('euiTreeView__nodeInner', showExpansionArrows && node.children ? 'euiTreeView__nodeInner--withArrows' : null, this.state.activeItem === node.id ? 'euiTreeView__node--active' : null, node.className ? node.className : null);\n                  return <React.Fragment>\n                            <li className={nodeClasses}>\n                              <button id={buttonId} aria-controls={wrappingId} aria-expanded={this.isNodeOpen(node)} ref={ref => this.setButtonRef(ref, index)} data-test-subj={`euiTreeViewButton-${this.state.treeID}`} onKeyDown={event => this.onKeyDown(event, node)} onClick={() => this.handleNodeClick(node)} className={nodeButtonClasses}>\n                                {showExpansionArrows && node.children ? <EuiIcon className=\"euiTreeView__expansionArrow\" size={display === 'compressed' ? 's' : 'm'} type={this.isNodeOpen(node) ? 'arrowDown' : 'arrowRight'} /> : null}\n                                {node.icon && !node.useEmptyIcon ? <span className=\"euiTreeView__iconWrapper\">\n                                    {this.isNodeOpen(node) && node.iconWhenExpanded ? node.iconWhenExpanded : node.icon}\n                                  </span> : null}\n                                {node.useEmptyIcon && !node.icon ? <span className=\"euiTreeView__iconPlaceholder\" /> : null}\n                                <span ref={ref} className=\"euiTreeView__nodeLabel\">\n                                  {node.label}\n                                </span>\n                              </button>\n                              <div id={wrappingId} onKeyDown={event => this.onChildrenKeydown(event, index)}>\n                                {node.children && this.isNodeOpen(node) ? <EuiTreeView items={node.children} display={display} showExpansionArrows={showExpansionArrows} expandByDefault={this.state.expandChildNodes} {...label} /> : null}\n                              </div>\n                            </li>\n                          </React.Fragment>;\n                }}\n                    </EuiI18n>}\n                </EuiInnerText>;\n          })}\n          </ul>\n        </EuiText>\n      </EuiTreeViewContext.Provider>;\n  }\n\n}\nEuiTreeView.propTypes = {\n  className: PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n\n  /** An array of EuiTreeViewNodes\n       */\n  items: PropTypes.arrayOf(PropTypes.shape({\n    /** An array of EuiTreeViewNodes to render as children\n       */\n    children: PropTypes.arrayOf(PropTypes.any.isRequired),\n\n    /** The readable label for the item\n       */\n    label: PropTypes.node.isRequired,\n\n    /** A unique ID\n       */\n    id: PropTypes.string.isRequired,\n\n    /** An icon to use on the left of the label\n       */\n    icon: PropTypes.element,\n\n    /** Display a different icon when the item is expanded.\n      For instance, an open folder or a down arrow\n      */\n    iconWhenExpanded: PropTypes.element,\n\n    /** Use an empty icon to keep items without an icon\n      lined up with their siblings\n      */\n    useEmptyIcon: PropTypes.bool,\n\n    /** Whether or not the item is expanded.\n       */\n    isExpanded: PropTypes.bool,\n\n    /** Optional class to throw on the node\n       */\n    className: PropTypes.string,\n\n    /** Function to call when the item is clicked.\n       The open state of the item will always be toggled.\n       */\n    callback: PropTypes.func\n  }).isRequired).isRequired,\n\n  /** Optionally use a variation with smaller text and icon sizes\n       */\n  display: PropTypes.oneOf([\"default\", \"compressed\"]),\n\n  /** Set all items to open on initial load\n       */\n  expandByDefault: PropTypes.bool,\n\n  /** Display expansion arrows next to all items\n       * that contain children\n       */\n  showExpansionArrows: PropTypes.bool,\n  \"aria-label\": PropTypes.string,\n  \"aria-labelledby\": PropTypes.string\n};\n\ntry {\n  EuiTreeView.__docgenInfo = {\n    description: '',\n    displayName: 'EuiTreeView',\n    methods: [],\n    props: {\n      className: {\n        defaultValue: null,\n        description: '',\n        name: 'className',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'data-test-subj': {\n        defaultValue: null,\n        description: '',\n        name: 'data-test-subj',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      display: {\n        defaultValue: null,\n        description: 'Optionally use a variation with smaller text and icon sizes',\n        name: 'display',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'enum',\n          raw: 'EuiTreeViewDisplayOptions',\n          value: [{\n            value: '\"default\"'\n          }, {\n            value: '\"compressed\"'\n          }]\n        }\n      },\n      items: {\n        defaultValue: null,\n        description: 'An array of EuiTreeViewNodes',\n        name: 'items',\n        parent: undefined,\n        required: true,\n        type: {\n          name: 'Node[]'\n        }\n      },\n      expandByDefault: {\n        defaultValue: null,\n        description: 'Set all items to open on initial load',\n        name: 'expandByDefault',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      showExpansionArrows: {\n        defaultValue: null,\n        description: 'Display expansion arrows next to all items\\nthat contain children',\n        name: 'showExpansionArrows',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      'aria-label': {\n        defaultValue: null,\n        description: '',\n        name: 'aria-label',\n        parent: undefined,\n        required: true,\n        type: {\n          name: 'string'\n        }\n      },\n      'aria-labelledby': {\n        defaultValue: null,\n        description: '',\n        name: 'aria-labelledby',\n        parent: undefined,\n        required: true,\n        type: {\n          name: 'string'\n        }\n      }\n    },\n    extendedInterfaces: ['HTMLAttributes', 'AriaAttributes', 'DOMAttributes', 'CommonProps']\n  };\n} catch (e) {}"]}]}