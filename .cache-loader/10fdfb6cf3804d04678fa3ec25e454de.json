{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\color_picker\\index.ts","dependencies":[{"path":"D:\\work\\eui\\src\\components\\color_picker\\index.ts","mtime":1649070093337},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/color_picker/index.ts"],"names":["EuiColorPicker","EuiColorPickerSwatch","EuiHue","EuiSaturation","EuiColorStops","EuiColorPalettePicker","EuiColorPaletteDisplay"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,cAAT,QAAoD,gBAApD;AACA,SACEC,oBADF,QAGO,uBAHP;AAIA,SAASC,MAAT,QAAoC,OAApC;AACA,SAASC,aAAT,QAAkD,cAAlD;AACA,SAASC,aAAT,QAA8B,eAA9B,C,CACA;AACA;AACA;;AACA,eAAmC,2BAAnC;AACA,SACEC,qBADF,QAIO,wBAJP;AAMA,SACEC,sBADF,QAGO,yBAHP","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport { EuiColorPicker, EuiColorPickerProps } from './color_picker';\nexport {\n  EuiColorPickerSwatch,\n  EuiColorPickerSwatchProps,\n} from './color_picker_swatch';\nexport { EuiHue, EuiHueProps } from './hue';\nexport { EuiSaturation, EuiSaturationProps } from './saturation';\nexport { EuiColorStops } from './color_stops';\n// TODO: Exporting `EuiColorStopsProps` from `'./color_stops'`\n// results in a duplicate d.ts entry that causes build warnings\n// and potential downstream TS project failures.\nexport { EuiColorStopsProps } from './color_stops/color_stops';\nexport {\n  EuiColorPalettePicker,\n  EuiColorPalettePickerProps,\n  EuiColorPalettePickerPaletteProps,\n} from './color_palette_picker';\n\nexport {\n  EuiColorPaletteDisplay,\n  EuiColorPaletteDisplayProps,\n} from './color_palette_display';\n"]}]}