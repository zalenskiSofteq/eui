{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\search_bar\\filters\\field_value_toggle_group_filter.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\search_bar\\filters\\field_value_toggle_group_filter.tsx","mtime":1649070093746},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/search_bar/filters/field_value_toggle_group_filter.tsx"],"names":["React","Component","EuiFilterButton","Query","FieldValueToggleGroupFilter","config","query","item","clause","getSimpleFieldClause","field","value","isMust","active","name","negatedName","props","operator","removeSimpleFieldClauses","addSimpleFieldValue","onChange","items","map","index","resolveDisplay","onClick","valueChanged","key","isLastItem","length"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { EuiFilterButton } from '../../filter_group';\nimport { Query } from '../query';\nexport class FieldValueToggleGroupFilter extends Component {\n  resolveDisplay(config, query, item) {\n    const clause = query.getSimpleFieldClause(config.field, item.value);\n\n    if (clause) {\n      if (Query.isMust(clause)) {\n        return {\n          active: true,\n          name: item.name\n        };\n      }\n\n      return {\n        active: true,\n        name: item.negatedName ? item.negatedName : `Not ${item.name}`\n      };\n    }\n\n    return {\n      active: false,\n      name: item.name\n    };\n  }\n\n  valueChanged(item, active) {\n    const {\n      field\n    } = this.props.config;\n    const {\n      value,\n      operator\n    } = item;\n    const query = active ? this.props.query.removeSimpleFieldClauses(field) : this.props.query.removeSimpleFieldClauses(field).addSimpleFieldValue(field, value, true, operator);\n    this.props.onChange(query);\n  }\n\n  render() {\n    const {\n      config,\n      query\n    } = this.props;\n    return config.items.map((item, index) => {\n      const {\n        active,\n        name\n      } = this.resolveDisplay(config, query, item);\n\n      const onClick = () => {\n        this.valueChanged(item, active);\n      };\n\n      const key = `field_value_toggle_filter_item_${index}`;\n      const isLastItem = index === config.items.length - 1;\n      return <EuiFilterButton key={key} onClick={onClick} hasActiveFilters={active} noDivider={!isLastItem} aria-pressed={!!active} withNext={!isLastItem}>\n          {name}\n        </EuiFilterButton>;\n    });\n  }\n\n}\nFieldValueToggleGroupFilter.propTypes = {\n  index: PropTypes.number.isRequired,\n  config: PropTypes.shape({\n    type: PropTypes.oneOf([\"field_value_toggle_group\"]).isRequired,\n    field: PropTypes.string.isRequired,\n\n    /**\n       * See #FieldValueToggleGroupFilterItemType\n       */\n    items: PropTypes.arrayOf(PropTypes.shape({\n      value: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired, PropTypes.bool.isRequired]).isRequired,\n      name: PropTypes.string.isRequired,\n      negatedName: PropTypes.string,\n      operator: PropTypes.oneOf([\"eq\", \"exact\", \"gt\", \"gte\", \"lt\", \"lte\"])\n    }).isRequired).isRequired,\n    available: PropTypes.func\n  }).isRequired,\n  query: PropTypes.any.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\ntry {\n  FieldValueToggleGroupFilter.__docgenInfo = {\n    description: '',\n    displayName: 'FieldValueToggleGroupFilter',\n    methods: [],\n    props: {\n      index: {\n        defaultValue: null,\n        description: '',\n        name: 'index',\n        parent: {\n          fileName: 'eui/src/components/search_bar/filters/field_value_toggle_group_filter.tsx',\n          name: 'FieldValueToggleGroupFilterProps'\n        },\n        required: true,\n        type: {\n          name: 'number'\n        }\n      },\n      config: {\n        defaultValue: null,\n        description: '',\n        name: 'config',\n        parent: {\n          fileName: 'eui/src/components/search_bar/filters/field_value_toggle_group_filter.tsx',\n          name: 'FieldValueToggleGroupFilterProps'\n        },\n        required: true,\n        type: {\n          name: 'FieldValueToggleGroupFilterConfigType'\n        }\n      },\n      query: {\n        defaultValue: null,\n        description: '',\n        name: 'query',\n        parent: {\n          fileName: 'eui/src/components/search_bar/filters/field_value_toggle_group_filter.tsx',\n          name: 'FieldValueToggleGroupFilterProps'\n        },\n        required: true,\n        type: {\n          name: 'Query'\n        }\n      },\n      onChange: {\n        defaultValue: null,\n        description: '',\n        name: 'onChange',\n        parent: {\n          fileName: 'eui/src/components/search_bar/filters/field_value_toggle_group_filter.tsx',\n          name: 'FieldValueToggleGroupFilterProps'\n        },\n        required: true,\n        type: {\n          name: '(value: Query) => void'\n        }\n      }\n    },\n    extendedInterfaces: ['FieldValueToggleGroupFilterProps']\n  };\n} catch (e) {}"]}]}