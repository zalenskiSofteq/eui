{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\services\\popover\\popover_positioning.ts","dependencies":[{"path":"D:\\work\\eui\\src\\services\\popover\\popover_positioning.ts","mtime":1649070093846},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/services/popover/popover_positioning.ts"],"names":["POSITIONS","relatedDimension","top","right","bottom","left","dimensionPositionAttribute","height","width","positionComplements","positionSubstitutes","getBufferValues","buffer","Array","isArray","topBuffer","rightBuffer","bottomBuffer","leftBuffer","findPopoverPosition","anchor","popover","align","position","forcePosition","offset","allowCrossAxis","container","arrowConfig","returnBoundingBox","anchorBoundingBox","getElementBoundingBox","popoverBoundingBox","documentWidth","document","documentElement","clientWidth","window","innerWidth","documentHeight","clientHeight","innerHeight","windowBoundingBox","containerBoundingBox","iterationPositions","iterationAlignments","push","undefined","bestFit","bestPosition","idx","length","iterationPosition","screenCoordinates","getPopoverScreenCoordinates","fit","pageYOffset","pageXOffset","arrow","Error","crossAxisFirstSide","crossAxisSecondSide","crossAxisDimension","getCrossAxisPosition","crossAxisPosition","crossAxisArrowPosition","primaryAxisDimension","primaryAxisPositionName","getPrimaryAxisPosition","primaryAxisPosition","primaryAxisArrowPosition","popoverPlacement","combinedBoundingBox","intersectBoundingBoxes","getVisibleFit","popoverSizeOnCrossAxis","anchorSizeOnCrossAxis","anchorHalfSize","crossAxisPositionOriginal","availableSpace","getAvailableSpace","minimumSpace","arrowBuffer","contentOverflowSize","alignAmount","alignDirection","amountOfShiftNeeded","shiftDirection","alignedOverflowAmount","needsShift","spaceAvailableOnFirstSide","spaceAvailableOnSecondSide","isShiftTowardFirstSide","leastAvailableSpace","Math","min","shiftAmount","arrowWidth","difference","edge","isOffsetDecreasing","popoverSizeOnPrimaryAxis","anchorEdgeOrigin","anchorSizeOnPrimaryAxis","primaryAxisOffset","contentOffset","element","rect","getBoundingClientRect","offsetSide","contentBoundingBox","intersection","intersectionArea","contentArea","firstBox","secondBox","max","getElementZIndex","cousin","nodesToInspect","offsetParent","contains","reverse","node","zIndex","defaultView","getComputedStyle","getPropertyValue","parsedZIndex","parseInt","isNaN"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { EuiPopoverPosition } from './types';\n\ntype Dimension = 'height' | 'width';\n\nexport const POSITIONS: EuiPopoverPosition[] = [\n  'top',\n  'right',\n  'bottom',\n  'left',\n];\n\ninterface BoundingBox {\n  [position: string]: number;\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n}\n\nexport interface EuiClientRect extends BoundingBox {\n  height: number;\n  width: number;\n}\n\nconst relatedDimension: { [position in EuiPopoverPosition]: Dimension } = {\n  top: 'height',\n  right: 'width',\n  bottom: 'height',\n  left: 'width',\n};\n\nconst dimensionPositionAttribute: {\n  [dimension in Dimension]: 'top' | 'left';\n} = {\n  height: 'top',\n  width: 'left',\n};\n\nconst positionComplements: {\n  [position in EuiPopoverPosition]: EuiPopoverPosition;\n} = {\n  top: 'bottom',\n  right: 'left',\n  bottom: 'top',\n  left: 'right',\n};\n\n// always resolving to top/left is taken advantage of by knowing they are the\n// minimum edges of the bounding box\nconst positionSubstitutes: {\n  [position in EuiPopoverPosition]: 'left' | 'top';\n} = {\n  top: 'left',\n  right: 'top',\n  bottom: 'left',\n  left: 'top',\n};\n\ninterface FindPopoverPositionArgs {\n  anchor: HTMLElement;\n  popover: HTMLElement;\n  align?: EuiPopoverPosition;\n  position: EuiPopoverPosition;\n  forcePosition?: boolean;\n  buffer?: number | [number, number, number, number];\n  offset?: number;\n  allowCrossAxis?: boolean;\n  container?: HTMLElement;\n  arrowConfig?: { arrowWidth: number; arrowBuffer: number };\n  returnBoundingBox?: boolean;\n}\n\ninterface FindPopoverPositionResult {\n  top: number;\n  left: number;\n  position: 'top' | 'right' | 'bottom' | 'left';\n  fit: number;\n  arrow?: { left: number; top: number };\n  anchorBoundingBox?: EuiClientRect;\n}\n\nconst getBufferValues = (\n  buffer: number | [number, number, number, number]\n): [number, number, number, number] => {\n  if (Array.isArray(buffer)) {\n    const [topBuffer, rightBuffer, bottomBuffer, leftBuffer] = buffer;\n    return [topBuffer, rightBuffer, bottomBuffer, leftBuffer];\n  }\n  return [buffer, buffer, buffer, buffer];\n};\n\n/**\n * Calculates the absolute positioning (relative to document.body) to place a popover element\n *\n * @param anchor {HTMLElement} Element to anchor the popover to\n * @param popover {HTMLElement} Element containing the popover content\n * @param position {string} Position the user wants. One of [\"top\", \"right\", \"bottom\", \"left\"]\n * @param [forcePosition] {boolean} If true, use only the provided `position` value and don't try any other position\n * @param [align] {string} Cross-axis alignment. One of [\"top\", \"right\", \"bottom\", \"left\"]\n * @param [buffer=16] {number} Minimum distance between the popover and the bounding container\n * @param [offset=0] {number} Distance between the popover and the anchor\n * @param [allowCrossAxis=true] {boolean} Whether to allow the popover to be positioned on the cross-axis\n * @param [container] {HTMLElement} Element the popover must be constrained to fit within\n * @param [arrowConfig] {{arrowWidth: number, arrowBuffer: number}} If\n *  present, describes the size & constraints for an arrow element, and the\n *  function return value will include an `arrow` param with position details\n *\n * @returns {FindPopoverPositionResult} absolute page coordinates for the\n * popover, and the placement's relation to the anchor or undefined\n * there's no room.\n */\nexport function findPopoverPosition({\n  anchor,\n  popover,\n  align,\n  position,\n  forcePosition,\n  buffer = 16,\n  offset = 0,\n  allowCrossAxis = true,\n  container,\n  arrowConfig,\n  returnBoundingBox,\n}: FindPopoverPositionArgs): FindPopoverPositionResult {\n  // find the screen-relative bounding boxes of the anchor, popover, and container\n  const anchorBoundingBox = getElementBoundingBox(anchor);\n  const popoverBoundingBox = getElementBoundingBox(popover);\n\n  // calculate the window's bounds\n  // window.(innerWidth|innerHeight) do not account for scrollbars\n  // so prefer the clientWidth/clientHeight of the DOM if available\n  const documentWidth =\n    document.documentElement.clientWidth || window.innerWidth;\n  const documentHeight =\n    document.documentElement.clientHeight || window.innerHeight;\n  const windowBoundingBox: EuiClientRect = {\n    top: 0,\n    right: documentWidth,\n    bottom: documentHeight,\n    left: 0,\n    height: documentHeight,\n    width: documentWidth,\n  };\n\n  // if no container element is given fall back to using the window viewport\n  const containerBoundingBox = container\n    ? getElementBoundingBox(container)\n    : windowBoundingBox;\n\n  /**\n   * `position` was specified by the function caller and is a strong hint\n   * as to the preferred location of the popover relative to the anchor.\n   * However, we strongly prefer showing all of the popover content within\n   * the window+container boundary and will iterate over the four\n   * possible sides until a perfect fit is located. If none of the locations\n   * fully contain popover, the location with the best fit is selected.\n   *\n   * This approach first checks the preferred `position`, then its opposite\n   * along the same axis, next a location on the cross-axis, and finally it\n   * tests the remaining position.\n   *\n   * e.g.\n   * if position = \"top\" the order is top, bottom, left right\n   * if position = \"right\" the order is right, left, top, bottom\n   */\n\n  // Try the user-desired position first.\n  const iterationPositions = [position];\n  // keep user-defined alignment in the original positions.\n  const iterationAlignments: Array<undefined | EuiPopoverPosition> = [align];\n\n  if (forcePosition !== true) {\n    iterationPositions.push(positionComplements[position]); // Try the complementary position.\n    iterationAlignments.push(align); // keep user-defined alignment in the complementary position.\n\n    if (allowCrossAxis) {\n      iterationPositions.push(\n        positionSubstitutes[position], // Switch to the cross axis.\n        positionComplements[positionSubstitutes[position]] // Try the complementary position on the cross axis.\n      );\n      iterationAlignments.push(undefined, undefined); // discard desired alignment on cross-axis\n    }\n  } else {\n    // position is forced, if it conflicts with the alignment then reset align to `null`\n    // e.g. original placement request for `downLeft` is moved to the `left` side, future calls\n    // will position and align `left`, and `leftLeft` is not a valid placement\n    if (\n      position === align ||\n      (align !== undefined && position === positionComplements[align])\n    ) {\n      iterationAlignments[0] = undefined;\n    }\n  }\n\n  let bestFit: number | undefined = undefined;\n  let bestPosition: FindPopoverPositionResult | null = null;\n\n  for (let idx = 0; idx < iterationPositions.length; idx++) {\n    const iterationPosition = iterationPositions[idx];\n\n    // See if we can find a position with a better fit than we've found so far.\n    const screenCoordinates = getPopoverScreenCoordinates({\n      position: iterationPosition,\n      align: iterationAlignments[idx],\n      anchorBoundingBox,\n      popoverBoundingBox,\n      windowBoundingBox,\n      containerBoundingBox,\n      offset,\n      buffer,\n      arrowConfig,\n    });\n\n    if (bestFit === undefined || screenCoordinates.fit > bestFit) {\n      bestFit = screenCoordinates.fit;\n      bestPosition = {\n        fit: screenCoordinates.fit,\n        position: iterationPosition,\n        top: screenCoordinates.top + window.pageYOffset,\n        left: screenCoordinates.left + window.pageXOffset,\n        arrow: screenCoordinates.arrow,\n      };\n\n      // If we've already found the ideal fit, use that position.\n      if (bestFit === 1) {\n        break;\n      }\n    }\n\n    // If we haven't improved the fit, then continue on and try a new position.\n  }\n\n  if (bestPosition == null) {\n    throw new Error('Failed to calculate bestPosition');\n  }\n\n  if (returnBoundingBox) {\n    bestPosition.anchorBoundingBox = anchorBoundingBox;\n  }\n\n  return bestPosition;\n}\n\ninterface GetPopoverScreenCoordinatesArgs {\n  position: EuiPopoverPosition;\n  align?: EuiPopoverPosition;\n  anchorBoundingBox: EuiClientRect;\n  popoverBoundingBox: EuiClientRect;\n  windowBoundingBox: EuiClientRect;\n  containerBoundingBox: EuiClientRect;\n  arrowConfig?: { arrowWidth: number; arrowBuffer: number };\n  offset?: number;\n  buffer?: number | [number, number, number, number];\n}\n\ninterface GetPopoverScreenCoordinatesResult {\n  top: number;\n  left: number;\n  fit: number;\n  arrow: { top: number; left: number } | undefined;\n}\n\n/**\n * Given a target position and the popover's surrounding context, returns either an\n * object with {top, left} screen coordinates or `null` if it's not possible to show\n * content in the target position\n * @param position {string} the target position, one of [\"top\", \"right\", \"bottom\", \"left\"]\n * @param align {string} target alignment on the cross-axis, one of [\"top\", \"right\", \"bottom\", \"left\"]\n * @param anchorBoundingBox {Object} bounding box of the anchor element\n * @param popoverBoundingBox {Object} bounding box of the popover element\n * @param windowBoundingBox {Object} bounding box of the window\n * @param containerBoundingBox {Object} bounding box of the container\n * @param [arrowConfig] {{arrowWidth: number, arrowBuffer: number}} If present, describes the size &\n *  constraints for an arrow element, and the function return value will include an `arrow` param\n *  with position details\n * @param [offset=0] {number} Distance between the popover and the anchor\n * @param [buffer=0] {number} Minimum distance between the popover's\n *  placement and the container edge\n *\n * @returns {GetPopoverScreenCoordinatesResult}\n *  object with top/left coordinates, the popover's relative position to the anchor, and how well the\n *  popover fits in the location (0.0 -> 1.0) coordinates and the popover's relative position, if\n *  there is no room in this placement then null\n */\nexport function getPopoverScreenCoordinates({\n  position,\n  align,\n  anchorBoundingBox,\n  popoverBoundingBox,\n  windowBoundingBox,\n  containerBoundingBox,\n  arrowConfig,\n  offset = 0,\n  buffer = 0,\n}: GetPopoverScreenCoordinatesArgs): GetPopoverScreenCoordinatesResult {\n  /**\n   * The goal is to find the best way to align the popover content\n   * on the given side of the anchor element. The popover prefers\n   * centering on the anchor but can shift along the cross-axis as needed.\n   *\n   * We return the top/left coordinates that best fit the popover inside\n   * the given boundaries, and also return the `fit` value which indicates\n   * what percentage of the popover is within the bounds.\n   *\n   * e.g. finding a location when position=top\n   * the preferred location is directly over the anchor\n   *\n   *        +----------------------+\n   *        |       popover        |\n   *        +----------------------+\n   *                   v\n   *            +--------------+\n   *            |    anchor    |\n   *            +--------------+\n   *\n   * but if anchor doesn't have much (or any) room on its ride side\n   * the popover will shift to the left\n   *\n   *    +----------------------+\n   *    |       popover        |\n   *    +----------------------+\n   *                   v\n   *            +--------------+\n   *            |    anchor    |\n   *            +--------------+\n   *\n   */\n\n  const crossAxisFirstSide = positionSubstitutes[position]; // \"top\" -> \"left\"\n  const crossAxisSecondSide = positionComplements[crossAxisFirstSide]; // \"left\" -> \"right\"\n  const crossAxisDimension = relatedDimension[crossAxisFirstSide]; // \"left\" -> \"width\"\n\n  const [topBuffer, rightBuffer, bottomBuffer, leftBuffer] = getBufferValues(\n    buffer\n  );\n\n  const { crossAxisPosition, crossAxisArrowPosition } = getCrossAxisPosition({\n    crossAxisFirstSide,\n    crossAxisSecondSide,\n    crossAxisDimension,\n    position,\n    align,\n    buffer,\n    offset,\n    windowBoundingBox,\n    containerBoundingBox,\n    popoverBoundingBox,\n    anchorBoundingBox,\n    arrowConfig,\n  });\n\n  const primaryAxisDimension = relatedDimension[position]; // \"top\" -> \"height\"\n  const primaryAxisPositionName =\n    dimensionPositionAttribute[primaryAxisDimension]; // \"height\" -> \"top\"\n\n  const {\n    primaryAxisPosition,\n    primaryAxisArrowPosition,\n  } = getPrimaryAxisPosition({\n    position,\n    offset,\n    popoverBoundingBox,\n    anchorBoundingBox,\n    arrowConfig,\n  });\n\n  const popoverPlacement = {\n    [crossAxisFirstSide]: crossAxisPosition,\n    [primaryAxisPositionName]: primaryAxisPosition,\n  };\n\n  // calculate the fit of the popover in this location\n  // fit is in range 0.0 -> 1.0 and is the percentage of the popover which is visible in this location\n  const combinedBoundingBox = intersectBoundingBoxes(\n    windowBoundingBox,\n    containerBoundingBox\n  );\n\n  // shrink the visible bounding box by `buffer`\n  // to compute a fit value\n  combinedBoundingBox.top += topBuffer;\n  combinedBoundingBox.right -= rightBuffer;\n  combinedBoundingBox.bottom -= bottomBuffer;\n  combinedBoundingBox.left += leftBuffer;\n\n  const fit = getVisibleFit(\n    {\n      top: popoverPlacement.top,\n      right: popoverPlacement.left + popoverBoundingBox.width,\n      bottom: popoverPlacement.top + popoverBoundingBox.height,\n      left: popoverPlacement.left,\n      width: popoverBoundingBox.width,\n      height: popoverBoundingBox.height,\n    },\n    combinedBoundingBox\n  );\n\n  const arrow = arrowConfig\n    ? {\n        [crossAxisFirstSide]:\n          crossAxisArrowPosition! - popoverPlacement[crossAxisFirstSide],\n        [primaryAxisPositionName]: primaryAxisArrowPosition,\n      }\n    : undefined;\n\n  return {\n    fit,\n    top: popoverPlacement.top,\n    left: popoverPlacement.left,\n    arrow: arrow ? { left: arrow.left!, top: arrow.top! } : undefined,\n  };\n}\n\ninterface GetCrossAxisPositionArgs {\n  crossAxisFirstSide: EuiPopoverPosition;\n  crossAxisSecondSide: EuiPopoverPosition;\n  crossAxisDimension: Dimension;\n  position: EuiPopoverPosition;\n  align?: EuiPopoverPosition;\n  buffer: number | [number, number, number, number];\n  offset: number;\n  windowBoundingBox: EuiClientRect;\n  containerBoundingBox: EuiClientRect;\n  popoverBoundingBox: EuiClientRect;\n  anchorBoundingBox: EuiClientRect;\n  arrowConfig?: { arrowWidth: number; arrowBuffer: number };\n}\n\ninterface CrossAxisPosition {\n  crossAxisPosition: number;\n  crossAxisArrowPosition: number | undefined;\n}\n\nfunction getCrossAxisPosition({\n  crossAxisFirstSide,\n  crossAxisSecondSide,\n  crossAxisDimension,\n  position,\n  align,\n  buffer,\n  offset,\n  windowBoundingBox,\n  containerBoundingBox,\n  popoverBoundingBox,\n  anchorBoundingBox,\n  arrowConfig,\n}: GetCrossAxisPositionArgs): CrossAxisPosition {\n  // how much of the popover overflows past either side of the anchor if its centered\n  const popoverSizeOnCrossAxis = popoverBoundingBox[crossAxisDimension];\n  const anchorSizeOnCrossAxis = anchorBoundingBox[crossAxisDimension];\n  const anchorHalfSize = anchorSizeOnCrossAxis / 2;\n\n  // the popover's original position on the cross-axis is determined by:\n  const crossAxisPositionOriginal =\n    anchorBoundingBox[crossAxisFirstSide] + // where the anchor is located\n    anchorHalfSize - // plus half anchor dimension\n    popoverSizeOnCrossAxis / 2; // less half the popover dimension\n\n  // To fit the content within both the window and container,\n  // compute the smaller of the two spaces along each edge\n  const combinedBoundingBox = intersectBoundingBoxes(\n    windowBoundingBox,\n    containerBoundingBox\n  );\n  const availableSpace = getAvailableSpace(\n    anchorBoundingBox,\n    combinedBoundingBox,\n    buffer,\n    offset,\n    position\n  );\n  const minimumSpace = arrowConfig ? arrowConfig.arrowBuffer : 0;\n\n  const contentOverflowSize =\n    (popoverSizeOnCrossAxis - anchorSizeOnCrossAxis) / 2;\n\n  let alignAmount = 0;\n  let alignDirection = 1;\n  let amountOfShiftNeeded = 0;\n  let shiftDirection = 1;\n\n  if (align != null) {\n    // no alignment, find how much the container boundary requires the content to shift\n    alignDirection = align === 'top' || align === 'left' ? 1 : -1;\n    alignAmount = contentOverflowSize;\n\n    const alignedOverflowAmount = contentOverflowSize + alignAmount;\n    const needsShift =\n      alignedOverflowAmount > availableSpace[positionComplements[align]];\n    amountOfShiftNeeded = needsShift\n      ? alignedOverflowAmount - availableSpace[positionComplements[align]]\n      : 0;\n    shiftDirection = -1 * alignDirection;\n  } else {\n    // shifting the popover to one side may yield a better fit\n    const spaceAvailableOnFirstSide = availableSpace[crossAxisFirstSide];\n    const spaceAvailableOnSecondSide = availableSpace[crossAxisSecondSide];\n\n    const isShiftTowardFirstSide =\n      spaceAvailableOnFirstSide > spaceAvailableOnSecondSide;\n    shiftDirection = isShiftTowardFirstSide ? -1 : 1;\n\n    // determine which direction has more room and the popover should shift to\n    const leastAvailableSpace = Math.min(\n      spaceAvailableOnFirstSide,\n      spaceAvailableOnSecondSide\n    );\n\n    const needsShift = contentOverflowSize > leastAvailableSpace;\n    amountOfShiftNeeded = needsShift\n      ? contentOverflowSize - leastAvailableSpace\n      : 0;\n  }\n\n  // shift over the popover if necessary\n  const shiftAmount = amountOfShiftNeeded * shiftDirection;\n  let crossAxisPosition =\n    crossAxisPositionOriginal + shiftAmount + alignAmount * alignDirection;\n\n  // if an `arrowConfig` is specified, find where to position the arrow\n  let crossAxisArrowPosition;\n  if (arrowConfig) {\n    const { arrowWidth } = arrowConfig;\n    crossAxisArrowPosition =\n      anchorBoundingBox[crossAxisFirstSide] + anchorHalfSize - arrowWidth / 2;\n\n    // make sure there's enough buffer around the arrow\n    // by calculating how how much the arrow would need to move\n    // but instead of moving the arrow, shift the popover content\n    if (crossAxisArrowPosition < crossAxisPosition + minimumSpace) {\n      // arrow is too close to the minimum side\n      const difference =\n        crossAxisPosition + minimumSpace - crossAxisArrowPosition;\n      crossAxisPosition -= difference;\n    } else if (\n      crossAxisArrowPosition + minimumSpace + arrowWidth >\n      crossAxisPosition + popoverSizeOnCrossAxis\n    ) {\n      // arrow is too close to the maximum side\n      const edge = crossAxisPosition + popoverSizeOnCrossAxis;\n      const difference =\n        crossAxisArrowPosition - (edge - minimumSpace - arrowWidth);\n      crossAxisPosition += difference;\n    }\n  }\n\n  return {\n    crossAxisPosition,\n    crossAxisArrowPosition,\n  };\n}\n\ninterface GetPrimaryAxisPositionArgs {\n  position: EuiPopoverPosition;\n  offset: number;\n  popoverBoundingBox: BoundingBox;\n  anchorBoundingBox: BoundingBox;\n  arrowConfig?: { arrowWidth: number; arrowBuffer: number };\n}\n\nfunction getPrimaryAxisPosition({\n  position,\n  offset,\n  popoverBoundingBox,\n  anchorBoundingBox,\n  arrowConfig,\n}: GetPrimaryAxisPositionArgs) {\n  // if positioning to the top or left, the target position decreases\n  // from the anchor's top or left, otherwise the position adds to the anchor's\n  const isOffsetDecreasing = position === 'top' || position === 'left';\n\n  const primaryAxisDimension = relatedDimension[position]; // \"top\" -> \"height\"\n  const popoverSizeOnPrimaryAxis = popoverBoundingBox[primaryAxisDimension];\n\n  // start at the top or left edge of the anchor element\n  const primaryAxisPositionName =\n    dimensionPositionAttribute[primaryAxisDimension]; // \"height\" -> \"top\"\n  const anchorEdgeOrigin = anchorBoundingBox[primaryAxisPositionName];\n\n  // find the popover position on the primary axis\n  const anchorSizeOnPrimaryAxis = anchorBoundingBox[primaryAxisDimension];\n  const primaryAxisOffset = isOffsetDecreasing\n    ? popoverSizeOnPrimaryAxis\n    : anchorSizeOnPrimaryAxis;\n  const contentOffset =\n    (offset + primaryAxisOffset!) * (isOffsetDecreasing ? -1 : 1);\n  const primaryAxisPosition = anchorEdgeOrigin + contentOffset;\n\n  let primaryAxisArrowPosition;\n\n  if (arrowConfig) {\n    primaryAxisArrowPosition = isOffsetDecreasing\n      ? popoverSizeOnPrimaryAxis\n      : 0;\n  }\n\n  return {\n    primaryAxisPosition,\n    primaryAxisArrowPosition,\n  };\n}\n\n/**\n * Finds the client pixel coordinate of each edge for the element's bounding box,\n * and the bounding box's width & height\n *\n * @param {HTMLElement} element\n * @returns {{top: number, right: number, bottom: number, left: number, height: number, width: number}}\n */\nexport function getElementBoundingBox(element: HTMLElement): EuiClientRect {\n  const rect = element.getBoundingClientRect();\n  return {\n    top: rect.top,\n    right: rect.right,\n    bottom: rect.bottom,\n    left: rect.left,\n    height: rect.height,\n    width: rect.width,\n  };\n}\n\n/**\n * Calculates the available content space between anchor and container\n *\n * @param {Object} anchorBoundingBox Client bounding box of the anchor element\n * @param {Object} containerBoundingBox Client bounding box of the container element\n * @param {number} buffer Minimum distance between the popover and the bounding container\n * @param {number} offset Distance between the popover and the anchor\n * @param {string} offsetSide Side the offset needs to be applied to, one\n *  of [\"top\", \"right\", \"bottom\", \"left\"]\n * @returns {{top: number, right: number, bottom: number, left: number}}\n */\nexport function getAvailableSpace(\n  anchorBoundingBox: BoundingBox,\n  containerBoundingBox: BoundingBox,\n  buffer: number | [number, number, number, number],\n  offset: number,\n  offsetSide: EuiPopoverPosition\n): BoundingBox {\n  const [topBuffer, rightBuffer, bottomBuffer, leftBuffer] = getBufferValues(\n    buffer\n  );\n  return {\n    top:\n      anchorBoundingBox.top -\n      containerBoundingBox.top -\n      topBuffer -\n      (offsetSide === 'top' ? offset : 0),\n    right:\n      containerBoundingBox.right -\n      anchorBoundingBox.right -\n      rightBuffer -\n      (offsetSide === 'right' ? offset : 0),\n    bottom:\n      containerBoundingBox.bottom -\n      anchorBoundingBox.bottom -\n      bottomBuffer -\n      (offsetSide === 'bottom' ? offset : 0),\n    left:\n      anchorBoundingBox.left -\n      containerBoundingBox.left -\n      leftBuffer -\n      (offsetSide === 'left' ? offset : 0),\n  };\n}\n\n/**\n * Computes the fit (overlap) of the content within the container, fit is in range 0.0 => 1.0\n * @param contentBoundingBox bounding box of content to calculate fit for\n * @param containerBoundingBox bounding box of container\n * @returns {number}\n */\nexport function getVisibleFit(\n  contentBoundingBox: BoundingBox,\n  containerBoundingBox: BoundingBox\n): number {\n  const intersection = intersectBoundingBoxes(\n    contentBoundingBox,\n    containerBoundingBox\n  );\n\n  if (\n    intersection.left > intersection.right ||\n    intersection.top > intersection.top\n  ) {\n    // there is no intersection, the boxes are completely separated on at least one axis\n    return 0;\n  }\n\n  const intersectionArea =\n    (intersection.right - intersection.left) *\n    (intersection.bottom - intersection.top);\n  const contentArea =\n    (contentBoundingBox.right - contentBoundingBox.left) *\n    (contentBoundingBox.bottom - contentBoundingBox.top);\n\n  return intersectionArea / contentArea;\n}\n\n/**\n * Calculates the intersection space between two bounding boxes\n *\n * @param firstBox\n * @param secondBox\n * @returns {EuiClientRect}\n */\nexport function intersectBoundingBoxes(\n  firstBox: BoundingBox,\n  secondBox: BoundingBox\n): EuiClientRect {\n  const top = Math.max(firstBox.top, secondBox.top);\n  const right = Math.min(firstBox.right, secondBox.right);\n  const bottom = Math.min(firstBox.bottom, secondBox.bottom);\n  const left = Math.max(firstBox.left, secondBox.left);\n  const height = Math.max(bottom - top, 0);\n  const width = Math.max(right - left, 0);\n\n  return {\n    top,\n    right,\n    bottom,\n    left,\n    height,\n    width,\n  };\n}\n\n/**\n * Returns the top-most defined z-index in the element's ancestor hierarchy\n * relative to the `target` element; if no z-index is defined, returns 0\n * @param element {HTMLElement}\n * @param cousin {HTMLElement}\n * @returns {number}\n */\nexport function getElementZIndex(\n  element: HTMLElement,\n  cousin: HTMLElement\n): number {\n  /**\n   * finding the z-index of `element` is not the full story\n   * its the CSS stacking context that is important\n   * take this DOM for example:\n   * body\n   *   section[z-index: 1000]\n   *     p[z-index: 500]\n   *       button\n   *   div\n   *\n   * what z-index does the `div` need to display next to `button`?\n   * the `div` and `section` are where the stacking context splits\n   * so `div` needs to copy `section`'s z-index in order to\n   * appear next to / over `button`\n   *\n   * calculate this by starting at `button` and finding its offsetParents\n   * then walk the parents from top -> down until the stacking context\n   * split is found, or if there is no split then a specific z-index is unimportant\n   */\n\n  // build the array of the element + its offset parents\n  const nodesToInspect: HTMLElement[] = [];\n  while (true) {\n    nodesToInspect.push(element);\n\n    // AFAICT this is a valid cast - the libdefs appear wrong\n    element = element.offsetParent as HTMLElement;\n\n    // stop if there is no parent\n    if (element == null) {\n      break;\n    }\n\n    // stop if the parent contains the related element\n    // as this is the z-index ancestor\n    if (element.contains(cousin)) {\n      break;\n    }\n  }\n\n  // reverse the nodes to walk from top -> element\n  nodesToInspect.reverse();\n\n  for (const node of nodesToInspect) {\n    // get this node's z-index css value\n    const zIndex = window.document\n      .defaultView!.getComputedStyle(node)\n      .getPropertyValue('z-index');\n\n    // if the z-index is not a number (e.g. \"auto\") return null, else the value\n    const parsedZIndex = parseInt(zIndex, 10);\n    if (!isNaN(parsedZIndex)) {\n      return parsedZIndex;\n    }\n  }\n\n  return 0;\n}\n"]}]}