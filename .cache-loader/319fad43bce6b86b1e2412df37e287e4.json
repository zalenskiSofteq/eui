{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\selectable\\selectable.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\selectable\\selectable.tsx","mtime":1649070093758},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/selectable/selectable.tsx"],"names":["React","Component","createRef","classNames","EuiSelectableSearch","EuiSelectableMessage","EuiSelectableList","EuiLoadingSpinner","EuiSpacer","getMatchingOptions","keys","htmlIdGenerator","EuiI18n","EuiSelectable","props","state","activeOptionIndex","visibleOptions","length","firstSelected","findIndex","option","checked","disabled","isGroupLabel","setState","isFocused","event","optionsList","optionsListRef","current","key","ARROW_UP","preventDefault","stopPropagation","incrementActiveOptionIndex","ARROW_DOWN","ENTER","onAddOrRemoveOption","undefined","onFocus","amount","nextActiveOptionIndex","direction","searchValue","searchProps","onSearch","e","containerRef","contains","relatedTarget","options","isPreFiltered","onChange","index","align","listRef","scrollToItem","singleSelection","initialSearchValue","selectedOptions","filter","includes","indexOf","id","children","className","searchable","isLoading","listProps","renderOption","height","allowExclusions","ariaLabel","ariaDescribedby","loadingMessage","noMatchesMessage","emptyMessage","rest","unknownAccessibleName","searchAriaLabel","searchAriaDescribedby","propsOnChange","cleanedSearchProps","listAriaLabel","listAriaDescribedby","cleanedListProps","classes","messageContentId","rootId","listId","makeOptionId","messageContent","cloneElement","getAccessibleName","messageContentIdString","searchAccessibleName","searchHasAccessibleName","Boolean","Object","search","placeholderName","onSearchChange","listAccessibleName","listHasAccessibleName","list","bordered","cb","onOptionClick","onKeyDown","onContainerBlur","nextProps","prevState","matchingOptions","stateUpdate"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Component, createRef } from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nimport { EuiSelectableSearch } from './selectable_search';\nimport { EuiSelectableMessage } from './selectable_message';\nimport { EuiSelectableList } from './selectable_list';\nimport { EuiLoadingSpinner } from '../loading';\nimport { EuiSpacer } from '../spacer';\nimport { getMatchingOptions } from './matching_options';\nimport { keys, htmlIdGenerator } from '../../services';\nimport { EuiI18n } from '../i18n';\nexport class EuiSelectable extends Component {\n  static defaultProps = {\n    options: [],\n    singleSelection: false,\n    searchable: false,\n    isPreFiltered: false\n  };\n  containerRef = createRef();\n  optionsListRef = createRef();\n  rootId = htmlIdGenerator();\n\n  constructor(props) {\n    super(props);\n    const {\n      options,\n      singleSelection,\n      isPreFiltered\n    } = props;\n    const initialSearchValue = '';\n    const visibleOptions = getMatchingOptions(options, initialSearchValue, isPreFiltered); // ensure that the currently selected single option is active if it is in the visibleOptions\n\n    const selectedOptions = options.filter(option => option.checked);\n    let activeOptionIndex;\n\n    if (singleSelection && selectedOptions.length === 1) {\n      if (visibleOptions.includes(selectedOptions[0])) {\n        activeOptionIndex = visibleOptions.indexOf(selectedOptions[0]);\n      }\n    }\n\n    this.state = {\n      activeOptionIndex,\n      searchValue: initialSearchValue,\n      visibleOptions,\n      isFocused: false\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      options,\n      isPreFiltered\n    } = nextProps;\n    const {\n      activeOptionIndex,\n      searchValue\n    } = prevState;\n    const matchingOptions = getMatchingOptions(options, searchValue, isPreFiltered);\n    const stateUpdate = {\n      visibleOptions: matchingOptions,\n      activeOptionIndex\n    };\n\n    if (activeOptionIndex != null && activeOptionIndex >= matchingOptions.length) {\n      stateUpdate.activeOptionIndex = -1;\n    }\n\n    return stateUpdate;\n  }\n\n  hasActiveOption = () => {\n    return this.state.activeOptionIndex != null;\n  };\n  onFocus = () => {\n    if (!this.state.visibleOptions.length || this.state.activeOptionIndex) {\n      return;\n    }\n\n    const firstSelected = this.state.visibleOptions.findIndex(option => option.checked && !option.disabled && !option.isGroupLabel);\n\n    if (firstSelected > -1) {\n      this.setState({\n        activeOptionIndex: firstSelected,\n        isFocused: true\n      });\n    } else {\n      this.setState({\n        activeOptionIndex: this.state.visibleOptions.findIndex(option => !option.disabled && !option.isGroupLabel),\n        isFocused: true\n      });\n    }\n  };\n  onKeyDown = event => {\n    const optionsList = this.optionsListRef.current;\n\n    switch (event.key) {\n      case keys.ARROW_UP:\n        event.preventDefault();\n        event.stopPropagation();\n        this.incrementActiveOptionIndex(-1);\n        break;\n\n      case keys.ARROW_DOWN:\n        event.preventDefault();\n        event.stopPropagation();\n        this.incrementActiveOptionIndex(1);\n        break;\n\n      case keys.ENTER:\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (this.state.activeOptionIndex != null && optionsList) {\n          optionsList.onAddOrRemoveOption(this.state.visibleOptions[this.state.activeOptionIndex]);\n        }\n\n        break;\n\n      default:\n        this.setState({\n          activeOptionIndex: undefined\n        }, this.onFocus);\n        break;\n    }\n  };\n  incrementActiveOptionIndex = amount => {\n    // If there are no options available, do nothing.\n    if (!this.state.visibleOptions.length) {\n      return;\n    }\n\n    this.setState(({\n      activeOptionIndex,\n      visibleOptions\n    }) => {\n      let nextActiveOptionIndex;\n\n      if (activeOptionIndex == null) {\n        // If this is the beginning of the user's keyboard navigation of the menu, then we'll focus\n        // either the first or last item.\n        nextActiveOptionIndex = amount < 0 ? visibleOptions.length - 1 : 0;\n      } else {\n        nextActiveOptionIndex = activeOptionIndex + amount;\n\n        if (nextActiveOptionIndex < 0) {\n          nextActiveOptionIndex = visibleOptions.length - 1;\n        } else if (nextActiveOptionIndex === visibleOptions.length) {\n          nextActiveOptionIndex = 0;\n        }\n      } // Group titles and disabled options are included in option list but are not selectable\n\n\n      const direction = amount > 0 ? 1 : -1;\n\n      while (visibleOptions[nextActiveOptionIndex].isGroupLabel || visibleOptions[nextActiveOptionIndex].disabled) {\n        nextActiveOptionIndex = nextActiveOptionIndex + direction;\n\n        if (nextActiveOptionIndex < 0) {\n          nextActiveOptionIndex = visibleOptions.length - 1;\n        } else if (nextActiveOptionIndex === visibleOptions.length) {\n          nextActiveOptionIndex = 0;\n        }\n      }\n\n      return {\n        activeOptionIndex: nextActiveOptionIndex\n      };\n    });\n  };\n  onSearchChange = (visibleOptions, searchValue) => {\n    this.setState({\n      visibleOptions,\n      searchValue,\n      activeOptionIndex: undefined\n    }, () => {\n      if (this.state.isFocused) {\n        this.onFocus();\n      }\n    });\n\n    if (this.props.searchProps && this.props.searchProps.onSearch) {\n      this.props.searchProps.onSearch(searchValue);\n    }\n  };\n  onContainerBlur = e => {\n    // Ignore blur events when moving from search to option to avoid activeOptionIndex conflicts\n    if (this.containerRef.current.contains(e.relatedTarget)) return;\n    this.setState({\n      activeOptionIndex: undefined,\n      isFocused: false\n    });\n  };\n  onOptionClick = options => {\n    const {\n      isPreFiltered,\n      onChange,\n      searchProps\n    } = this.props;\n    const {\n      searchValue\n    } = this.state;\n    const visibleOptions = getMatchingOptions(options, searchValue, isPreFiltered);\n    this.setState({\n      visibleOptions\n    });\n\n    if (onChange) {\n      onChange(options);\n    }\n\n    if (searchProps && searchProps.onChange) {\n      searchProps.onChange(visibleOptions, searchValue);\n    }\n  };\n  scrollToItem = (index, align) => {\n    this.optionsListRef.current?.listRef?.scrollToItem(index, align);\n  };\n\n  render() {\n    const {\n      id,\n      children,\n      className,\n      options,\n      onChange,\n      searchable,\n      searchProps,\n      singleSelection,\n      isLoading,\n      listProps,\n      renderOption,\n      height,\n      allowExclusions,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedby,\n      loadingMessage,\n      noMatchesMessage,\n      emptyMessage,\n      isPreFiltered,\n      ...rest\n    } = this.props;\n    const {\n      searchValue,\n      visibleOptions,\n      activeOptionIndex\n    } = this.state; // Some messy destructuring here to remove aria-label/describedby from searchProps and listProps\n    // Made messier by some TS requirements\n    // The aria attributes are then used in getAccessibleName() to place them where they need to go\n\n    const unknownAccessibleName = {\n      'aria-label': undefined,\n      'aria-describedby': undefined\n    };\n    const {\n      'aria-label': searchAriaLabel,\n      'aria-describedby': searchAriaDescribedby,\n      onChange: propsOnChange,\n      onSearch,\n      ...cleanedSearchProps\n    } = searchProps || unknownAccessibleName;\n    const {\n      'aria-label': listAriaLabel,\n      'aria-describedby': listAriaDescribedby,\n      ...cleanedListProps\n    } = listProps || unknownAccessibleName;\n    const classes = classNames('euiSelectable', {\n      'euiSelectable-fullHeight': height === 'full'\n    }, className);\n    /** Create Id's */\n\n    let messageContentId = this.rootId('messageContent');\n    const listId = this.rootId('listbox');\n\n    const makeOptionId = index => {\n      if (typeof index === 'undefined') {\n        return '';\n      }\n\n      return `${listId}_option-${index}`;\n    };\n    /** Create message content that replaces the list if no options are available (yet) */\n\n\n    let messageContent;\n\n    if (isLoading) {\n      if (loadingMessage === undefined || typeof loadingMessage === 'string') {\n        messageContent = <>\n            <EuiLoadingSpinner size=\"m\" />\n            <EuiSpacer size=\"xs\" />\n            <p>\n              {loadingMessage || <EuiI18n token=\"euiSelectable.loadingOptions\" default=\"Loading options\" />}\n            </p>\n          </>;\n      } else {\n        messageContent = React.cloneElement(loadingMessage, {\n          id: messageContentId,\n          ...loadingMessage.props\n        });\n      }\n    } else if (searchValue && visibleOptions.length === 0) {\n      if (noMatchesMessage === undefined || typeof noMatchesMessage === 'string') {\n        messageContent = <p>\n            {noMatchesMessage || <EuiI18n token=\"euiSelectable.noMatchingOptions\" default=\"{searchValue} doesn't match any options\" values={{\n            searchValue: <strong>{searchValue}</strong>\n          }} />}\n          </p>;\n      } else {\n        messageContent = React.cloneElement(noMatchesMessage, {\n          id: messageContentId,\n          ...noMatchesMessage.props\n        });\n      }\n    } else if (!options.length) {\n      if (emptyMessage === undefined || typeof emptyMessage === 'string') {\n        messageContent = <p>\n            {emptyMessage || <EuiI18n token=\"euiSelectable.noAvailableOptions\" default=\"No options available\" />}\n          </p>;\n      } else {\n        messageContent = React.cloneElement(emptyMessage, {\n          id: messageContentId,\n          ...emptyMessage.props\n        });\n      }\n    } else {\n      messageContentId = '';\n    }\n    /**\n     * There are lots of ways to add an accessible name\n     * Usually we want the same name for the input and the listbox (which is added by aria-label/describedby)\n     * But you can always override it using searchProps or listProps\n     * This finds the correct name to use\n     *\n     * TODO: This doesn't handle being labelled (<label for=\"idOfInput\">)\n     */\n\n\n    const getAccessibleName = (props, messageContentId) => {\n      if (props && props['aria-label']) {\n        return {\n          'aria-label': props['aria-label']\n        };\n      }\n\n      const messageContentIdString = messageContentId ? ` ${messageContentId}` : '';\n\n      if (props && props['aria-describedby']) {\n        return {\n          'aria-describedby': `${props['aria-describedby']}${messageContentIdString}`\n        };\n      }\n\n      if (ariaLabel) {\n        return {\n          'aria-label': ariaLabel\n        };\n      }\n\n      if (ariaDescribedby) {\n        return {\n          'aria-describedby': `${ariaDescribedby}${messageContentIdString}`\n        };\n      }\n\n      return {};\n    };\n\n    const searchAccessibleName = getAccessibleName(searchProps, messageContentId);\n    const searchHasAccessibleName = Boolean(Object.keys(searchAccessibleName).length);\n    const search = searchable ? <EuiI18n token=\"euiSelectable.placeholderName\" default=\"Filter options\">\n        {placeholderName => <EuiSelectableSearch key=\"listSearch\" options={options} onChange={this.onSearchChange} listId={this.optionsListRef.current ? listId : undefined} // Only pass the listId if it exists on the page\n      aria-activedescendant={makeOptionId(activeOptionIndex)} // the current faux-focused option\n      placeholder={placeholderName} isPreFiltered={isPreFiltered ?? false} {...searchHasAccessibleName ? searchAccessibleName : {\n        'aria-label': placeholderName\n      }} {...cleanedSearchProps} />}\n      </EuiI18n> : undefined;\n    const listAccessibleName = getAccessibleName(listProps);\n    const listHasAccessibleName = Boolean(Object.keys(listAccessibleName).length);\n    const list = messageContent ? <EuiSelectableMessage id={messageContentId} bordered={listProps && listProps.bordered}>\n        {messageContent}\n      </EuiSelectableMessage> : <EuiI18n token=\"euiSelectable.placeholderName\" default=\"Filter options\">\n        {placeholderName => <EuiSelectableList key=\"list\" options={options} visibleOptions={visibleOptions} searchValue={searchValue} activeOptionIndex={activeOptionIndex} setActiveOptionIndex={(index, cb) => {\n        this.setState({\n          activeOptionIndex: index\n        }, cb);\n      }} onOptionClick={this.onOptionClick} singleSelection={singleSelection} ref={this.optionsListRef} renderOption={renderOption} height={height} allowExclusions={allowExclusions} searchable={searchable} makeOptionId={makeOptionId} listId={listId} {...listHasAccessibleName ? listAccessibleName : searchable && {\n        'aria-label': placeholderName\n      }} {...cleanedListProps} />}\n      </EuiI18n>;\n    return <div ref={this.containerRef} className={classes} onKeyDown={this.onKeyDown} onBlur={this.onContainerBlur} onFocus={this.onFocus} {...rest}>\n        {children && children(list, search)}\n      </div>;\n  }\n\n}\nEuiSelectable.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n\n  /**\n       * Hooks up a search box to filter the list (boolean)\n       */\n  searchable: PropTypes.oneOfType([PropTypes.oneOf([false]).isRequired, PropTypes.oneOf([true]).isRequired]).isRequired,\n\n  /**\n       * Passes props down to the `EuiFieldSearch`\n       */\n  searchProps: PropTypes.any,\n\n  /**\n       * Function that takes the `list` node and then\n       * the `search` node (if `searchable` is applied)\n       */\n  children: PropTypes.func,\n\n  /**\n       * Array of EuiSelectableOption objects. See #EuiSelectableOptionProps\n       */\n  options: PropTypes.arrayOf(PropTypes.shape({\n    /**\n       * Optional `boolean`.\n       * Set to `true` to indicate object is just a grouping label, not a selectable item\n       */\n    isGroupLabel: PropTypes.oneOfType([PropTypes.oneOf([true]).isRequired, PropTypes.oneOf([false])]),\n    className: PropTypes.string,\n    \"aria-label\": PropTypes.string,\n    \"data-test-subj\": PropTypes.string,\n\n    /**\n       * Visible label of option.\n       * Must be unique across items if `key` is not supplied\n       */\n    label: PropTypes.string,\n\n    /**\n       * Optionally change the searchable term by passing a different string other than the `label`.\n       * Best used when creating a custom `optionRender` to separate the label from metadata but allowing to search on both\n       */\n    searchableLabel: PropTypes.string,\n\n    /**\n       * Must be unique across items.\n       * Will be used to match options instead of `label`\n       */\n    key: PropTypes.string,\n\n    /**\n       * Leave `undefined` to indicate not selected,\n       * 'on' to indicate inclusion and\n       * 'off' to indicate exclusion\n       */\n    checked: PropTypes.oneOf([\"on\", \"off\", undefined]),\n    disabled: PropTypes.bool,\n\n    /**\n       * Node to add between the selection icon and the label\n       */\n    prepend: PropTypes.node,\n\n    /**\n       * Node to add to the far right of the item\n       */\n    append: PropTypes.node,\n    ref: PropTypes.func\n  }).isRequired).isRequired,\n\n  /**\n       * Passes back the altered `options` array with selected options as\n       */\n  onChange: PropTypes.func,\n\n  /**\n       * Sets the single selection policy of\n       * `false`: allows multiple selection\n       * `true`: only allows one selection\n       * `always`: can and must have only one selection\n       */\n  singleSelection: PropTypes.oneOfType([PropTypes.oneOf([\"always\"]), PropTypes.bool.isRequired]),\n\n  /**\n       * Allows marking options as `checked='off'` as well as `'on'`\n       */\n  allowExclusions: PropTypes.bool,\n\n  /**\n       * Show an loading indicator while you load and hook up your data\n       */\n  isLoading: PropTypes.bool,\n\n  /**\n       * Sets the max height in pixels or pass `full` to allow\n       * the whole group to fill the height of its container and\n       * allows the list grow as well\n       */\n  height: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.oneOf([\"full\"])]),\n\n  /**\n       * See #EuiSelectableOptionsList\n       */\n  listProps: PropTypes.any,\n\n  /**\n       * Custom render function for each option.\n       * Returns `(option, searchValue)`\n       */\n  renderOption: PropTypes.func,\n\n  /**\n       * Customize the loading message. Pass a string to simply change the text,\n       * or a node to replace the whole content.\n       */\n  loadingMessage: PropTypes.oneOfType([PropTypes.element.isRequired, PropTypes.string.isRequired]),\n\n  /**\n       * Customize the no matches message. Pass a string to simply change the text,\n       * or a node to replace the whole content.\n       */\n  noMatchesMessage: PropTypes.oneOfType([PropTypes.element.isRequired, PropTypes.string.isRequired]),\n\n  /**\n       * Customize the empty message. Pass a string to simply change the text,\n       * or a node to replace the whole content.\n       */\n  emptyMessage: PropTypes.oneOfType([PropTypes.element.isRequired, PropTypes.string.isRequired]),\n\n  /**\n       * Control whether or not options get filtered internally or if consumer will filter\n       * Default: false\n       */\n  isPreFiltered: PropTypes.bool\n};\n\ntry {\n  EuiSelectable.__docgenInfo = {\n    description: '',\n    displayName: 'EuiSelectable',\n    methods: [],\n    props: {\n      className: {\n        defaultValue: null,\n        description: '',\n        name: 'className',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'aria-label': {\n        defaultValue: null,\n        description: 'Defines a string value that labels the current element.\\n' + '@see aria-labelledby.',\n        name: 'aria-label',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'data-test-subj': {\n        defaultValue: null,\n        description: '',\n        name: 'data-test-subj',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      searchable: {\n        defaultValue: {\n          value: 'false'\n        },\n        description: 'Hooks up a search box to filter the list (boolean)',\n        name: 'searchable',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      searchProps: {\n        defaultValue: null,\n        description: 'Passes props down to the `EuiFieldSearch`',\n        name: 'searchProps',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'Partial<EuiSelectableSearchProps<T>>'\n        }\n      },\n      children: {\n        defaultValue: null,\n        description: 'Function that takes the `list` node and then\\n' + 'the `search` node (if `searchable` is applied)',\n        name: 'children',\n        parent: undefined,\n        required: false,\n        type: {\n          name: '(list: ReactElement<typeof EuiSelectableList | FunctionComponent<EuiSelectableMessageProps>, string | ((props: any) => ReactElement<any, string | ... 1 more ... | (new (props: any) => Component<...>)>) | (new (props: any) => Component<...>)>, search: ReactElement<...>) => ReactNode'\n        }\n      },\n      options: {\n        defaultValue: {\n          value: '[]'\n        },\n        description: 'Array of EuiSelectableOption objects. See #EuiSelectableOptionProps',\n        name: 'options',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'ExclusiveUnion<EuiSelectableGroupLabelOption<T>, EuiSelectableLIOption<T>>[]'\n        }\n      },\n      onChange: {\n        defaultValue: null,\n        description: 'Passes back the altered `options` array with selected options as',\n        name: 'onChange',\n        parent: undefined,\n        required: false,\n        type: {\n          name: '(options: ExclusiveUnion<EuiSelectableGroupLabelOption<T>, EuiSelectableLIOption<T>>[]) => void'\n        }\n      },\n      singleSelection: {\n        defaultValue: {\n          value: 'false'\n        },\n        description: 'Sets the single selection policy of\\n' + '`false`: allows multiple selection\\n' + '`true`: only allows one selection\\n' + '`always`: can and must have only one selection',\n        name: 'singleSelection',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean | \"always\"'\n        }\n      },\n      allowExclusions: {\n        defaultValue: null,\n        description: \"Allows marking options as `checked='off'` as well as `'on'`\",\n        name: 'allowExclusions',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      isLoading: {\n        defaultValue: null,\n        description: 'Show an loading indicator while you load and hook up your data',\n        name: 'isLoading',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      height: {\n        defaultValue: null,\n        description: 'Sets the max height in pixels or pass `full` to allow\\n' + 'the whole group to fill the height of its container and\\n' + 'allows the list grow as well',\n        name: 'height',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'number | \"full\"'\n        }\n      },\n      listProps: {\n        defaultValue: null,\n        description: 'See #EuiSelectableOptionsList',\n        name: 'listProps',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'EuiSelectableOptionsListPropsWithDefaults'\n        }\n      },\n      renderOption: {\n        defaultValue: null,\n        description: 'Custom render function for each option.\\n' + 'Returns `(option, searchValue)`',\n        name: 'renderOption',\n        parent: undefined,\n        required: false,\n        type: {\n          name: '(option: ExclusiveUnion<EuiSelectableGroupLabelOption<T>, EuiSelectableLIOption<T>>, searchValue: string) => ReactNode'\n        }\n      },\n      loadingMessage: {\n        defaultValue: null,\n        description: 'Customize the loading message. Pass a string to simply change the text,\\n' + 'or a node to replace the whole content.',\n        name: 'loadingMessage',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'string | ReactElement'\n        }\n      },\n      noMatchesMessage: {\n        defaultValue: null,\n        description: 'Customize the no matches message. Pass a string to simply change the text,\\n' + 'or a node to replace the whole content.',\n        name: 'noMatchesMessage',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'string | ReactElement'\n        }\n      },\n      emptyMessage: {\n        defaultValue: null,\n        description: 'Customize the empty message. Pass a string to simply change the text,\\n' + 'or a node to replace the whole content.',\n        name: 'emptyMessage',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'string | ReactElement'\n        }\n      },\n      isPreFiltered: {\n        defaultValue: {\n          value: 'false'\n        },\n        description: 'Control whether or not options get filtered internally or if consumer will filter\\n' + 'Default: false',\n        name: 'isPreFiltered',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      }\n    },\n    extendedInterfaces: ['CommonProps', 'HTMLAttributes', 'AriaAttributes', 'DOMAttributes']\n  };\n} catch (e) {}"]}]}