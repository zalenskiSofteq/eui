{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\search_bar\\query\\query.ts","dependencies":[{"path":"D:\\work\\eui\\src\\components\\search_bar\\query\\query.ts","mtime":1649070093754},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/search_bar/query/query.ts"],"names":["defaultSyntax","executeAst","isNil","isString","astToEsQueryDsl","astToEsQueryString","AST","Operator","Query","text","options","syntax","parse","clause","Match","isMustClause","Term","isInstance","Is","Field","ast","print","field","value","hasSimpleFieldClause","getSimpleFieldClause","removeSimpleFieldClauses","must","operator","EQ","addSimpleFieldValue","removeSimpleFieldValue","hasOrFieldClause","getOrFieldClause","addOrFieldValue","removeOrFieldValue","removeOrFieldClauses","flag","getIsClause","addClause","mustNot","removeIsClause","query","items","q"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { defaultSyntax, ParseOptions, Syntax } from './default_syntax';\nimport { executeAst } from './execute_ast';\nimport { isNil, isString } from '../../../services/predicate';\nimport { astToEsQueryDsl } from './ast_to_es_query_dsl';\nimport { astToEsQueryString } from './ast_to_es_query_string';\nimport { _AST, AST, Clause, Operator, OperatorType, Value } from './ast';\n\n/**\n * This is the consumer interface for the query - it's effectively a wrapper construct around\n * the AST and some of its related utility functions (e.g. parsing, text representation, executing, etc...)\n * It is immutable - all mutating operations return a new (mutated) query instance.\n */\nexport class Query {\n  static parse(\n    text: string,\n    options?: ParseOptions,\n    syntax: Syntax = defaultSyntax\n  ) {\n    return new Query(syntax.parse(text, options), syntax, text);\n  }\n\n  static isMust(clause: Clause) {\n    return AST.Match.isMustClause(clause);\n  }\n\n  static MATCH_ALL = Query.parse('');\n\n  static isTerm(clause: Clause) {\n    return AST.Term.isInstance(clause);\n  }\n\n  static isIs(clause: Clause) {\n    return AST.Is.isInstance(clause);\n  }\n\n  static isField(clause: Clause) {\n    return AST.Field.isInstance(clause);\n  }\n\n  // This ought to be `private`, but Kibana has some customizations that rely on access to this field\n  public ast: _AST;\n  public text: string;\n  private syntax: Syntax;\n\n  constructor(ast: _AST, syntax: Syntax = defaultSyntax, text?: string) {\n    this.ast = ast;\n    this.text = text || syntax.print(ast);\n    this.syntax = syntax;\n  }\n\n  hasSimpleFieldClause(field: string, value?: string) {\n    return this.ast.hasSimpleFieldClause(field, value);\n  }\n\n  getSimpleFieldClause(field: string, value?: Value) {\n    return this.ast.getSimpleFieldClause(field, value);\n  }\n\n  removeSimpleFieldClauses(field: string) {\n    const ast = this.ast.removeSimpleFieldClauses(field);\n    return new Query(ast, this.syntax);\n  }\n\n  addSimpleFieldValue(\n    field: string,\n    value: Value,\n    must = true,\n    operator: OperatorType = Operator.EQ\n  ) {\n    const ast = this.ast.addSimpleFieldValue(field, value, must, operator);\n    return new Query(ast, this.syntax);\n  }\n\n  removeSimpleFieldValue(field: string, value: Value) {\n    const ast = this.ast.removeSimpleFieldValue(field, value);\n    return new Query(ast, this.syntax);\n  }\n\n  hasOrFieldClause(field: string, value?: Value) {\n    return this.ast.hasOrFieldClause(field, value);\n  }\n\n  getOrFieldClause(field: string, value?: Value) {\n    return this.ast.getOrFieldClause(field, value);\n  }\n\n  addOrFieldValue(\n    field: string,\n    value: Value,\n    must = true,\n    operator: OperatorType = Operator.EQ\n  ) {\n    const ast = this.ast.addOrFieldValue(field, value, must, operator);\n    return new Query(ast, this.syntax);\n  }\n\n  removeOrFieldValue(field: string, value: Value) {\n    const ast = this.ast.removeOrFieldValue(field, value);\n    return new Query(ast, this.syntax);\n  }\n\n  removeOrFieldClauses(field: string) {\n    const ast = this.ast.removeOrFieldClauses(field);\n    return new Query(ast, this.syntax);\n  }\n\n  hasIsClause(flag: string) {\n    return !isNil(this.ast.getIsClause(flag));\n  }\n\n  getIsClause(flag: string) {\n    return this.ast.getIsClause(flag);\n  }\n\n  addMustIsClause(flag: string) {\n    const ast = this.ast.addClause(AST.Is.must(flag));\n    return new Query(ast, this.syntax);\n  }\n\n  addMustNotIsClause(flag: string) {\n    const ast = this.ast.addClause(AST.Is.mustNot(flag));\n    return new Query(ast, this.syntax);\n  }\n\n  removeIsClause(flag: string) {\n    const ast = this.ast.removeIsClause(flag);\n    return new Query(ast, this.syntax);\n  }\n\n  /**\n   * Executes this query over the given iterable item and returns\n   * an new array of all items that matched this query. Options:\n   *\n   * defaultFields: string[]\n   *\n   *    An array of field names to match the default clauses against. When not specified, the query\n   *    will pick up all the string fields of each record and try to match against those.\n   *\n   * isClauseMatcher?: (record: any, flag: string, applied: boolean, explain?: []) => boolean\n   *\n   *    By default the 'is' clauses will try to match against boolean fields - where the flag of the clause\n   *    indicates the field name. You can change this behaviour by providing this matcher function for the\n   *    is clause. For example, if the object has a `tags` field, one can create a matcher that checks if\n   *    an object has a specific tag (e.g. \"is:marketing\", \"is:kitchen\", etc..)\n   *\n   * explain?: boolean\n   *\n   *    When set to `true`, each item in the returns array will have an `__explain` field that will hold\n   *    information about why the objects matched the query (default to `false`, mainly/only useful for\n   *    debugging)\n   */\n  static execute<T>(query: string | Query, items: T[], options = {}): T[] {\n    const q = isString(query) ? Query.parse(query) : query;\n    return executeAst(q.ast, items, options);\n  }\n\n  /**\n   * Builds and returns an Elasticsearch query out this query. Options:\n   *\n   * defaultFields?: string[]\n   *\n   *    An array of field names to match the default clauses against. When not specified, the query\n   *    will pick up all the string fields of each record and try to match against those.\n   *\n   * isToQuery?: (flag: string, on: boolean) => Object (elasticsearch query object)\n   *\n   *    By default, \"is\" clauses will be translated to a term query where the flag is the field\n   *    and the \"on\" value will be the value of the field. This function lets you change this default\n   *    translation and provide your own custom one.\n   *\n   * termValuesToQuery?: (values: string[]) => Object (elasticsearch query object)\n   *\n   *    By default, \"term\" clauses will be translated to a \"simple_query_string\" query where all\n   *    the values serve as terms in the query string. This function lets you change this default\n   *    translation and provide your own custom one.\n   *\n   * fieldValuesToAndQuery?: (field: string, values: string[]) => Object (elasticsearch query object)\n   *\n   *    By default, \"field\" clauses will be translated to a match query where all the values serve as\n   *    terms in the query(the operator is AND). This function lets you change this default translation\n   *    and provide your own custom one.\n   */\n  static toESQuery(query: string | Query, options = {}) {\n    const q = isString(query) ? Query.parse(query) : query;\n    return astToEsQueryDsl(q.ast, options);\n  }\n\n  static toESQueryString(query: string | Query) {\n    const q = isString(query) ? Query.parse(query) : query;\n    return astToEsQueryString(q.ast);\n  }\n}\n"]}]}