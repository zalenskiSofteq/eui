{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\services\\sort\\sortable_properties.ts","dependencies":[{"path":"D:\\work\\eui\\src\\services\\sort\\sortable_properties.ts","mtime":1649070093846},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/services/sort/sortable_properties.ts"],"names":["Comparators","SortableProperties","sortableProperties","initialSortablePropertyName","currentSortedProperty","getSortablePropertyByName","Error","items","copy","comparator","value","getSortedProperty","getValue","isCurrentSortAscending","reverse","sort","propertyName","find","property","name","newSortedProperty","sortedProperty","flipCurrentSortOrder","isAscendingByName","isAscending"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,QAAuC,eAAvC;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAaC,kBAAb;AAIE;AACF;AACA;AACA;AACE,8BACEC,kBADF,EAEEC,2BAFF,EAGE;AAAA;;AAAA;;AAAA;;AACA,SAAKD,kBAAL,GAA0BA,kBAA1B;AACA;AACJ;AACA;AACA;;AACI,QAAME,qBAAqB,GAAG,KAAKC,yBAAL,CAC5BF,2BAD4B,CAA9B;;AAGA,QAAI,CAACC,qBAAL,EAA4B;AAC1B,YAAM,IAAIE,KAAJ,qCACyBH,2BADzB,EAAN;AAGD;;AAED,SAAKC,qBAAL,GAA6BA,qBAA7B;AACD;AAED;AACF;AACA;;;AA/BA;AAAA;AAAA,wCAgCsB;AAClB,aAAO,KAAKA,qBAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;AAxCA;AAAA;AAAA,8BAyCYG,KAzCZ,EAyC6B;AACzB,UAAMC,IAAI,sBAAOD,KAAP,CAAV;;AACA,UAAIE,UAAU,GAAGT,WAAW,CAACU,KAAZ,CAAkB,KAAKC,iBAAL,GAAyBC,QAA3C,CAAjB;;AACA,UAAI,CAAC,KAAKC,sBAAL,EAAL,EAAoC;AAClCJ,QAAAA,UAAU,GAAGT,WAAW,CAACc,OAAZ,CAAoBL,UAApB,CAAb;AACD;;AACDD,MAAAA,IAAI,CAACO,IAAL,CAAUN,UAAV;AACA,aAAOD,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;AAvDA;AAAA;AAAA,8CAwD4BQ,YAxD5B,EAwDkD;AAC9C,aAAO,KAAKd,kBAAL,CAAwBe,IAAxB,CACL,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACC,IAAT,KAAkBH,YAAhC;AAAA,OADK,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;;AAlEA;AAAA;AAAA,2BAmESA,YAnET,EAmE+B;AAC3B,UAAMI,iBAAiB,GAAG,KAAKf,yBAAL,CAA+BW,YAA/B,CAA1B;;AACA,UAAI,CAACI,iBAAL,EAAwB;AACtB,cAAM,IAAId,KAAJ,qCAAuCU,YAAvC,EAAN;AACD;;AACD,UAAMK,cAAc,GAAG,KAAKV,iBAAL,EAAvB;;AACA,UAAIU,cAAc,CAACF,IAAf,KAAwBC,iBAAiB,CAACD,IAA9C,EAAoD;AAClD,aAAKG,oBAAL;AACD,OAFD,MAEO;AACL,aAAKlB,qBAAL,GAA6BgB,iBAA7B;AACD;AACF;AAED;AACF;AACA;;AAlFA;AAAA;AAAA,6CAmF2B;AACvB,UAAMC,cAAc,GAAG,KAAKV,iBAAL,EAAvB;AACA,aAAOU,cAAc,GAAG,KAAKE,iBAAL,CAAuBF,cAAc,CAACF,IAAtC,CAAH,GAAiD,KAAtE;AACD;AAED;AACF;AACA;AACA;;AA3FA;AAAA;AAAA,sCA4FoBH,YA5FpB,EA4F0C;AACtC,UAAMK,cAAc,GAAG,KAAKhB,yBAAL,CAA+BW,YAA/B,CAAvB;AACA,aAAOK,cAAc,GAAGA,cAAc,CAACG,WAAlB,GAAgC,KAArD;AACD;AAED;AACF;AACA;;AAnGA;AAAA;AAAA,2CAoGyB;AACrB,WAAKpB,qBAAL,CAA2BoB,WAA3B,GAAyC,CAAC,KAAKpB,qBAAL,CACvCoB,WADH;AAED;AAvGH;;AAAA;AAAA","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Comparators, Primitive } from './comparators';\n\nexport interface SortableProperty<T> {\n  name: string;\n  getValue: (obj: T) => Primitive;\n  isAscending: boolean;\n}\n\n/**\n * @typedef {Object} SortableProperty\n * @property {string} sortableProperty.name - Name of the property.\n * @property {function} sortableProperty.getValue - A function that takes in an object and returns a value to sort\n * by.\n * @property {boolean} sortableProperty.isAscending - The direction of the last sort by this property. Used to preserve\n * past sort orders.\n */\n\n/**\n * Stores sort information for a set of SortableProperties, including which property is currently being sorted on, as\n * well as the last sort order for each property.\n */\nexport class SortableProperties<T> {\n  sortableProperties: Array<SortableProperty<T>>;\n  currentSortedProperty: SortableProperty<T>;\n\n  /**\n   * @param {Array<SortableProperty>} sortableProperties - a set of sortable properties.\n   * @param {string} initialSortablePropertyName - Which sort property should be sorted on by default.\n   */\n  constructor(\n    sortableProperties: Array<SortableProperty<T>>,\n    initialSortablePropertyName: string\n  ) {\n    this.sortableProperties = sortableProperties;\n    /**\n     * The current property that is being sorted on.\n     * @type {SortableProperty}\n     */\n    const currentSortedProperty = this.getSortablePropertyByName(\n      initialSortablePropertyName\n    );\n    if (!currentSortedProperty) {\n      throw new Error(\n        `No property with the name ${initialSortablePropertyName}`\n      );\n    }\n\n    this.currentSortedProperty = currentSortedProperty;\n  }\n\n  /**\n   * @returns {SortableProperty} The current property that is being sorted on. Undefined if no sort order is applied.\n   */\n  getSortedProperty() {\n    return this.currentSortedProperty;\n  }\n\n  /**\n   * Sorts the items passed in and returns a newly sorted array.\n   * @param items {Array.<Object>}\n   * @returns {Array.<Object>} sorted array of items, based off the sort properties.\n   */\n  sortItems(items: T[]): T[] {\n    const copy = [...items];\n    let comparator = Comparators.value(this.getSortedProperty().getValue);\n    if (!this.isCurrentSortAscending()) {\n      comparator = Comparators.reverse(comparator);\n    }\n    copy.sort(comparator);\n    return copy;\n  }\n\n  /**\n   * Returns the SortProperty with the given name, if found.\n   * @param {String} propertyName\n   * @returns {SortableProperty|undefined}\n   */\n  getSortablePropertyByName(propertyName: string) {\n    return this.sortableProperties.find(\n      (property) => property.name === propertyName\n    );\n  }\n\n  /**\n   * Updates the sort property, potentially flipping the sort order based on whether the same\n   * property was already being sorted.\n   * @param propertyName {String}\n   */\n  sortOn(propertyName: string) {\n    const newSortedProperty = this.getSortablePropertyByName(propertyName);\n    if (!newSortedProperty) {\n      throw new Error(`No property with the name ${propertyName}`);\n    }\n    const sortedProperty = this.getSortedProperty();\n    if (sortedProperty.name === newSortedProperty.name) {\n      this.flipCurrentSortOrder();\n    } else {\n      this.currentSortedProperty = newSortedProperty;\n    }\n  }\n\n  /**\n   * @returns {boolean} True if the current sortable property is sorted in ascending order.\n   */\n  isCurrentSortAscending() {\n    const sortedProperty = this.getSortedProperty();\n    return sortedProperty ? this.isAscendingByName(sortedProperty.name) : false;\n  }\n\n  /**\n   * @param {string} propertyName\n   * @returns {boolean} True if the given sort property is sorted in ascending order.\n   */\n  isAscendingByName(propertyName: string) {\n    const sortedProperty = this.getSortablePropertyByName(propertyName);\n    return sortedProperty ? sortedProperty.isAscending : false;\n  }\n\n  /**\n   * Flips the current sorted property sort order.\n   */\n  flipCurrentSortOrder() {\n    this.currentSortedProperty.isAscending = !this.currentSortedProperty\n      .isAscending;\n  }\n}\n"]}]}