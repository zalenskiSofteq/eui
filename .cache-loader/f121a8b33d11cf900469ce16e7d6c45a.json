{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\observer\\resize_observer\\resize_observer.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\observer\\resize_observer\\resize_observer.tsx","mtime":1649070093716},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQiOwoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0KCmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9CgpmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJ1bmRlZmluZWQiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CgovKgogKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IKICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGgKICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQKICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlcgogKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsgeW91IG1heQogKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywKICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4KICogIkFTIElTIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZCiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZQogKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zCiAqIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JzsKaW1wb3J0IHsgRXVpT2JzZXJ2ZXIgfSBmcm9tICcuLi9vYnNlcnZlcic7CnZhciBoYXNSZXNpemVPYnNlcnZlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuUmVzaXplT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnOwpleHBvcnQgdmFyIEV1aVJlc2l6ZU9ic2VydmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXVpT2JzZXJ2ZXIpIHsKICBfaW5oZXJpdHMoRXVpUmVzaXplT2JzZXJ2ZXIsIF9FdWlPYnNlcnZlcik7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRXVpUmVzaXplT2JzZXJ2ZXIpOwoKICBmdW5jdGlvbiBFdWlSZXNpemVPYnNlcnZlcigpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXVpUmVzaXplT2JzZXJ2ZXIpOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgfQoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJuYW1lIiwgJ0V1aVJlc2l6ZU9ic2VydmVyJyk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic3RhdGUiLCB7CiAgICAgIGhlaWdodDogMCwKICAgICAgd2lkdGg6IDAKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uUmVzaXplIiwgZnVuY3Rpb24gKCkgewogICAgICAvLyBgZW50cnkuY29udGVudFJlY3RgIHByb3ZpZGVzIGluY29tcGxldGUgYGhlaWdodGAgYW5kIGB3aWR0aGAgZGF0YS4KICAgICAgLy8gVXNlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIHRvIGFjY291bnQgZm9yIHBhZGRpbmcgYW5kIGJvcmRlci4KICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTVJlY3RSZWFkT25seQogICAgICBpZiAoIV90aGlzLmNoaWxkTm9kZSkgcmV0dXJuOwoKICAgICAgdmFyIF90aGlzJGNoaWxkTm9kZSRnZXRCbyA9IF90aGlzLmNoaWxkTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwKICAgICAgICAgIGhlaWdodCA9IF90aGlzJGNoaWxkTm9kZSRnZXRCby5oZWlnaHQsCiAgICAgICAgICB3aWR0aCA9IF90aGlzJGNoaWxkTm9kZSRnZXRCby53aWR0aDsgLy8gQ2hlY2sgZm9yIGFjdHVhbCByZXNpemUgZXZlbnQKCgogICAgICBpZiAoX3RoaXMuc3RhdGUuaGVpZ2h0ID09PSBoZWlnaHQgJiYgX3RoaXMuc3RhdGUud2lkdGggPT09IHdpZHRoKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBfdGhpcy5wcm9wcy5vblJlc2l6ZSh7CiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsCiAgICAgICAgd2lkdGg6IHdpZHRoCiAgICAgIH0pOwoKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIGhlaWdodDogaGVpZ2h0LAogICAgICAgIHdpZHRoOiB3aWR0aAogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImJlZ2luT2JzZXJ2ZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgLy8gVGhlIHN1cGVyY2xhc3MgY2hlY2tzIHRoYXQgY2hpbGROb2RlIGlzIG5vdCBudWxsIGJlZm9yZSBpbnZva2luZwogICAgICAvLyBiZWdpbk9ic2VydmUoKQogICAgICB2YXIgY2hpbGROb2RlID0gX3RoaXMuY2hpbGROb2RlOwogICAgICBfdGhpcy5vYnNlcnZlciA9IG1ha2VSZXNpemVPYnNlcnZlcihjaGlsZE5vZGUsIF90aGlzLm9uUmVzaXplKTsKICAgIH0pOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIHJldHVybiBFdWlSZXNpemVPYnNlcnZlcjsKfShFdWlPYnNlcnZlcik7Cgp2YXIgbWFrZVJlc2l6ZU9ic2VydmVyID0gZnVuY3Rpb24gbWFrZVJlc2l6ZU9ic2VydmVyKG5vZGUsIGNhbGxiYWNrKSB7CiAgdmFyIG9ic2VydmVyOwoKICBpZiAoaGFzUmVzaXplT2JzZXJ2ZXIpIHsKICAgIG9ic2VydmVyID0gbmV3IHdpbmRvdy5SZXNpemVPYnNlcnZlcihjYWxsYmFjayk7CiAgICBvYnNlcnZlci5vYnNlcnZlKG5vZGUpOwogIH0KCiAgcmV0dXJuIG9ic2VydmVyOwp9OwoKZXhwb3J0IHZhciB1c2VSZXNpemVPYnNlcnZlciA9IGZ1bmN0aW9uIHVzZVJlc2l6ZU9ic2VydmVyKGNvbnRhaW5lciwgZGltZW5zaW9uKSB7CiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKHsKICAgIHdpZHRoOiAwLAogICAgaGVpZ2h0OiAwCiAgfSksCiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLAogICAgICBzaXplID0gX3VzZVN0YXRlMlswXSwKICAgICAgX3NldFNpemUgPSBfdXNlU3RhdGUyWzFdOyAvLyBfY3VycmVudERpbWVuc2lvbnMgYW5kIF9zZXRTaXplIGFyZSB1c2VkIHRvIG9ubHkgc3RvcmUgdGhlCiAgLy8gbmV3IHN0YXRlIChhbmQgdHJpZ2dlciBhIHJlLXJlbmRlcikgd2hlbiB0aGUgbmV3IGRpbWVuc2lvbnMgYWN0dWFsbHkgZGlmZmVyCgoKICB2YXIgX2N1cnJlbnREaW1lbnNpb25zID0gdXNlUmVmKHNpemUpOwoKICB2YXIgc2V0U2l6ZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChkaW1lbnNpb25zKSB7CiAgICB2YXIgZG9lc1dpZHRoTWF0dGVyID0gZGltZW5zaW9uICE9PSAnaGVpZ2h0JzsKICAgIHZhciBkb2VzSGVpZ2h0TWF0dGVyID0gZGltZW5zaW9uICE9PSAnd2lkdGgnOwoKICAgIGlmIChkb2VzV2lkdGhNYXR0ZXIgJiYgX2N1cnJlbnREaW1lbnNpb25zLmN1cnJlbnQud2lkdGggIT09IGRpbWVuc2lvbnMud2lkdGggfHwgZG9lc0hlaWdodE1hdHRlciAmJiBfY3VycmVudERpbWVuc2lvbnMuY3VycmVudC5oZWlnaHQgIT09IGRpbWVuc2lvbnMuaGVpZ2h0KSB7CiAgICAgIF9jdXJyZW50RGltZW5zaW9ucy5jdXJyZW50ID0gZGltZW5zaW9uczsKCiAgICAgIF9zZXRTaXplKGRpbWVuc2lvbnMpOwogICAgfQogIH0sIFtkaW1lbnNpb25dKTsKICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkgewogICAgaWYgKGNvbnRhaW5lciAhPSBudWxsKSB7CiAgICAgIC8vIFJlc2l6ZU9ic2VydmVyJ3MgZmlyc3QgY2FsbCB0byB0aGUgb2JzZXJ2YXRpb24gY2FsbGJhY2sgaXMgc2NoZWR1bGVkIGluIHRoZSBmdXR1cmUKICAgICAgLy8gc28gZmluZCB0aGUgY29udGFpbmVyJ3MgaW5pdGlhbCBkaW1lbnNpb25zIG5vdwogICAgICB2YXIgYm91bmRpbmdSZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICBzZXRTaXplKHsKICAgICAgICB3aWR0aDogYm91bmRpbmdSZWN0LndpZHRoLAogICAgICAgIGhlaWdodDogYm91bmRpbmdSZWN0LmhlaWdodAogICAgICB9KTsKICAgICAgdmFyIG9ic2VydmVyID0gbWFrZVJlc2l6ZU9ic2VydmVyKGNvbnRhaW5lciwgZnVuY3Rpb24gKCkgewogICAgICAgIC8vIGBlbnRyeS5jb250ZW50UmVjdGAgcHJvdmlkZXMgaW5jb21wbGV0ZSBgaGVpZ2h0YCBhbmQgYHdpZHRoYCBkYXRhLgogICAgICAgIC8vIFVzZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCB0byBhY2NvdW50IGZvciBwYWRkaW5nIGFuZCBib3JkZXIuCiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTVJlY3RSZWFkT25seQogICAgICAgIHZhciBfY29udGFpbmVyJGdldEJvdW5kaW4gPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksCiAgICAgICAgICAgIGhlaWdodCA9IF9jb250YWluZXIkZ2V0Qm91bmRpbi5oZWlnaHQsCiAgICAgICAgICAgIHdpZHRoID0gX2NvbnRhaW5lciRnZXRCb3VuZGluLndpZHRoOwoKICAgICAgICBzZXRTaXplKHsKICAgICAgICAgIHdpZHRoOiB3aWR0aCwKICAgICAgICAgIGhlaWdodDogaGVpZ2h0CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBvYnNlcnZlciAmJiBvYnNlcnZlci5kaXNjb25uZWN0KCk7CiAgICAgIH07CiAgICB9IGVsc2UgewogICAgICBzZXRTaXplKHsKICAgICAgICB3aWR0aDogMCwKICAgICAgICBoZWlnaHQ6IDAKICAgICAgfSk7CiAgICB9CiAgfSwgW2NvbnRhaW5lciwgc2V0U2l6ZV0pOwogIHJldHVybiBzaXplOwp9OwoKdHJ5IHsKICBFdWlSZXNpemVPYnNlcnZlci5fX2RvY2dlbkluZm8gPSB7CiAgICBkZXNjcmlwdGlvbjogJycsCiAgICBkaXNwbGF5TmFtZTogJ0V1aVJlc2l6ZU9ic2VydmVyJywKICAgIG1ldGhvZHM6IFtdLAogICAgcHJvcHM6IHsKICAgICAgY2hpbGRyZW46IHsKICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGwsCiAgICAgICAgZGVzY3JpcHRpb246ICJSZWFjdE5vZGUgdG8gcmVuZGVyIGFzIHRoaXMgY29tcG9uZW50J3MgY29udGVudCIsCiAgICAgICAgbmFtZTogJ2NoaWxkcmVuJywKICAgICAgICBwYXJlbnQ6IHsKICAgICAgICAgIGZpbGVOYW1lOiAnZXVpL3NyYy9jb21wb25lbnRzL29ic2VydmVyL3Jlc2l6ZV9vYnNlcnZlci9yZXNpemVfb2JzZXJ2ZXIudHN4JywKICAgICAgICAgIG5hbWU6ICdFdWlSZXNpemVPYnNlcnZlclByb3BzJwogICAgICAgIH0sCiAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgdHlwZTogewogICAgICAgICAgbmFtZTogJyhyZWY6IChlOiBIVE1MRWxlbWVudCkgPT4gdm9pZCkgPT4gUmVhY3ROb2RlJwogICAgICAgIH0KICAgICAgfSwKICAgICAgb25SZXNpemU6IHsKICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGwsCiAgICAgICAgZGVzY3JpcHRpb246ICcnLAogICAgICAgIG5hbWU6ICdvblJlc2l6ZScsCiAgICAgICAgcGFyZW50OiB7CiAgICAgICAgICBmaWxlTmFtZTogJ2V1aS9zcmMvY29tcG9uZW50cy9vYnNlcnZlci9yZXNpemVfb2JzZXJ2ZXIvcmVzaXplX29ic2VydmVyLnRzeCcsCiAgICAgICAgICBuYW1lOiAnRXVpUmVzaXplT2JzZXJ2ZXJQcm9wcycKICAgICAgICB9LAogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIHR5cGU6IHsKICAgICAgICAgIG5hbWU6ICcoZGltZW5zaW9uczogeyBoZWlnaHQ6IG51bWJlcjsgd2lkdGg6IG51bWJlcjsgfSkgPT4gdm9pZCcKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBleHRlbmRlZEludGVyZmFjZXM6IFsnRXVpUmVzaXplT2JzZXJ2ZXJQcm9wcyddCiAgfTsKfSBjYXRjaCAoZSkge30="},{"version":3,"sources":["D:/work/eui/src/components/observer/resize_observer/resize_observer.tsx"],"names":["useCallback","useEffect","useRef","useState","EuiObserver","hasResizeObserver","window","ResizeObserver","EuiResizeObserver","height","width","childNode","getBoundingClientRect","state","props","onResize","setState","observer","makeResizeObserver","node","callback","observe","useResizeObserver","container","dimension","size","_setSize","_currentDimensions","setSize","dimensions","doesWidthMatter","doesHeightMatter","current","boundingRect","disconnect"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ReactNode, useCallback, useEffect, useRef, useState } from 'react';\nimport { EuiObserver } from '../observer';\n\nexport interface EuiResizeObserverProps {\n  /**\n   * ReactNode to render as this component's content\n   */\n  children: (ref: (e: HTMLElement | null) => void) => ReactNode;\n  onResize: (dimensions: { height: number; width: number }) => void;\n}\n\nconst hasResizeObserver =\n  typeof window !== 'undefined' && typeof window.ResizeObserver !== 'undefined';\nexport class EuiResizeObserver extends EuiObserver<EuiResizeObserverProps> {\n  name = 'EuiResizeObserver';\n\n  state = {\n    height: 0,\n    width: 0,\n  };\n\n  onResize: ResizeObserverCallback = () => {\n    // `entry.contentRect` provides incomplete `height` and `width` data.\n    // Use `getBoundingClientRect` to account for padding and border.\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly\n    if (!this.childNode) return;\n    const { height, width } = this.childNode.getBoundingClientRect();\n    // Check for actual resize event\n    if (this.state.height === height && this.state.width === width) {\n      return;\n    }\n\n    this.props.onResize({\n      height,\n      width,\n    });\n    this.setState({ height, width });\n  };\n\n  beginObserve = () => {\n    // The superclass checks that childNode is not null before invoking\n    // beginObserve()\n    const childNode = this.childNode!;\n    this.observer = makeResizeObserver(childNode, this.onResize)!;\n  };\n}\n\nconst makeResizeObserver = (\n  node: Element,\n  callback: ResizeObserverCallback\n) => {\n  let observer;\n  if (hasResizeObserver) {\n    observer = new window.ResizeObserver(callback);\n    observer.observe(node);\n  }\n  return observer;\n};\n\nexport const useResizeObserver = (\n  container: Element | null,\n  dimension?: 'width' | 'height'\n) => {\n  const [size, _setSize] = useState({ width: 0, height: 0 });\n\n  // _currentDimensions and _setSize are used to only store the\n  // new state (and trigger a re-render) when the new dimensions actually differ\n  const _currentDimensions = useRef(size);\n  const setSize = useCallback(\n    (dimensions) => {\n      const doesWidthMatter = dimension !== 'height';\n      const doesHeightMatter = dimension !== 'width';\n      if (\n        (doesWidthMatter &&\n          _currentDimensions.current.width !== dimensions.width) ||\n        (doesHeightMatter &&\n          _currentDimensions.current.height !== dimensions.height)\n      ) {\n        _currentDimensions.current = dimensions;\n        _setSize(dimensions);\n      }\n    },\n    [dimension]\n  );\n\n  useEffect(() => {\n    if (container != null) {\n      // ResizeObserver's first call to the observation callback is scheduled in the future\n      // so find the container's initial dimensions now\n      const boundingRect = container.getBoundingClientRect();\n      setSize({\n        width: boundingRect.width,\n        height: boundingRect.height,\n      });\n\n      const observer = makeResizeObserver(container, () => {\n        // `entry.contentRect` provides incomplete `height` and `width` data.\n        // Use `getBoundingClientRect` to account for padding and border.\n        // https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly\n        const { height, width } = container.getBoundingClientRect();\n        setSize({\n          width,\n          height,\n        });\n      });\n\n      return () => observer && observer.disconnect();\n    } else {\n      setSize({ width: 0, height: 0 });\n    }\n  }, [container, setSize]);\n\n  return size;\n};\n"]}]}