{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\search_bar\\query\\ast_to_es_query_string.ts","dependencies":[{"path":"D:\\work\\eui\\src\\components\\search_bar\\query\\ast_to_es_query_string.ts","mtime":1649070093750},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/search_bar/query/ast_to_es_query_string.ts"],"names":["printIso8601","isDateValue","AST","Operator","isArray","isDateLike","isString","isBoolean","isNumber","emitMatch","match","Match","isMust","escapeValue","value","replace","emitFieldDateLikeClause","field","operator","matchOp","EQ","GT","GTE","LT","LTE","Error","emitFieldDateValueClause","granularity","resolve","date","gte","iso8601","start","lt","startOfNext","emitFieldNumericClause","emitFieldStringClause","emitFieldBooleanClause","emitFieldSingleValueClause","emitFieldClause","clause","isGroupMember","undefined","clauses","map","v","join","emitTermClause","emitIsClause","flag","flagValue","emitGroupClause","formattedValues","emitClause","Field","isInstance","Term","Is","Group","JSON","stringify","astToEsQueryString","ast","length"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport moment from 'moment';\nimport { printIso8601 } from './date_format';\nimport { DateValue, isDateValue } from './date_value';\nimport {\n  _AST,\n  AST,\n  Clause,\n  FieldClause,\n  GroupClause,\n  IsClause,\n  MatchType,\n  Operator,\n  OperatorType,\n  TermClause,\n  Value,\n} from './ast';\nimport {\n  isArray,\n  isDateLike,\n  isString,\n  isBoolean,\n  isNumber,\n} from '../../../services/predicate';\n\nconst emitMatch = (match: MatchType | undefined) => {\n  if (!match) {\n    return '';\n  }\n  return AST.Match.isMust(match) ? '+' : '-';\n};\n\nconst escapeValue = (value: Value) => {\n  if (typeof value === 'string') {\n    return value.replace(/([\\\\\"])/g, '\\\\$1');\n  }\n  return value;\n};\n\nconst emitFieldDateLikeClause = (\n  field: string,\n  value: moment.Moment | Date,\n  operator: OperatorType,\n  match?: MatchType\n) => {\n  const matchOp = emitMatch(match);\n  switch (operator) {\n    case Operator.EQ:\n      return `${matchOp}${field}:${printIso8601(value)}`;\n    case Operator.GT:\n      return `${matchOp}${field}:>${printIso8601(value)}`;\n    case Operator.GTE:\n      return `${matchOp}${field}:>=${printIso8601(value)}`;\n    case Operator.LT:\n      return `${matchOp}${field}:<${printIso8601(value)}`;\n    case Operator.LTE:\n      return `${matchOp}${field}:<=${printIso8601(value)}`;\n    default:\n      throw new Error(`unknown operator [${operator}]`);\n  }\n};\n\nconst emitFieldDateValueClause = (\n  field: string,\n  value: DateValue,\n  operator: OperatorType,\n  match?: MatchType\n) => {\n  const matchOp = emitMatch(match);\n  const { granularity, resolve } = value;\n  const date = resolve();\n  if (granularity) {\n    switch (operator) {\n      case Operator.EQ:\n        const gte = granularity.iso8601(granularity.start(date));\n        const lt = granularity.iso8601(granularity.startOfNext(date));\n        return `${matchOp}${field}:(>=${gte} AND <${lt})`;\n      case Operator.GT:\n        return `${matchOp}${field}:>=${granularity.iso8601(\n          granularity.startOfNext(date)\n        )}`;\n      case Operator.GTE:\n        return `${matchOp}${field}:>=${granularity.iso8601(\n          granularity.start(date)\n        )}`;\n      case Operator.LT:\n        return `${matchOp}${field}:<${granularity.iso8601(\n          granularity.start(date)\n        )}`;\n      case Operator.LTE:\n        return `${matchOp}${field}:<${granularity.iso8601(\n          granularity.startOfNext(date)\n        )}`;\n      default:\n        throw new Error(`unknown operator [${operator}]`);\n    }\n  }\n  return emitFieldDateLikeClause(field, date, operator, match);\n};\n\nconst emitFieldNumericClause = (\n  field: string,\n  value: number,\n  operator: OperatorType,\n  match?: MatchType\n) => {\n  const matchOp = emitMatch(match);\n  switch (operator) {\n    case Operator.EQ:\n      return `${matchOp}${field}:${value}`;\n    case Operator.GT:\n      return `${matchOp}${field}:>${value}`;\n    case Operator.GTE:\n      return `${matchOp}${field}:>=${value}`;\n    case Operator.LT:\n      return `${matchOp}${field}:<${value}`;\n    case Operator.LTE:\n      return `${matchOp}${field}:<=${value}`;\n    default:\n      throw new Error(`unknown operator [${operator}]`);\n  }\n};\n\nconst emitFieldStringClause = (\n  field: string,\n  value: string,\n  match?: MatchType\n) => {\n  const matchOp = emitMatch(match);\n  if (value.match(/\\s/)) {\n    return `${matchOp}${field}:\"${escapeValue(value)}\"`;\n  }\n  return `${matchOp}${field}:${escapeValue(value)}`;\n};\n\nconst emitFieldBooleanClause = (\n  field: string,\n  value: Value,\n  match?: MatchType\n) => {\n  const matchOp = emitMatch(match);\n  return `${matchOp}${field}:${value}`;\n};\n\nconst emitFieldSingleValueClause = (\n  field: string,\n  value: Value,\n  operator: OperatorType,\n  match?: MatchType\n) => {\n  if (isDateValue(value)) {\n    return emitFieldDateValueClause(field, value, operator, match);\n  }\n  if (isDateLike(value)) {\n    return emitFieldDateLikeClause(field, value, operator, match);\n  }\n  if (isString(value)) {\n    return emitFieldStringClause(field, value, match);\n  }\n  if (isNumber(value)) {\n    return emitFieldNumericClause(field, value, operator, match);\n  }\n  if (isBoolean(value)) {\n    return emitFieldBooleanClause(field, value, match);\n  }\n  throw new Error(`unknown type of field value [${value}]`);\n};\n\nconst emitFieldClause = (\n  clause: FieldClause,\n  isGroupMember: boolean\n): string => {\n  const { field, value, operator } = clause;\n  let { match } = clause;\n  if (isGroupMember && AST.Match.isMust(match)) {\n    match = undefined;\n  }\n\n  if (!isArray(value)) {\n    return emitFieldSingleValueClause(field, value, operator, match);\n  }\n  const matchOp = emitMatch(match);\n  const clauses = value\n    .map((v) => emitFieldSingleValueClause(field, v, operator))\n    .join(' OR ');\n  return `${matchOp}(${clauses})`;\n};\n\nconst emitTermClause = (clause: TermClause, isGroupMember: boolean): string => {\n  const { value } = clause;\n  let { match } = clause;\n  if (isGroupMember && AST.Match.isMust(match)) {\n    match = undefined;\n  }\n\n  const matchOp = emitMatch(match);\n  return `${matchOp}${escapeValue(value)}`;\n};\n\nconst emitIsClause = (clause: IsClause, isGroupMember: boolean): string => {\n  const { flag, match } = clause;\n  const matchOp = isGroupMember ? '' : '+';\n  const flagValue = AST.Match.isMust(match);\n  return `${matchOp}${flag}:${flagValue}`;\n};\n\nconst emitGroupClause = (clause: GroupClause): string => {\n  const { value } = clause;\n  const formattedValues = value.map((clause) => {\n    return emitClause(clause, true);\n  });\n  return `+(${formattedValues.join(' ')})`;\n};\n\nfunction emitClause(clause: Clause, isGroupMember = false) {\n  if (AST.Field.isInstance(clause)) {\n    return emitFieldClause(clause, isGroupMember);\n  }\n  if (AST.Term.isInstance(clause)) {\n    return emitTermClause(clause, isGroupMember);\n  }\n  if (AST.Is.isInstance(clause)) {\n    return emitIsClause(clause, isGroupMember);\n  }\n  if (AST.Group.isInstance(clause)) {\n    return emitGroupClause(clause);\n  }\n  throw new Error(`unknown clause type [${JSON.stringify(clause)}]`);\n}\n\nexport const astToEsQueryString = (ast: _AST) => {\n  if (ast.clauses.length === 0) {\n    return '*';\n  }\n\n  return ast.clauses.map((clause) => emitClause(clause)).join(' ');\n};\n"]}]}