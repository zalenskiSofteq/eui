{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\table\\table_row_cell.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\table\\table_row_cell.tsx","mtime":1649070093792},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/table/table_row_cell.tsx"],"names":["React","Fragment","classNames","LEFT_ALIGNMENT","RIGHT_ALIGNMENT","CENTER_ALIGNMENT","resolveWidthAsStyle","useIsWithinBreakpoints","EuiTableRowCell","align","children","className","truncateText","setScopeRow","showOnHover","textOnly","hasActions","isExpander","mobileOptions","show","header","hideForMobile","isMobileHeader","isMobileFullWidth","style","width","rest","cellClasses","only","enlarge","fullWidth","contentClasses","mobileContentClasses","childClasses","euiTableCellContent__text","euiTableCellContent__hoverItem","widthValue","styleObj","modifyChildren","modifiedChildren","isValidElement","Children","map","child","cloneElement","props","childrenNode","hideForMobileClasses","showForMobileClasses","Element","sharedProps","scope","undefined","render"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Fragment } from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nimport { LEFT_ALIGNMENT, RIGHT_ALIGNMENT, CENTER_ALIGNMENT } from '../../services';\nimport { resolveWidthAsStyle } from './utils';\nimport { useIsWithinBreakpoints } from '../../services/hooks/useIsWithinBreakpoints';\nexport var EuiTableRowCell = ({\n  align = LEFT_ALIGNMENT,\n  children,\n  className,\n  truncateText,\n  setScopeRow,\n  showOnHover,\n  textOnly = true,\n  hasActions,\n  isExpander,\n  mobileOptions = {\n    show: true\n  },\n  // Soon to be deprecated for {...mobileOptions}\n  header,\n  hideForMobile,\n  isMobileHeader,\n  isMobileFullWidth,\n  style,\n  width,\n  ...rest\n}) => {\n  const cellClasses = classNames('euiTableRowCell', {\n    'euiTableRowCell--hasActions': hasActions,\n    'euiTableRowCell--isExpander': isExpander,\n    'euiTableRowCell--hideForDesktop': mobileOptions.only || isMobileHeader,\n    'euiTableRowCell--enlargeForMobile': mobileOptions.enlarge || isMobileHeader,\n    'euiTableRowCell--isMobileFullWidth': mobileOptions.fullWidth || isMobileFullWidth || isMobileHeader\n  });\n  const contentClasses = classNames('euiTableCellContent', className, {\n    'euiTableCellContent--alignRight': align === RIGHT_ALIGNMENT,\n    'euiTableCellContent--alignCenter': align === CENTER_ALIGNMENT,\n    'euiTableCellContent--showOnHover': showOnHover,\n    'euiTableCellContent--truncateText': truncateText,\n    // We're doing this rigamarole instead of creating `euiTableCellContent--textOnly` for BWC\n    // purposes for the time-being.\n    'euiTableCellContent--overflowingContent': textOnly !== true\n  });\n  const mobileContentClasses = classNames('euiTableCellContent', className, {\n    'euiTableCellContent--alignRight': mobileOptions.align === RIGHT_ALIGNMENT || align === RIGHT_ALIGNMENT,\n    'euiTableCellContent--alignCenter': mobileOptions.align === CENTER_ALIGNMENT || align === RIGHT_ALIGNMENT,\n    'euiTableCellContent--showOnHover': mobileOptions.showOnHover || showOnHover,\n    'euiTableCellContent--truncateText': mobileOptions.truncateText || truncateText,\n    // We're doing this rigamarole instead of creating `euiTableCellContent--textOnly` for BWC\n    // purposes for the time-being.\n    'euiTableCellContent--overflowingContent': mobileOptions.textOnly !== true || textOnly !== true\n  });\n  const childClasses = classNames({\n    euiTableCellContent__text: textOnly === true,\n    euiTableCellContent__hoverItem: showOnHover\n  });\n  const widthValue = useIsWithinBreakpoints(['xs', 's', 'm']) && mobileOptions.width ? mobileOptions.width : width;\n  const styleObj = resolveWidthAsStyle(style, widthValue);\n\n  function modifyChildren(children) {\n    let modifiedChildren = children;\n\n    if (textOnly === true) {\n      modifiedChildren = <span className={childClasses}>{children}</span>;\n    } else if (React.isValidElement(children)) {\n      modifiedChildren = React.Children.map(children, child => React.cloneElement(child, {\n        className: classNames(child.props.className, childClasses)\n      }));\n    }\n\n    return modifiedChildren;\n  }\n\n  const childrenNode = modifyChildren(children);\n  const hideForMobileClasses = 'euiTableRowCell--hideForMobile';\n  const showForMobileClasses = 'euiTableRowCell--hideForDesktop';\n  const Element = setScopeRow ? 'th' : 'td';\n  const sharedProps = {\n    scope: setScopeRow ? 'row' : undefined,\n    style: styleObj,\n    ...rest\n  };\n\n  if (mobileOptions.show === false || hideForMobile) {\n    return <Element className={`${cellClasses} ${hideForMobileClasses}`} {...sharedProps}>\n        <div className={contentClasses}>{childrenNode}</div>\n      </Element>;\n  } else {\n    return <Element className={cellClasses} {...sharedProps}>\n        {\n        /* Mobile-only header */\n      }\n        {(mobileOptions.header || header) && !isMobileHeader && <div className={`euiTableRowCell__mobileHeader ${showForMobileClasses}`}>\n            {mobileOptions.header || header}\n          </div>}\n\n        {\n        /* Content depending on mobile render existing */\n      }\n        {mobileOptions.render ? <Fragment>\n            <div className={`${mobileContentClasses} ${showForMobileClasses}`}>\n              {modifyChildren(mobileOptions.render)}\n            </div>\n            <div className={`${contentClasses} ${hideForMobileClasses}`}>\n              {childrenNode}\n            </div>\n          </Fragment> : <div className={contentClasses}>{childrenNode}</div>}\n      </Element>;\n  }\n};\nEuiTableRowCell.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n  align: PropTypes.oneOf([\"left\", \"right\", \"center\"]),\n\n  /**\n     * Don't allow line breaks within cells\n     */\n  showOnHover: PropTypes.bool,\n\n  /**\n     * Setting `textOnly` to `false` will break words unnecessarily on FF and\n     * IE.  To combat this problem on FF, wrap contents with the css utility\n     * `.eui-textBreakWord`.\n     */\n  textOnly: PropTypes.bool,\n\n  /**\n     * _Should only be used for action cells_\n     */\n  truncateText: PropTypes.bool,\n  width: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired]),\n\n  /**\n     * Indicates if the column is dedicated to icon-only actions (currently\n     * affects mobile only)\n     */\n  hasActions: PropTypes.bool,\n\n  /**\n     * _DEPRECATED: use `mobileOptions.header`_\n     * The column's header title for use in mobile view (will be added as a\n     * data-attr)\n     */\n  header: PropTypes.string,\n\n  /**\n     * _DEPRECATED: use `mobileOptions.show = false`_\n     * Indicates if the column should not show for mobile users (typically\n     * hidden because a custom mobile header utilizes the column's contents)\n     */\n  hideForMobile: PropTypes.bool,\n\n  /**\n     * Indicates if the column is dedicated as the expandable row toggle\n     */\n  isExpander: PropTypes.bool,\n\n  /**\n     * _DEPRECATED: use `mobileOptions.fullWidth`_\n     * Allocates 100% of the width of the container in mobile view\n     * (typically cells are contained to 50%)\n     */\n  isMobileFullWidth: PropTypes.bool,\n\n  /**\n     * _DEPRECATED: use `mobileOptions.only = true & mobileOptions.header = * false`_\n     * Indicates if the column was created to be the row's heading in mobile\n     * view.  It won't display column's header inline and it the column will\n     * be hidden at larger screens)\n     */\n  isMobileHeader: PropTypes.bool,\n\n  /**\n     * Mobile options for displaying differently at small screens\n     */\n  mobileOptions: PropTypes.shape({\n    /**\n       * If false, will not render the cell at all for mobile\n       */\n    show: PropTypes.bool,\n\n    /**\n       * Only show for mobile? If true, will not render the column at all for desktop\n       */\n    only: PropTypes.bool,\n\n    /**\n       * Custom render/children if different from desktop\n       */\n    render: PropTypes.node,\n\n    /**\n       * The column's header for use in mobile view (automatically passed down\n       * when using `EuiBasicTable`).\n       * Or pass `false` to not show a header at all.\n       */\n    header: PropTypes.oneOfType([PropTypes.node.isRequired, PropTypes.bool.isRequired]),\n\n    /**\n       * Increase text size compared to rest of cells\n       */\n    enlarge: PropTypes.bool,\n\n    /**\n       * Allocates 100% of the width of the container in mobile view\n       * (typically cells are contained to 50%)\n       */\n    fullWidth: PropTypes.bool,\n\n    /**\n       * Applies the value to the width of the cell in mobile view (typically 50%)\n       */\n    width: PropTypes.oneOfType([PropTypes.any, PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired])]),\n\n    /**\n       * Horizontal alignment of the text in the cell\n       */\n    align: PropTypes.oneOf([\"left\", \"right\", \"center\"]),\n\n    /**\n       * Don't allow line breaks within cells\n       */\n    showOnHover: PropTypes.bool,\n\n    /**\n       * Setting `textOnly` to `false` will break words unnecessarily on FF and\n       * IE.  To combat this problem on FF, wrap contents with the css utility\n       * `.eui-textBreakWord`.\n       */\n    textOnly: PropTypes.bool,\n\n    /**\n       * _Should only be used for action cells_\n       */\n    truncateText: PropTypes.bool\n  }),\n\n  /**\n     * Indicates whether the cell should be marked as the heading for its row\n     */\n  setScopeRow: PropTypes.bool\n};\n\ntry {\n  EuiTableRowCell.__docgenInfo = {\n    description: '',\n    displayName: 'EuiTableRowCell',\n    methods: [],\n    props: {\n      className: {\n        defaultValue: null,\n        description: '',\n        name: 'className',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'aria-label': {\n        defaultValue: null,\n        description: 'Defines a string value that labels the current element.\\n' + '@see aria-labelledby.',\n        name: 'aria-label',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'data-test-subj': {\n        defaultValue: null,\n        description: '',\n        name: 'data-test-subj',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      showOnHover: {\n        defaultValue: null,\n        description: \"Don't allow line breaks within cells\",\n        name: 'showOnHover',\n        parent: {\n          fileName: 'eui/src/components/table/table_row_cell.tsx',\n          name: 'EuiTableRowCellSharedPropsShape'\n        },\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      textOnly: {\n        defaultValue: {\n          value: 'true'\n        },\n        description: 'Setting `textOnly` to `false` will break words unnecessarily on FF and\\n' + 'IE.  To combat this problem on FF, wrap contents with the css utility\\n' + '`.eui-textBreakWord`.',\n        name: 'textOnly',\n        parent: {\n          fileName: 'eui/src/components/table/table_row_cell.tsx',\n          name: 'EuiTableRowCellSharedPropsShape'\n        },\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      truncateText: {\n        defaultValue: null,\n        description: '_Should only be used for action cells_',\n        name: 'truncateText',\n        parent: {\n          fileName: 'eui/src/components/table/table_row_cell.tsx',\n          name: 'EuiTableRowCellSharedPropsShape'\n        },\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      width: {\n        defaultValue: null,\n        description: '',\n        name: 'width',\n        parent: {\n          fileName: 'eui/src/components/table/table_row_cell.tsx',\n          name: 'EuiTableRowCellSharedPropsShape'\n        },\n        required: false,\n        type: {\n          name: 'string | number'\n        }\n      },\n      hasActions: {\n        defaultValue: null,\n        description: 'Indicates if the column is dedicated to icon-only actions (currently\\n' + 'affects mobile only)',\n        name: 'hasActions',\n        parent: {\n          fileName: 'eui/src/components/table/table_row_cell.tsx',\n          name: 'EuiTableRowCellProps'\n        },\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      header: {\n        defaultValue: null,\n        description: '_DEPRECATED: use `mobileOptions.header`_\\n' + \"The column's header title for use in mobile view (will be added as a\\n\" + 'data-attr)',\n        name: 'header',\n        parent: {\n          fileName: 'eui/src/components/table/table_row_cell.tsx',\n          name: 'EuiTableRowCellProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      hideForMobile: {\n        defaultValue: null,\n        description: '_DEPRECATED: use `mobileOptions.show = false`_\\n' + 'Indicates if the column should not show for mobile users (typically\\n' + \"hidden because a custom mobile header utilizes the column's contents)\",\n        name: 'hideForMobile',\n        parent: {\n          fileName: 'eui/src/components/table/table_row_cell.tsx',\n          name: 'EuiTableRowCellProps'\n        },\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      isExpander: {\n        defaultValue: null,\n        description: 'Indicates if the column is dedicated as the expandable row toggle',\n        name: 'isExpander',\n        parent: {\n          fileName: 'eui/src/components/table/table_row_cell.tsx',\n          name: 'EuiTableRowCellProps'\n        },\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      isMobileFullWidth: {\n        defaultValue: null,\n        description: '_DEPRECATED: use `mobileOptions.fullWidth`_\\n' + 'Allocates 100% of the width of the container in mobile view\\n' + '(typically cells are contained to 50%)',\n        name: 'isMobileFullWidth',\n        parent: {\n          fileName: 'eui/src/components/table/table_row_cell.tsx',\n          name: 'EuiTableRowCellProps'\n        },\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      isMobileHeader: {\n        defaultValue: null,\n        description: '_DEPRECATED: use `mobileOptions.only = true & mobileOptions.header = * false`_\\n' + \"Indicates if the column was created to be the row's heading in mobile\\n\" + \"view.  It won't display column's header inline and it the column will\\n\" + 'be hidden at larger screens)',\n        name: 'isMobileHeader',\n        parent: {\n          fileName: 'eui/src/components/table/table_row_cell.tsx',\n          name: 'EuiTableRowCellProps'\n        },\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      mobileOptions: {\n        defaultValue: {\n          value: '{\\n    show: true,\\n  }'\n        },\n        description: 'Mobile options for displaying differently at small screens',\n        name: 'mobileOptions',\n        parent: {\n          fileName: 'eui/src/components/table/table_row_cell.tsx',\n          name: 'EuiTableRowCellProps'\n        },\n        required: false,\n        type: {\n          name: 'EuiTableRowCellMobileOptionsShape & EuiTableRowCellSharedPropsShape'\n        }\n      },\n      setScopeRow: {\n        defaultValue: null,\n        description: 'Indicates whether the cell should be marked as the heading for its row',\n        name: 'setScopeRow',\n        parent: {\n          fileName: 'eui/src/components/table/table_row_cell.tsx',\n          name: 'EuiTableRowCellProps'\n        },\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      }\n    },\n    extendedInterfaces: ['CommonProps', 'TdHTMLAttributes', 'HTMLAttributes', 'AriaAttributes', 'DOMAttributes', 'EuiTableRowCellSharedPropsShape', 'EuiTableRowCellProps']\n  };\n} catch (e) {}"]}]}