{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\basic_table\\table_types.ts","dependencies":[{"path":"D:\\work\\eui\\src\\components\\basic_table\\table_types.ts","mtime":1649070093298},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":""},{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ReactElement, ReactNode, TdHTMLAttributes } from 'react';\nimport { Direction, HorizontalAlignment } from '../../services';\nimport { Pagination } from './pagination_bar';\nimport { Action } from './action_types';\nimport { Primitive } from '../../services/sort/comparators';\nimport { CommonProps } from '../common';\n\nexport type ItemId<T> = string | number | ((item: T) => string);\nexport type ItemIdResolved = string | number;\n\nexport type EuiTableDataType =\n  | 'auto'\n  | 'string'\n  | 'number'\n  | 'boolean'\n  | 'date';\n\nexport interface EuiTableFooterProps<T> {\n  items: T[];\n  pagination?: Pagination;\n}\nexport interface EuiTableFieldDataColumnType<T>\n  extends CommonProps,\n    TdHTMLAttributes<HTMLTableDataCellElement> {\n  /**\n   * A field of the item (may be a nested field)\n   */\n  field: keyof T | string; // supports outer.inner key paths\n  /**\n   * The display name of the column\n   */\n  name: ReactNode;\n  /**\n   * A description of the column (will be presented as a title over the column header)\n   */\n  description?: string;\n  /**\n   * Describes the data types of the displayed value (serves as a rendering hint for the table)\n   */\n  dataType?: EuiTableDataType;\n  /**\n   * A CSS width property. Hints for the required width of the column (e.g. \"30%\", \"100px\", etc..)\n   */\n  width?: string;\n  /**\n   * Defines whether the user can sort on this column. If a function is provided, this function returns the value to sort against\n   */\n  sortable?: boolean | ((item: T) => Primitive);\n  isExpander?: boolean;\n  textOnly?: boolean;\n  /**\n   * Defines the horizontal alignment of the column\n   */\n  align?: HorizontalAlignment;\n  /**\n   * Indicates whether this column should truncate its content when it doesn't fit\n   */\n  truncateText?: boolean;\n  isMobileHeader?: boolean;\n  mobileOptions?: {\n    show?: boolean;\n    only?: boolean;\n    render?: (item: T) => ReactNode;\n    header?: boolean;\n  };\n  hideForMobile?: boolean;\n  /**\n   * Describe a custom renderer function for the content\n   */\n  render?: (value: any, record: T) => ReactNode;\n  /**\n   * Content to display in the footer beneath this column\n   */\n  footer?:\n    | string\n    | ReactElement\n    | ((props: EuiTableFooterProps<T>) => ReactNode);\n  /**\n   * Disables the user's ability to change the sort but still shows the current direction\n   */\n  readOnly?: boolean;\n}\n\nexport interface EuiTableComputedColumnType<T>\n  extends CommonProps,\n    TdHTMLAttributes<HTMLTableDataCellElement> {\n  /**\n   * A function that computes the value for each item and renders it\n   */\n  render: (record: T) => ReactNode;\n  /**\n   * The display name of the column\n   */\n  name?: ReactNode;\n  /**\n   * A description of the column (will be presented as a title over the column header\n   */\n  description?: string;\n  /**\n   * If provided, allows this column to be sorted on. Must return the value to sort against.\n   */\n  sortable?: (item: T) => Primitive;\n  /**\n   * A CSS width property. Hints for the required width of the column\n   */\n  width?: string;\n  /**\n   * Indicates whether this column should truncate its content when it doesn't fit\n   */\n  truncateText?: boolean;\n  isExpander?: boolean;\n  align?: HorizontalAlignment;\n  /**\n   * Disables the user's ability to change the sort but still shows the current direction\n   */\n  readOnly?: boolean;\n}\n\nexport interface EuiTableActionsColumnType<T> {\n  /**\n   * An array of one of the objects: #DefaultItemAction or #CustomItemAction\n   */\n  actions: Array<Action<T>>;\n  /**\n   * The display name of the column\n   */\n  name?: ReactNode;\n  /**\n   * A description of the column (will be presented as a title over the column header\n   */\n  description?: string;\n  /**\n   * A CSS width property. Hints for the required width of the column\n   */\n  width?: string;\n}\n\nexport interface EuiTableSortingType<T> {\n  /**\n   * Indicates the property/field to sort on\n   */\n  sort?: {\n    field: keyof T;\n    direction: Direction;\n  };\n  /**\n   * Enables/disables unsorting of table columns. Supported by EuiInMemoryTable.\n   */\n  allowNeutralSort?: boolean;\n  /**\n   * Enables the default sorting ability for each column.\n   */\n  enableAllColumns?: boolean;\n  /**\n   * Disables the user's ability to change the sort but still shows the current direction\n   */\n  readOnly?: boolean;\n}\n\nexport interface EuiTableSelectionType<T> {\n  /**\n   * A callback that will be called whenever the item selection changes\n   */\n  onSelectionChange?: (selection: T[]) => void;\n  /**\n   * A callback that is called per item to indicate whether it is selectable\n   */\n  selectable?: (item: T) => boolean;\n  /**\n   * A callback that is called per item to retrieve a message for its selectable state.We display these messages as a tooltip on an unselectable checkbox\n   */\n  selectableMessage?: (selectable: boolean, item: T) => string;\n  initialSelected?: T[];\n}\n"]}]}