{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\page\\page_header\\index.ts","dependencies":[{"path":"D:\\work\\eui\\src\\components\\page\\page_header\\index.ts","mtime":1649070093725},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/page/page_header/index.ts"],"names":["EuiPageHeader","EuiPageHeaderContent","EuiPageHeaderSection"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,aAAT,QAAkD,eAAlD;AACA,SACEC,oBADF,QAGO,uBAHP;AAIA,SACEC,oBADF,QAGO,uBAHP","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport { EuiPageHeader, EuiPageHeaderProps } from './page_header';\nexport {\n  EuiPageHeaderContent,\n  EuiPageHeaderContentProps,\n} from './page_header_content';\nexport {\n  EuiPageHeaderSection,\n  EuiPageHeaderSectionProps,\n} from './page_header_section';\n"]}]}