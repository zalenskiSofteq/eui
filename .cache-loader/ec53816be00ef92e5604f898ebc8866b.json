{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\collapsible_nav\\collapsible_nav.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\collapsible_nav\\collapsible_nav.tsx","mtime":1649070093324},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CgpmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0KCmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9CgpmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJ1bmRlZmluZWQiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH0KCi8qCiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvcgogKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aAogKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodAogKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyCiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOyB5b3UgbWF5CiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLAogKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbgogKiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkKICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlCiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMKICogdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwppbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnOwppbXBvcnQgUHJvcFR5cGVzIGZyb20gInByb3AtdHlwZXMiOwppbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJzsKaW1wb3J0IHsgaHRtbElkR2VuZXJhdG9yLCBpc1dpdGhpbk1pbkJyZWFrcG9pbnQsIHRocm90dGxlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMnOwppbXBvcnQgeyBFdWlGbHlvdXQgfSBmcm9tICcuLi9mbHlvdXQnOyAvLyBFeHRlbmQgYWxsIHRoZSBmbHlvdXQgcHJvcHMgZXhjZXB0IGBvbkNsb3NlYCBiZWNhdXNlIHdlIGhhbmRsZSB0aGlzIGludGVybmFsbHkKCmV4cG9ydCB2YXIgRXVpQ29sbGFwc2libGVOYXYgPSBmdW5jdGlvbiBFdWlDb2xsYXBzaWJsZU5hdihfcmVmKSB7CiAgdmFyIGlkID0gX3JlZi5pZCwKICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLAogICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSwKICAgICAgX3JlZiRpc0RvY2tlZCA9IF9yZWYuaXNEb2NrZWQsCiAgICAgIGlzRG9ja2VkID0gX3JlZiRpc0RvY2tlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGlzRG9ja2VkLAogICAgICBfcmVmJGlzT3BlbiA9IF9yZWYuaXNPcGVuLAogICAgICBpc09wZW4gPSBfcmVmJGlzT3BlbiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGlzT3BlbiwKICAgICAgYnV0dG9uID0gX3JlZi5idXR0b24sCiAgICAgIF9yZWYkc2hvd0J1dHRvbklmRG9jayA9IF9yZWYuc2hvd0J1dHRvbklmRG9ja2VkLAogICAgICBzaG93QnV0dG9uSWZEb2NrZWQgPSBfcmVmJHNob3dCdXR0b25JZkRvY2sgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRzaG93QnV0dG9uSWZEb2NrLAogICAgICBfcmVmJGRvY2tlZEJyZWFrcG9pbnQgPSBfcmVmLmRvY2tlZEJyZWFrcG9pbnQsCiAgICAgIGRvY2tlZEJyZWFrcG9pbnQgPSBfcmVmJGRvY2tlZEJyZWFrcG9pbnQgPT09IHZvaWQgMCA/ICdsJyA6IF9yZWYkZG9ja2VkQnJlYWtwb2ludCwKICAgICAgX3JlZiRhcyA9IF9yZWYuYXMsCiAgICAgIGFzID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ25hdicgOiBfcmVmJGFzLAogICAgICBfcmVmJHNpemUgPSBfcmVmLnNpemUsCiAgICAgIHNpemUgPSBfcmVmJHNpemUgPT09IHZvaWQgMCA/IDMyMCA6IF9yZWYkc2l6ZSwKICAgICAgX3JlZiRzaWRlID0gX3JlZi5zaWRlLAogICAgICBzaWRlID0gX3JlZiRzaWRlID09PSB2b2lkIDAgPyAnbGVmdCcgOiBfcmVmJHNpZGUsCiAgICAgIF9yZWYkcm9sZSA9IF9yZWYucm9sZSwKICAgICAgcm9sZSA9IF9yZWYkcm9sZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYkcm9sZSwKICAgICAgX3JlZiRvd25Gb2N1cyA9IF9yZWYub3duRm9jdXMsCiAgICAgIG93bkZvY3VzID0gX3JlZiRvd25Gb2N1cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkb3duRm9jdXMsCiAgICAgIF9yZWYkb3V0c2lkZUNsaWNrQ2xvcyA9IF9yZWYub3V0c2lkZUNsaWNrQ2xvc2VzLAogICAgICBvdXRzaWRlQ2xpY2tDbG9zZXMgPSBfcmVmJG91dHNpZGVDbGlja0Nsb3MgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJG91dHNpZGVDbGlja0Nsb3MsCiAgICAgIF9yZWYkY2xvc2VCdXR0b25Qb3NpdCA9IF9yZWYuY2xvc2VCdXR0b25Qb3NpdGlvbiwKICAgICAgY2xvc2VCdXR0b25Qb3NpdGlvbiA9IF9yZWYkY2xvc2VCdXR0b25Qb3NpdCA9PT0gdm9pZCAwID8gJ291dHNpZGUnIDogX3JlZiRjbG9zZUJ1dHRvblBvc2l0LAogICAgICBfcmVmJHBhZGRpbmdTaXplID0gX3JlZi5wYWRkaW5nU2l6ZSwKICAgICAgcGFkZGluZ1NpemUgPSBfcmVmJHBhZGRpbmdTaXplID09PSB2b2lkIDAgPyAnbm9uZScgOiBfcmVmJHBhZGRpbmdTaXplLAogICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsiaWQiLCAiY2hpbGRyZW4iLCAiY2xhc3NOYW1lIiwgImlzRG9ja2VkIiwgImlzT3BlbiIsICJidXR0b24iLCAic2hvd0J1dHRvbklmRG9ja2VkIiwgImRvY2tlZEJyZWFrcG9pbnQiLCAiYXMiLCAic2l6ZSIsICJzaWRlIiwgInJvbGUiLCAib3duRm9jdXMiLCAib3V0c2lkZUNsaWNrQ2xvc2VzIiwgImNsb3NlQnV0dG9uUG9zaXRpb24iLCAicGFkZGluZ1NpemUiXSk7CgogIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShpZCB8fCBodG1sSWRHZW5lcmF0b3IoKSgnZXVpQ29sbGFwc2libGVOYXYnKSksCiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDEpLAogICAgICBmbHlvdXRJRCA9IF91c2VTdGF0ZTJbMF07CiAgLyoqCiAgICogU2V0dGluZyB0aGUgaW5pdGlhbCBzdGF0ZSBvZiBwdXNoZWQgYmFzZWQgb24gdGhlIGB0eXBlYCBwcm9wCiAgICogYW5kIGlmIHRoZSBjdXJyZW50IHdpbmRvdyBzaXplIGlzIGxhcmdlIGVub3VnaCAobGFyZ2VyIHRoYW4gYHB1c2hCcmVha3BvaW50YCkKICAgKi8KCgogIHZhciBfdXNlU3RhdGUzID0gdXNlU3RhdGUoaXNXaXRoaW5NaW5CcmVha3BvaW50KHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gMCA6IHdpbmRvdy5pbm5lcldpZHRoLCBkb2NrZWRCcmVha3BvaW50KSksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgd2luZG93SXNMYXJnZUVub3VnaFRvUHVzaCA9IF91c2VTdGF0ZTRbMF0sCiAgICAgIHNldFdpbmRvd0lzTGFyZ2VFbm91Z2hUb1B1c2ggPSBfdXNlU3RhdGU0WzFdOwoKICB2YXIgbmF2SXNEb2NrZWQgPSBpc0RvY2tlZCAmJiB3aW5kb3dJc0xhcmdlRW5vdWdoVG9QdXNoOwogIC8qKgogICAqIFdhdGNoZXIgYWRkZWQgdG8gdGhlIHdpbmRvdyB0byBtYWludGFpbiBgaXNQdXNoZWRgIHN0YXRlIGRlcGVuZGluZyBvbgogICAqIHRoZSB3aW5kb3cgc2l6ZSBjb21wYXJlZCB0byB0aGUgYHB1c2hCcmVha3BvaW50YAogICAqLwoKICB2YXIgZnVuY3Rpb25Ub0NhbGxPbldpbmRvd1Jlc2l6ZSA9IHRocm90dGxlKGZ1bmN0aW9uICgpIHsKICAgIGlmIChpc1dpdGhpbk1pbkJyZWFrcG9pbnQod2luZG93LmlubmVyV2lkdGgsIGRvY2tlZEJyZWFrcG9pbnQpKSB7CiAgICAgIHNldFdpbmRvd0lzTGFyZ2VFbm91Z2hUb1B1c2godHJ1ZSk7CiAgICB9IGVsc2UgewogICAgICBzZXRXaW5kb3dJc0xhcmdlRW5vdWdoVG9QdXNoKGZhbHNlKTsKICAgIH0gLy8gcmVhY3RzIGV2ZXJ5IDUwbXMgdG8gcmVzaXplIGNoYW5nZXMgYW5kIGFsd2F5cyBnZXRzIHRoZSBmaW5hbCB1cGRhdGUKCiAgfSwgNTApOwogIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7CiAgICBpZiAoaXNEb2NrZWQpIHsKICAgICAgLy8gT25seSBhZGQgdGhlIGV2ZW50IGxpc3RlbmVyIGlmIHdlJ2xsIG5lZWQgdG8gYWNjb21tb2RhdGUgd2l0aCBwYWRkaW5nCiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvblRvQ2FsbE9uV2luZG93UmVzaXplKTsKICAgIH0KCiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICBpZiAoaXNEb2NrZWQpIHsKICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb25Ub0NhbGxPbldpbmRvd1Jlc2l6ZSk7CiAgICAgIH0KICAgIH07CiAgfSwgW2lzRG9ja2VkLCBmdW5jdGlvblRvQ2FsbE9uV2luZG93UmVzaXplXSk7CiAgdmFyIGNsYXNzZXMgPSBjbGFzc05hbWVzKCdldWlDb2xsYXBzaWJsZU5hdicsIGNsYXNzTmFtZSk7IC8vIFNob3cgYSB0cmlnZ2VyIGJ1dHRvbiBpZiBvbmUgd2FzIHBhc3NlZCBidXQKICAvLyBub3QgaWYgbmF2SXNEb2NrZWQgYW5kIHNob3dCdXR0b25JZkRvY2tlZCBpcyBmYWxzZQoKICB2YXIgdHJpZ2dlciA9IG5hdklzRG9ja2VkICYmICFzaG93QnV0dG9uSWZEb2NrZWQgPyB1bmRlZmluZWQgOiBidXR0b24gJiYgLyojX19QVVJFX18qL2Nsb25lRWxlbWVudChidXR0b24sIHsKICAgICdhcmlhLWNvbnRyb2xzJzogZmx5b3V0SUQsCiAgICAnYXJpYS1leHBhbmRlZCc6IGlzT3BlbiwKICAgICdhcmlhLXByZXNzZWQnOiBpc09wZW4sCiAgICAvLyBXaGVuIEV1aU91dHNpZGVDbGlja0RldGVjdG9yIGlzIGVuYWJsZWQsIHdlIGRvbid0IHdhbnQgYm90aCB0aGUgdG9nZ2xlIGJ1dHRvbiBhbmQgZG9jdW1lbnQgdG91Y2hlcy9jbGlja3MgdG8gaGFwcGVuLCB0aGV5J2xsIGNhbmNlbCBlYWNob3RoZXIgb3V0CiAgICBvblRvdWNoRW5kOiBmdW5jdGlvbiBvblRvdWNoRW5kKGUpIHsKICAgICAgZS5uYXRpdmVFdmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsKICAgIH0sCiAgICBvbk1vdXNlVXBDYXB0dXJlOiBmdW5jdGlvbiBvbk1vdXNlVXBDYXB0dXJlKGUpIHsKICAgICAgZS5uYXRpdmVFdmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsKICAgIH0KICB9KTsKICB2YXIgZmx5b3V0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRXVpRmx5b3V0LCBfZXh0ZW5kcyh7CiAgICBpZDogZmx5b3V0SUQsCiAgICBjbGFzc05hbWU6IGNsYXNzZXMgLy8gRmx5b3V0IHByb3BzIHdlIHNldCBkaWZmZXJlbnQgZGVmYXVsdHMgZm9yCiAgICAsCiAgICBhczogYXMsCiAgICBzaXplOiBzaXplLAogICAgc2lkZTogc2lkZSwKICAgIHJvbGU6IHJvbGUsCiAgICBvd25Gb2N1czogb3duRm9jdXMsCiAgICBvdXRzaWRlQ2xpY2tDbG9zZXM6IG91dHNpZGVDbGlja0Nsb3NlcywKICAgIGNsb3NlQnV0dG9uUG9zaXRpb246IGNsb3NlQnV0dG9uUG9zaXRpb24sCiAgICBwYWRkaW5nU2l6ZTogcGFkZGluZ1NpemUKICB9LCByZXN0LCB7CiAgICAvLyBQcm9wcyBkZXBlbmRlbnQgb24gaW50ZXJuYWwgZG9ja2VkIHN0YXR1cwogICAgdHlwZTogbmF2SXNEb2NrZWQgPyAncHVzaCcgOiAnb3ZlcmxheScsCiAgICBoaWRlQ2xvc2VCdXR0b246IG5hdklzRG9ja2VkLAogICAgcHVzaE1pbkJyZWFrcG9pbnQ6IGRvY2tlZEJyZWFrcG9pbnQKICB9KSwgY2hpbGRyZW4pOwogIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgdHJpZ2dlciwgKGlzT3BlbiB8fCBuYXZJc0RvY2tlZCkgJiYgZmx5b3V0KTsKfTsKRXVpQ29sbGFwc2libGVOYXYucHJvcFR5cGVzID0gewogIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZywKICAiYXJpYS1sYWJlbCI6IFByb3BUeXBlcy5zdHJpbmcsCiAgImRhdGEtdGVzdC1zdWJqIjogUHJvcFR5cGVzLnN0cmluZywKCiAgLyoqCiAgICAgICAqIFNldHMgdGhlIEhUTUwgZWxlbWVudCBmb3IgYEV1aUZseW91dGAKICAgICAgICovCiAgYXM6IFByb3BUeXBlcy5hbnksCiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwKCiAgLyoqCiAgICAgKiBEZWZpbmVzIHRoZSB3aWR0aCBvZiB0aGUgcGFuZWwuCiAgICAgKiBQYXNzIGEgcHJlZGVmaW5lZCBzaXplIG9mIGBzIHwgbSB8IGxgLCBvciBwYXNzIGFueSBudW1iZXIvc3RyaW5nIGNvbXBhdGlibGUgd2l0aCB0aGUgQ1NTIGB3aWR0aGAgYXR0cmlidXRlCiAgICAgKi8KICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsIFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZF0pLAoKICAvKioKICAgICAqIFNldHMgdGhlIG1heC13aWR0aCBvZiB0aGUgcGFuZWwsCiAgICAgKiBzZXQgdG8gYHRydWVgIHRvIHVzZSB0aGUgZGVmYXVsdCBzaXplLAogICAgICogc2V0IHRvIGBmYWxzZWAgdG8gbm90IHJlc3RyaWN0IHRoZSB3aWR0aCwKICAgICAqIHNldCB0byBhIG51bWJlciBmb3IgYSBjdXN0b20gd2lkdGggaW4gcHgsCiAgICAgKiBzZXQgdG8gYSBzdHJpbmcgZm9yIGEgY3VzdG9tIHdpZHRoIGluIGN1c3RvbSBtZWFzdXJlbWVudC4KICAgICAqLwogIG1heFdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLCBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZF0pLAoKICAvKioKICAgICAqIEN1c3RvbWl6ZSB0aGUgcGFkZGluZyBhcm91bmQgdGhlIGNvbnRlbnQgb2YgdGhlIGZseW91dCBoZWFkZXIsIGJvZHkgYW5kIGZvb3RlcgogICAgICovCiAgcGFkZGluZ1NpemU6IFByb3BUeXBlcy5hbnksCgogIC8qKgogICAgICogQWRkcyBhbiBFdWlPdmVybGF5TWFzayBhbmQgd3JhcHMgaW4gYW4gRXVpUG9ydGFsCiAgICAgKi8KICBvd25Gb2N1czogUHJvcFR5cGVzLmJvb2wsCgogIC8qKgogICAgICogSGlkZXMgdGhlIGRlZmF1bHQgY2xvc2UgYnV0dG9uLiBZb3UgbXVzdCBwcm92aWRlIGFub3RoZXIgY2xvc2UgYnV0dG9uIHNvbWV3aGVyZSB3aXRoaW4gdGhlIGZseW91dC4KICAgICAqLwogIGhpZGVDbG9zZUJ1dHRvbjogUHJvcFR5cGVzLmJvb2wsCgogIC8qKgogICAgICogRXh0ZW5kcyBFdWlCdXR0b25JY29uUHJvcHMgb250byB0aGUgY2xvc2UgYnV0dG9uCiAgICAgKi8KICBjbG9zZUJ1dHRvblByb3BzOiBQcm9wVHlwZXMuYW55LAoKICAvKioKICAgICAqIFBvc2l0aW9uIG9mIGNsb3NlIGJ1dHRvbi4KICAgICAqIGBpbnNpZGVgOiBGbG9hdGluZyB0byBqdXN0IGluc2lkZSB0aGUgZmx5b3V0LCBhbHdheXMgdG9wIHJpZ2h0OwogICAgICogYG91dHNpZGVgOiBGbG9hdGluZyBqdXN0IG91dHNpZGUgdGhlIGZseW91dCBuZWFyIHRoZSB0b3AgKHNpZGUgZGVwZW5kZW50IG9uIGBzaWRlYCkuIEhlbHBmdWwgd2hlbiB0aGUgY2xvc2UgYnV0dG9uIG1heSBjb3ZlciBvdGhlciBpbnRlcmFjdGFibGUgY29udGVudC4KICAgICAqLwogIGNsb3NlQnV0dG9uUG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbImluc2lkZSIsICJvdXRzaWRlIl0pLAoKICAvKioKICAgICAqIEFkanVzdG1lbnRzIHRvIHRoZSBFdWlPdmVybGF5TWFzayB0aGF0IGlzIGFkZGVkIHdoZW4gYG93bkZvY3VzID0gdHJ1ZWAKICAgICAqLwogIG1hc2tQcm9wczogUHJvcFR5cGVzLnNoYXBlKHsKICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZywKICAgICJhcmlhLWxhYmVsIjogUHJvcFR5cGVzLnN0cmluZywKICAgICJkYXRhLXRlc3Qtc3ViaiI6IFByb3BUeXBlcy5zdHJpbmcsCgogICAgLyoqCiAgICAgICAqIEZ1bmN0aW9uIHRoYXQgYXBwbGllcyB0byBjbGlja2luZyB0aGUgbWFzayBpdHNlbGYgYW5kIG5vdCB0aGUgY2hpbGRyZW4KICAgICAgICovCiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYywKCiAgICAvKioKICAgICAgICogUmVhY3ROb2RlIHRvIHJlbmRlciBhcyB0aGlzIGNvbXBvbmVudCdzIGNvbnRlbnQKICAgICAgICovCiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsCgogICAgLyoqCiAgICAgICAqIFNob3VsZCB0aGUgbWFzayB2aXN1YWxseSBzaXQgYWJvdmUgb3IgYmVsb3cgdGhlIEV1aUhlYWRlciAoY29udHJvbGxlZCBieSB6LWluZGV4KQogICAgICAgKi8KICAgIGhlYWRlclppbmRleExvY2F0aW9uOiBQcm9wVHlwZXMub25lT2YoWyJhYm92ZSIsICJiZWxvdyJdKQogIH0pLAoKICAvKioKICAgICAqIEZvcmNlcyB0aGlzIGludGVyYWN0aW9uIG9uIHRoZSBtYXNrIG92ZXJsYXkgb3IgYm9keSBjb250ZW50LgogICAgICogRGVmYXVsdHMgZGVwZW5kIG9uIGBvd25Gb2N1c2AgYW5kIGB0eXBlYCB2YWx1ZXMKICAgICAqLwogIG91dHNpZGVDbGlja0Nsb3NlczogUHJvcFR5cGVzLmJvb2wsCgogIC8qKgogICAgICogV2hpY2ggc2lkZSBvZiB0aGUgd2luZG93IHRvIGF0dGFjaCB0by4KICAgICAqIFRoZSBgbGVmdGAgb3B0aW9uIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIG5hdmlnYXRpb24uCiAgICAgKi8KICBzaWRlOiBQcm9wVHlwZXMuYW55LAoKICAvKioKICAgICAqIERlZmF1bHRzIHRvIGBkaWFsb2dgIHdoaWNoIGlzIGJlc3QgZm9yIG1vc3QgY2FzZXMgb2YgdGhlIGZseW91dC4KICAgICAqIE90aGVyd2lzZSBwYXNzIGluIHlvdXIgb3duLCBhcmlhLXJvbGUsIG9yIGBudWxsYCB0byByZW1vdmUgaXQgYW5kIHVzZSB0aGUgc2VtYW50aWMgYGFzYCBlbGVtZW50IGluc3RlYWQKICAgICAqLwogIHJvbGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbbnVsbF0pLCBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRdKSwKCiAgLyoqCiAgICAgKiBOYW1lZCBicmVha3BvaW50IG9yIHBpeGVsIHZhbHVlIGZvciBjdXN0b21pemluZyB0aGUgbWluaW11bSB3aW5kb3cgd2lkdGggdG8gZW5hYmxlIGRvY2tpbmcKICAgICAqLwogIHB1c2hNaW5CcmVha3BvaW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWyJ4cyIsICJzIiwgIm0iLCAibCIsICJ4bCJdKS5pc1JlcXVpcmVkLCBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRdKSwKICBzdHlsZTogUHJvcFR5cGVzLmFueSwKCiAgLyoqCiAgICAgKiBSZWFjdE5vZGUgdG8gcmVuZGVyIGFzIHRoaXMgY29tcG9uZW50J3MgY29udGVudAogICAgICovCiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLAoKICAvKioKICAgICAqIFNob3dzIHRoZSBuYXZpZ2F0aW9uIGZseW91dAogICAgICovCiAgaXNPcGVuOiBQcm9wVHlwZXMuYm9vbCwKCiAgLyoqCiAgICAgKiBLZWVwcyBuYXZpZ2F0aW9uIGZseW91dCB2aXNpYmxlIGFuZCBwdXNoIGA8Ym9keT5gIGNvbnRlbnQgdmlhIHBhZGRpbmcKICAgICAqLwogIGlzRG9ja2VkOiBQcm9wVHlwZXMuYm9vbCwKICBkb2NrZWRCcmVha3BvaW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWyJ4cyIsICJzIiwgIm0iLCAibCIsICJ4bCJdKS5pc1JlcXVpcmVkLCBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRdKSwKCiAgLyoqCiAgICAgKiBCdXR0b24gZm9yIGNvbnRyb2xsaW5nIHZpc2libGUgc3RhdGUgb2YgdGhlIG5hdgogICAgICovCiAgYnV0dG9uOiBQcm9wVHlwZXMuZWxlbWVudCwKCiAgLyoqCiAgICAgKiBLZWVwcyB0aGUgZGlzcGxheSBvZiB0b2dnbGUgYnV0dG9uIHdoZW4gaW4gZG9ja2VkIHN0YXRlCiAgICAgKi8KICBzaG93QnV0dG9uSWZEb2NrZWQ6IFByb3BUeXBlcy5ib29sCn07Cgp0cnkgewogIEV1aUNvbGxhcHNpYmxlTmF2Ll9fZG9jZ2VuSW5mbyA9IHsKICAgIGRlc2NyaXB0aW9uOiAnJywKICAgIGRpc3BsYXlOYW1lOiAnRXVpQ29sbGFwc2libGVOYXYnLAogICAgbWV0aG9kczogW10sCiAgICBwcm9wczogewogICAgICBjaGlsZHJlbjogewogICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbCwKICAgICAgICBkZXNjcmlwdGlvbjogIlJlYWN0Tm9kZSB0byByZW5kZXIgYXMgdGhpcyBjb21wb25lbnQncyBjb250ZW50IiwKICAgICAgICBuYW1lOiAnY2hpbGRyZW4nLAogICAgICAgIHBhcmVudDogewogICAgICAgICAgZmlsZU5hbWU6ICdldWkvbm9kZV9tb2R1bGVzL0B0eXBlcy9yZWFjdC9pbmRleC5kLnRzJywKICAgICAgICAgIG5hbWU6ICdET01BdHRyaWJ1dGVzJwogICAgICAgIH0sCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6IHsKICAgICAgICAgIG5hbWU6ICdSZWFjdE5vZGUnCiAgICAgICAgfQogICAgICB9LAogICAgICBjbGFzc05hbWU6IHsKICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGwsCiAgICAgICAgZGVzY3JpcHRpb246ICcnLAogICAgICAgIG5hbWU6ICdjbGFzc05hbWUnLAogICAgICAgIHBhcmVudDogewogICAgICAgICAgZmlsZU5hbWU6ICdldWkvc3JjL2NvbXBvbmVudHMvY29tbW9uLnRzJywKICAgICAgICAgIG5hbWU6ICdDb21tb25Qcm9wcycKICAgICAgICB9LAogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICBuYW1lOiAnc3RyaW5nJwogICAgICAgIH0KICAgICAgfSwKICAgICAgJ2FyaWEtbGFiZWwnOiB7CiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsLAogICAgICAgIGRlc2NyaXB0aW9uOiAnRGVmaW5lcyBhIHN0cmluZyB2YWx1ZSB0aGF0IGxhYmVscyB0aGUgY3VycmVudCBlbGVtZW50LlxuJyArICdAc2VlIGFyaWEtbGFiZWxsZWRieS4nLAogICAgICAgIG5hbWU6ICdhcmlhLWxhYmVsJywKICAgICAgICBwYXJlbnQ6IHsKICAgICAgICAgIGZpbGVOYW1lOiAnZXVpL3NyYy9jb21wb25lbnRzL2NvbW1vbi50cycsCiAgICAgICAgICBuYW1lOiAnQ29tbW9uUHJvcHMnCiAgICAgICAgfSwKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogewogICAgICAgICAgbmFtZTogJ3N0cmluZycKICAgICAgICB9CiAgICAgIH0sCiAgICAgICdkYXRhLXRlc3Qtc3Viaic6IHsKICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGwsCiAgICAgICAgZGVzY3JpcHRpb246ICcnLAogICAgICAgIG5hbWU6ICdkYXRhLXRlc3Qtc3ViaicsCiAgICAgICAgcGFyZW50OiB7CiAgICAgICAgICBmaWxlTmFtZTogJ2V1aS9zcmMvY29tcG9uZW50cy9jb21tb24udHMnLAogICAgICAgICAgbmFtZTogJ0NvbW1vblByb3BzJwogICAgICAgIH0sCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6IHsKICAgICAgICAgIG5hbWU6ICdzdHJpbmcnCiAgICAgICAgfQogICAgICB9LAogICAgICBwYWRkaW5nU2l6ZTogewogICAgICAgIGRlZmF1bHRWYWx1ZTogewogICAgICAgICAgdmFsdWU6ICdub25lJwogICAgICAgIH0sCiAgICAgICAgZGVzY3JpcHRpb246ICdDdXN0b21pemUgdGhlIHBhZGRpbmcgYXJvdW5kIHRoZSBjb250ZW50IG9mIHRoZSBmbHlvdXQgaGVhZGVyLCBib2R5IGFuZCBmb290ZXInLAogICAgICAgIG5hbWU6ICdwYWRkaW5nU2l6ZScsCiAgICAgICAgcGFyZW50OiB1bmRlZmluZWQsCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6IHsKICAgICAgICAgIG5hbWU6ICdlbnVtJywKICAgICAgICAgIHJhdzogJyJzIiB8ICJtIiB8ICJsIiB8ICJub25lIicsCiAgICAgICAgICB2YWx1ZTogW3sKICAgICAgICAgICAgdmFsdWU6ICcicyInCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIHZhbHVlOiAnIm0iJwogICAgICAgICAgfSwgewogICAgICAgICAgICB2YWx1ZTogJyJsIicKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgdmFsdWU6ICcibm9uZSInCiAgICAgICAgICB9XQogICAgICAgIH0KICAgICAgfSwKICAgICAgc2l6ZTogewogICAgICAgIGRlZmF1bHRWYWx1ZTogewogICAgICAgICAgdmFsdWU6ICczMjAnCiAgICAgICAgfSwKICAgICAgICBkZXNjcmlwdGlvbjogJ0RlZmluZXMgdGhlIHdpZHRoIG9mIHRoZSBwYW5lbC5cbicgKyAnUGFzcyBhIHByZWRlZmluZWQgc2l6ZSBvZiBgcyB8IG0gfCBsYCwgb3IgcGFzcyBhbnkgbnVtYmVyL3N0cmluZyBjb21wYXRpYmxlIHdpdGggdGhlIENTUyBgd2lkdGhgIGF0dHJpYnV0ZScsCiAgICAgICAgbmFtZTogJ3NpemUnLAogICAgICAgIHBhcmVudDogdW5kZWZpbmVkLAogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICBuYW1lOiAnc3RyaW5nIHwgbnVtYmVyJwogICAgICAgIH0KICAgICAgfSwKICAgICAgb25DbG9zZTogewogICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbCwKICAgICAgICBkZXNjcmlwdGlvbjogJycsCiAgICAgICAgbmFtZTogJ29uQ2xvc2UnLAogICAgICAgIHBhcmVudDogdW5kZWZpbmVkLAogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIHR5cGU6IHsKICAgICAgICAgIG5hbWU6ICcoKSA9PiB2b2lkJwogICAgICAgIH0KICAgICAgfSwKICAgICAgc2lkZTogewogICAgICAgIGRlZmF1bHRWYWx1ZTogewogICAgICAgICAgdmFsdWU6ICdsZWZ0JwogICAgICAgIH0sCiAgICAgICAgZGVzY3JpcHRpb246ICdXaGljaCBzaWRlIG9mIHRoZSB3aW5kb3cgdG8gYXR0YWNoIHRvLlxuJyArICdUaGUgYGxlZnRgIG9wdGlvbiBzaG91bGQgb25seSBiZSB1c2VkIGZvciBuYXZpZ2F0aW9uLicsCiAgICAgICAgbmFtZTogJ3NpZGUnLAogICAgICAgIHBhcmVudDogdW5kZWZpbmVkLAogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICBuYW1lOiAnZW51bScsCiAgICAgICAgICByYXc6ICdUb2FzdFNpZGUnLAogICAgICAgICAgdmFsdWU6IFt7CiAgICAgICAgICAgIHZhbHVlOiAnImxlZnQiJwogICAgICAgICAgfSwgewogICAgICAgICAgICB2YWx1ZTogJyJyaWdodCInCiAgICAgICAgICB9XQogICAgICAgIH0KICAgICAgfSwKICAgICAgcmVmOiB7CiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsLAogICAgICAgIGRlc2NyaXB0aW9uOiAnJywKICAgICAgICBuYW1lOiAncmVmJywKICAgICAgICBwYXJlbnQ6IHVuZGVmaW5lZCwKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogewogICAgICAgICAgbmFtZTogJ1JlZjxIVE1MRGl2RWxlbWVudD4nCiAgICAgICAgfQogICAgICB9LAogICAgICBvd25Gb2N1czogewogICAgICAgIGRlZmF1bHRWYWx1ZTogewogICAgICAgICAgdmFsdWU6ICd0cnVlJwogICAgICAgIH0sCiAgICAgICAgZGVzY3JpcHRpb246ICdBZGRzIGFuIEV1aU92ZXJsYXlNYXNrIGFuZCB3cmFwcyBpbiBhbiBFdWlQb3J0YWwnLAogICAgICAgIG5hbWU6ICdvd25Gb2N1cycsCiAgICAgICAgcGFyZW50OiB1bmRlZmluZWQsCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6IHsKICAgICAgICAgIG5hbWU6ICdib29sZWFuJwogICAgICAgIH0KICAgICAgfSwKICAgICAgbWF4V2lkdGg6IHsKICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGwsCiAgICAgICAgZGVzY3JpcHRpb246ICdTZXRzIHRoZSBtYXgtd2lkdGggb2YgdGhlIHBhbmVsLFxuJyArICdzZXQgdG8gYHRydWVgIHRvIHVzZSB0aGUgZGVmYXVsdCBzaXplLFxuJyArICdzZXQgdG8gYGZhbHNlYCB0byBub3QgcmVzdHJpY3QgdGhlIHdpZHRoLFxuJyArICdzZXQgdG8gYSBudW1iZXIgZm9yIGEgY3VzdG9tIHdpZHRoIGluIHB4LFxuJyArICdzZXQgdG8gYSBzdHJpbmcgZm9yIGEgY3VzdG9tIHdpZHRoIGluIGN1c3RvbSBtZWFzdXJlbWVudC4nLAogICAgICAgIG5hbWU6ICdtYXhXaWR0aCcsCiAgICAgICAgcGFyZW50OiB1bmRlZmluZWQsCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6IHsKICAgICAgICAgIG5hbWU6ICdib29sZWFuIHwgbnVtYmVyIHwgc3RyaW5nJwogICAgICAgIH0KICAgICAgfSwKICAgICAgY2xvc2VCdXR0b25Qcm9wczogewogICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbCwKICAgICAgICBkZXNjcmlwdGlvbjogJ0V4dGVuZHMgRXVpQnV0dG9uSWNvblByb3BzIG9udG8gdGhlIGNsb3NlIGJ1dHRvbicsCiAgICAgICAgbmFtZTogJ2Nsb3NlQnV0dG9uUHJvcHMnLAogICAgICAgIHBhcmVudDogdW5kZWZpbmVkLAogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICBuYW1lOiAnUGFydGlhbDxFdWlCdXR0b25JY29uUHJvcHNGb3JCdXR0b24+JwogICAgICAgIH0KICAgICAgfSwKICAgICAgYXM6IHsKICAgICAgICBkZWZhdWx0VmFsdWU6IHsKICAgICAgICAgIHZhbHVlOiAiJ25hdicgYXMgRXVpQ29sbGFwc2libGVOYXZQcm9wc1snYXMnXSIKICAgICAgICB9LAogICAgICAgIGRlc2NyaXB0aW9uOiAnU2V0cyB0aGUgSFRNTCBlbGVtZW50IGZvciBgRXVpRmx5b3V0YCcsCiAgICAgICAgbmFtZTogJ2FzJywKICAgICAgICBwYXJlbnQ6IHVuZGVmaW5lZCwKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogewogICAgICAgICAgbmFtZTogJyJkaXYiJwogICAgICAgIH0KICAgICAgfSwKICAgICAgaGlkZUNsb3NlQnV0dG9uOiB7CiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsLAogICAgICAgIGRlc2NyaXB0aW9uOiAnSGlkZXMgdGhlIGRlZmF1bHQgY2xvc2UgYnV0dG9uLiBZb3UgbXVzdCBwcm92aWRlIGFub3RoZXIgY2xvc2UgYnV0dG9uIHNvbWV3aGVyZSB3aXRoaW4gdGhlIGZseW91dC4nLAogICAgICAgIG5hbWU6ICdoaWRlQ2xvc2VCdXR0b24nLAogICAgICAgIHBhcmVudDogdW5kZWZpbmVkLAogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICBuYW1lOiAnYm9vbGVhbicKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGNsb3NlQnV0dG9uUG9zaXRpb246IHsKICAgICAgICBkZWZhdWx0VmFsdWU6IHsKICAgICAgICAgIHZhbHVlOiAnb3V0c2lkZScKICAgICAgICB9LAogICAgICAgIGRlc2NyaXB0aW9uOiAnUG9zaXRpb24gb2YgY2xvc2UgYnV0dG9uLlxuJyArICdgaW5zaWRlYDogRmxvYXRpbmcgdG8ganVzdCBpbnNpZGUgdGhlIGZseW91dCwgYWx3YXlzIHRvcCByaWdodDtcbicgKyAnYG91dHNpZGVgOiBGbG9hdGluZyBqdXN0IG91dHNpZGUgdGhlIGZseW91dCBuZWFyIHRoZSB0b3AgKHNpZGUgZGVwZW5kZW50IG9uIGBzaWRlYCkuIEhlbHBmdWwgd2hlbiB0aGUgY2xvc2UgYnV0dG9uIG1heSBjb3ZlciBvdGhlciBpbnRlcmFjdGFibGUgY29udGVudC4nLAogICAgICAgIG5hbWU6ICdjbG9zZUJ1dHRvblBvc2l0aW9uJywKICAgICAgICBwYXJlbnQ6IHVuZGVmaW5lZCwKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogewogICAgICAgICAgbmFtZTogJ2VudW0nLAogICAgICAgICAgcmF3OiAnImluc2lkZSIgfCAib3V0c2lkZSInLAogICAgICAgICAgdmFsdWU6IFt7CiAgICAgICAgICAgIHZhbHVlOiAnImluc2lkZSInCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIHZhbHVlOiAnIm91dHNpZGUiJwogICAgICAgICAgfV0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIG1hc2tQcm9wczogewogICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbCwKICAgICAgICBkZXNjcmlwdGlvbjogJ0FkanVzdG1lbnRzIHRvIHRoZSBFdWlPdmVybGF5TWFzayB0aGF0IGlzIGFkZGVkIHdoZW4gYG93bkZvY3VzID0gdHJ1ZWAnLAogICAgICAgIG5hbWU6ICdtYXNrUHJvcHMnLAogICAgICAgIHBhcmVudDogdW5kZWZpbmVkLAogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICBuYW1lOiAnRXVpT3ZlcmxheU1hc2tQcm9wcycKICAgICAgICB9CiAgICAgIH0sCiAgICAgIG91dHNpZGVDbGlja0Nsb3NlczogewogICAgICAgIGRlZmF1bHRWYWx1ZTogewogICAgICAgICAgdmFsdWU6ICd0cnVlJwogICAgICAgIH0sCiAgICAgICAgZGVzY3JpcHRpb246ICdGb3JjZXMgdGhpcyBpbnRlcmFjdGlvbiBvbiB0aGUgbWFzayBvdmVybGF5IG9yIGJvZHkgY29udGVudC5cbicgKyAnRGVmYXVsdHMgZGVwZW5kIG9uIGBvd25Gb2N1c2AgYW5kIGB0eXBlYCB2YWx1ZXMnLAogICAgICAgIG5hbWU6ICdvdXRzaWRlQ2xpY2tDbG9zZXMnLAogICAgICAgIHBhcmVudDogdW5kZWZpbmVkLAogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICBuYW1lOiAnYm9vbGVhbicKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHB1c2hNaW5CcmVha3BvaW50OiB7CiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsLAogICAgICAgIGRlc2NyaXB0aW9uOiAnTmFtZWQgYnJlYWtwb2ludCBvciBwaXhlbCB2YWx1ZSBmb3IgY3VzdG9taXppbmcgdGhlIG1pbmltdW0gd2luZG93IHdpZHRoIHRvIGVuYWJsZSB0aGUgYHB1c2hgIHR5cGUnLAogICAgICAgIG5hbWU6ICdwdXNoTWluQnJlYWtwb2ludCcsCiAgICAgICAgcGFyZW50OiB1bmRlZmluZWQsCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6IHsKICAgICAgICAgIG5hbWU6ICdudW1iZXIgfCAieHMiIHwgInMiIHwgIm0iIHwgImwiIHwgInhsIicKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGlzT3BlbjogewogICAgICAgIGRlZmF1bHRWYWx1ZTogewogICAgICAgICAgdmFsdWU6ICdmYWxzZScKICAgICAgICB9LAogICAgICAgIGRlc2NyaXB0aW9uOiAnU2hvd3MgdGhlIG5hdmlnYXRpb24gZmx5b3V0JywKICAgICAgICBuYW1lOiAnaXNPcGVuJywKICAgICAgICBwYXJlbnQ6IHVuZGVmaW5lZCwKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogewogICAgICAgICAgbmFtZTogJ2Jvb2xlYW4nCiAgICAgICAgfQogICAgICB9LAogICAgICBpc0RvY2tlZDogewogICAgICAgIGRlZmF1bHRWYWx1ZTogewogICAgICAgICAgdmFsdWU6ICdmYWxzZScKICAgICAgICB9LAogICAgICAgIGRlc2NyaXB0aW9uOiAnS2VlcHMgbmF2aWdhdGlvbiBmbHlvdXQgdmlzaWJsZSBhbmQgcHVzaCBgPGJvZHk+YCBjb250ZW50IHZpYSBwYWRkaW5nJywKICAgICAgICBuYW1lOiAnaXNEb2NrZWQnLAogICAgICAgIHBhcmVudDogdW5kZWZpbmVkLAogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICBuYW1lOiAnYm9vbGVhbicKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRvY2tlZEJyZWFrcG9pbnQ6IHsKICAgICAgICBkZWZhdWx0VmFsdWU6IHsKICAgICAgICAgIHZhbHVlOiAnbCcKICAgICAgICB9LAogICAgICAgIGRlc2NyaXB0aW9uOiAnTmFtZWQgYnJlYWtwb2ludCBvciBwaXhlbCB2YWx1ZSBmb3IgY3VzdG9taXppbmcgdGhlIG1pbmltdW0gd2luZG93IHdpZHRoIHRvIGVuYWJsZSBkb2NraW5nJywKICAgICAgICBuYW1lOiAnZG9ja2VkQnJlYWtwb2ludCcsCiAgICAgICAgcGFyZW50OiB1bmRlZmluZWQsCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6IHsKICAgICAgICAgIG5hbWU6ICdudW1iZXIgfCAieHMiIHwgInMiIHwgIm0iIHwgImwiIHwgInhsIicKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGJ1dHRvbjogewogICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbCwKICAgICAgICBkZXNjcmlwdGlvbjogJ0J1dHRvbiBmb3IgY29udHJvbGxpbmcgdmlzaWJsZSBzdGF0ZSBvZiB0aGUgbmF2JywKICAgICAgICBuYW1lOiAnYnV0dG9uJywKICAgICAgICBwYXJlbnQ6IHVuZGVmaW5lZCwKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogewogICAgICAgICAgbmFtZTogJ1JlYWN0RWxlbWVudCcKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHNob3dCdXR0b25JZkRvY2tlZDogewogICAgICAgIGRlZmF1bHRWYWx1ZTogewogICAgICAgICAgdmFsdWU6ICdmYWxzZScKICAgICAgICB9LAogICAgICAgIGRlc2NyaXB0aW9uOiAnS2VlcHMgdGhlIGRpc3BsYXkgb2YgdG9nZ2xlIGJ1dHRvbiB3aGVuIGluIGRvY2tlZCBzdGF0ZScsCiAgICAgICAgbmFtZTogJ3Nob3dCdXR0b25JZkRvY2tlZCcsCiAgICAgICAgcGFyZW50OiB1bmRlZmluZWQsCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6IHsKICAgICAgICAgIG5hbWU6ICdib29sZWFuJwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGV4dGVuZGVkSW50ZXJmYWNlczogWydIVE1MQXR0cmlidXRlcycsICdBcmlhQXR0cmlidXRlcycsICdET01BdHRyaWJ1dGVzJywgJ0NvbW1vblByb3BzJywgJ0F0dHJpYnV0ZXMnXQogIH07Cn0gY2F0Y2ggKGUpIHt9"},{"version":3,"sources":["D:/work/eui/src/components/collapsible_nav/collapsible_nav.tsx"],"names":["React","cloneElement","useEffect","useState","classNames","htmlIdGenerator","isWithinMinBreakpoint","throttle","EuiFlyout","EuiCollapsibleNav","id","children","className","isDocked","isOpen","button","showButtonIfDocked","dockedBreakpoint","as","size","side","role","ownFocus","outsideClickCloses","closeButtonPosition","paddingSize","rest","flyoutID","window","innerWidth","windowIsLargeEnoughToPush","setWindowIsLargeEnoughToPush","navIsDocked","functionToCallOnWindowResize","addEventListener","removeEventListener","classes","trigger","undefined","onTouchEnd","e","nativeEvent","stopImmediatePropagation","onMouseUpCapture","flyout"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { cloneElement, useEffect, useState } from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nimport { htmlIdGenerator, isWithinMinBreakpoint, throttle } from '../../services';\nimport { EuiFlyout } from '../flyout'; // Extend all the flyout props except `onClose` because we handle this internally\n\nexport var EuiCollapsibleNav = ({\n  id,\n  children,\n  className,\n  isDocked = false,\n  isOpen = false,\n  button,\n  showButtonIfDocked = false,\n  dockedBreakpoint = 'l',\n  // Setting different EuiFlyout defaults\n  as = 'nav',\n  size = 320,\n  side = 'left',\n  role = null,\n  ownFocus = true,\n  outsideClickCloses = true,\n  closeButtonPosition = 'outside',\n  paddingSize = 'none',\n  ...rest\n}) => {\n  const [flyoutID] = useState(id || htmlIdGenerator()('euiCollapsibleNav'));\n  /**\n   * Setting the initial state of pushed based on the `type` prop\n   * and if the current window size is large enough (larger than `pushBreakpoint`)\n   */\n\n  const [windowIsLargeEnoughToPush, setWindowIsLargeEnoughToPush] = useState(isWithinMinBreakpoint(typeof window === 'undefined' ? 0 : window.innerWidth, dockedBreakpoint));\n  const navIsDocked = isDocked && windowIsLargeEnoughToPush;\n  /**\n   * Watcher added to the window to maintain `isPushed` state depending on\n   * the window size compared to the `pushBreakpoint`\n   */\n\n  const functionToCallOnWindowResize = throttle(() => {\n    if (isWithinMinBreakpoint(window.innerWidth, dockedBreakpoint)) {\n      setWindowIsLargeEnoughToPush(true);\n    } else {\n      setWindowIsLargeEnoughToPush(false);\n    } // reacts every 50ms to resize changes and always gets the final update\n\n  }, 50);\n  useEffect(() => {\n    if (isDocked) {\n      // Only add the event listener if we'll need to accommodate with padding\n      window.addEventListener('resize', functionToCallOnWindowResize);\n    }\n\n    return () => {\n      if (isDocked) {\n        window.removeEventListener('resize', functionToCallOnWindowResize);\n      }\n    };\n  }, [isDocked, functionToCallOnWindowResize]);\n  const classes = classNames('euiCollapsibleNav', className); // Show a trigger button if one was passed but\n  // not if navIsDocked and showButtonIfDocked is false\n\n  const trigger = navIsDocked && !showButtonIfDocked ? undefined : button && cloneElement(button, {\n    'aria-controls': flyoutID,\n    'aria-expanded': isOpen,\n    'aria-pressed': isOpen,\n    // When EuiOutsideClickDetector is enabled, we don't want both the toggle button and document touches/clicks to happen, they'll cancel eachother out\n    onTouchEnd: e => {\n      e.nativeEvent.stopImmediatePropagation();\n    },\n    onMouseUpCapture: e => {\n      e.nativeEvent.stopImmediatePropagation();\n    }\n  });\n  const flyout = <EuiFlyout id={flyoutID} className={classes} // Flyout props we set different defaults for\n  as={as} size={size} side={side} role={role} ownFocus={ownFocus} outsideClickCloses={outsideClickCloses} closeButtonPosition={closeButtonPosition} paddingSize={paddingSize} {...rest} // Props dependent on internal docked status\n  type={navIsDocked ? 'push' : 'overlay'} hideCloseButton={navIsDocked} pushMinBreakpoint={dockedBreakpoint}>\n      {children}\n    </EuiFlyout>;\n  return <>\n      {trigger}\n      {(isOpen || navIsDocked) && flyout}\n    </>;\n};\nEuiCollapsibleNav.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n\n  /**\n       * Sets the HTML element for `EuiFlyout`\n       */\n  as: PropTypes.any,\n  onClose: PropTypes.func.isRequired,\n\n  /**\n     * Defines the width of the panel.\n     * Pass a predefined size of `s | m | l`, or pass any number/string compatible with the CSS `width` attribute\n     */\n  size: PropTypes.oneOfType([PropTypes.any.isRequired, PropTypes.any.isRequired]),\n\n  /**\n     * Sets the max-width of the panel,\n     * set to `true` to use the default size,\n     * set to `false` to not restrict the width,\n     * set to a number for a custom width in px,\n     * set to a string for a custom width in custom measurement.\n     */\n  maxWidth: PropTypes.oneOfType([PropTypes.bool.isRequired, PropTypes.number.isRequired, PropTypes.string.isRequired]),\n\n  /**\n     * Customize the padding around the content of the flyout header, body and footer\n     */\n  paddingSize: PropTypes.any,\n\n  /**\n     * Adds an EuiOverlayMask and wraps in an EuiPortal\n     */\n  ownFocus: PropTypes.bool,\n\n  /**\n     * Hides the default close button. You must provide another close button somewhere within the flyout.\n     */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n     * Extends EuiButtonIconProps onto the close button\n     */\n  closeButtonProps: PropTypes.any,\n\n  /**\n     * Position of close button.\n     * `inside`: Floating to just inside the flyout, always top right;\n     * `outside`: Floating just outside the flyout near the top (side dependent on `side`). Helpful when the close button may cover other interactable content.\n     */\n  closeButtonPosition: PropTypes.oneOf([\"inside\", \"outside\"]),\n\n  /**\n     * Adjustments to the EuiOverlayMask that is added when `ownFocus = true`\n     */\n  maskProps: PropTypes.shape({\n    className: PropTypes.string,\n    \"aria-label\": PropTypes.string,\n    \"data-test-subj\": PropTypes.string,\n\n    /**\n       * Function that applies to clicking the mask itself and not the children\n       */\n    onClick: PropTypes.func,\n\n    /**\n       * ReactNode to render as this component's content\n       */\n    children: PropTypes.node,\n\n    /**\n       * Should the mask visually sit above or below the EuiHeader (controlled by z-index)\n       */\n    headerZindexLocation: PropTypes.oneOf([\"above\", \"below\"])\n  }),\n\n  /**\n     * Forces this interaction on the mask overlay or body content.\n     * Defaults depend on `ownFocus` and `type` values\n     */\n  outsideClickCloses: PropTypes.bool,\n\n  /**\n     * Which side of the window to attach to.\n     * The `left` option should only be used for navigation.\n     */\n  side: PropTypes.any,\n\n  /**\n     * Defaults to `dialog` which is best for most cases of the flyout.\n     * Otherwise pass in your own, aria-role, or `null` to remove it and use the semantic `as` element instead\n     */\n  role: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.string.isRequired]),\n\n  /**\n     * Named breakpoint or pixel value for customizing the minimum window width to enable docking\n     */\n  pushMinBreakpoint: PropTypes.oneOfType([PropTypes.oneOf([\"xs\", \"s\", \"m\", \"l\", \"xl\"]).isRequired, PropTypes.number.isRequired]),\n  style: PropTypes.any,\n\n  /**\n     * ReactNode to render as this component's content\n     */\n  children: PropTypes.node,\n\n  /**\n     * Shows the navigation flyout\n     */\n  isOpen: PropTypes.bool,\n\n  /**\n     * Keeps navigation flyout visible and push `<body>` content via padding\n     */\n  isDocked: PropTypes.bool,\n  dockedBreakpoint: PropTypes.oneOfType([PropTypes.oneOf([\"xs\", \"s\", \"m\", \"l\", \"xl\"]).isRequired, PropTypes.number.isRequired]),\n\n  /**\n     * Button for controlling visible state of the nav\n     */\n  button: PropTypes.element,\n\n  /**\n     * Keeps the display of toggle button when in docked state\n     */\n  showButtonIfDocked: PropTypes.bool\n};\n\ntry {\n  EuiCollapsibleNav.__docgenInfo = {\n    description: '',\n    displayName: 'EuiCollapsibleNav',\n    methods: [],\n    props: {\n      children: {\n        defaultValue: null,\n        description: \"ReactNode to render as this component's content\",\n        name: 'children',\n        parent: {\n          fileName: 'eui/node_modules/@types/react/index.d.ts',\n          name: 'DOMAttributes'\n        },\n        required: false,\n        type: {\n          name: 'ReactNode'\n        }\n      },\n      className: {\n        defaultValue: null,\n        description: '',\n        name: 'className',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'aria-label': {\n        defaultValue: null,\n        description: 'Defines a string value that labels the current element.\\n' + '@see aria-labelledby.',\n        name: 'aria-label',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'data-test-subj': {\n        defaultValue: null,\n        description: '',\n        name: 'data-test-subj',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      paddingSize: {\n        defaultValue: {\n          value: 'none'\n        },\n        description: 'Customize the padding around the content of the flyout header, body and footer',\n        name: 'paddingSize',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'enum',\n          raw: '\"s\" | \"m\" | \"l\" | \"none\"',\n          value: [{\n            value: '\"s\"'\n          }, {\n            value: '\"m\"'\n          }, {\n            value: '\"l\"'\n          }, {\n            value: '\"none\"'\n          }]\n        }\n      },\n      size: {\n        defaultValue: {\n          value: '320'\n        },\n        description: 'Defines the width of the panel.\\n' + 'Pass a predefined size of `s | m | l`, or pass any number/string compatible with the CSS `width` attribute',\n        name: 'size',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'string | number'\n        }\n      },\n      onClose: {\n        defaultValue: null,\n        description: '',\n        name: 'onClose',\n        parent: undefined,\n        required: true,\n        type: {\n          name: '() => void'\n        }\n      },\n      side: {\n        defaultValue: {\n          value: 'left'\n        },\n        description: 'Which side of the window to attach to.\\n' + 'The `left` option should only be used for navigation.',\n        name: 'side',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'enum',\n          raw: 'ToastSide',\n          value: [{\n            value: '\"left\"'\n          }, {\n            value: '\"right\"'\n          }]\n        }\n      },\n      ref: {\n        defaultValue: null,\n        description: '',\n        name: 'ref',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'Ref<HTMLDivElement>'\n        }\n      },\n      ownFocus: {\n        defaultValue: {\n          value: 'true'\n        },\n        description: 'Adds an EuiOverlayMask and wraps in an EuiPortal',\n        name: 'ownFocus',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      maxWidth: {\n        defaultValue: null,\n        description: 'Sets the max-width of the panel,\\n' + 'set to `true` to use the default size,\\n' + 'set to `false` to not restrict the width,\\n' + 'set to a number for a custom width in px,\\n' + 'set to a string for a custom width in custom measurement.',\n        name: 'maxWidth',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean | number | string'\n        }\n      },\n      closeButtonProps: {\n        defaultValue: null,\n        description: 'Extends EuiButtonIconProps onto the close button',\n        name: 'closeButtonProps',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'Partial<EuiButtonIconPropsForButton>'\n        }\n      },\n      as: {\n        defaultValue: {\n          value: \"'nav' as EuiCollapsibleNavProps['as']\"\n        },\n        description: 'Sets the HTML element for `EuiFlyout`',\n        name: 'as',\n        parent: undefined,\n        required: false,\n        type: {\n          name: '\"div\"'\n        }\n      },\n      hideCloseButton: {\n        defaultValue: null,\n        description: 'Hides the default close button. You must provide another close button somewhere within the flyout.',\n        name: 'hideCloseButton',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      closeButtonPosition: {\n        defaultValue: {\n          value: 'outside'\n        },\n        description: 'Position of close button.\\n' + '`inside`: Floating to just inside the flyout, always top right;\\n' + '`outside`: Floating just outside the flyout near the top (side dependent on `side`). Helpful when the close button may cover other interactable content.',\n        name: 'closeButtonPosition',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'enum',\n          raw: '\"inside\" | \"outside\"',\n          value: [{\n            value: '\"inside\"'\n          }, {\n            value: '\"outside\"'\n          }]\n        }\n      },\n      maskProps: {\n        defaultValue: null,\n        description: 'Adjustments to the EuiOverlayMask that is added when `ownFocus = true`',\n        name: 'maskProps',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'EuiOverlayMaskProps'\n        }\n      },\n      outsideClickCloses: {\n        defaultValue: {\n          value: 'true'\n        },\n        description: 'Forces this interaction on the mask overlay or body content.\\n' + 'Defaults depend on `ownFocus` and `type` values',\n        name: 'outsideClickCloses',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      pushMinBreakpoint: {\n        defaultValue: null,\n        description: 'Named breakpoint or pixel value for customizing the minimum window width to enable the `push` type',\n        name: 'pushMinBreakpoint',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'number | \"xs\" | \"s\" | \"m\" | \"l\" | \"xl\"'\n        }\n      },\n      isOpen: {\n        defaultValue: {\n          value: 'false'\n        },\n        description: 'Shows the navigation flyout',\n        name: 'isOpen',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      isDocked: {\n        defaultValue: {\n          value: 'false'\n        },\n        description: 'Keeps navigation flyout visible and push `<body>` content via padding',\n        name: 'isDocked',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      dockedBreakpoint: {\n        defaultValue: {\n          value: 'l'\n        },\n        description: 'Named breakpoint or pixel value for customizing the minimum window width to enable docking',\n        name: 'dockedBreakpoint',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'number | \"xs\" | \"s\" | \"m\" | \"l\" | \"xl\"'\n        }\n      },\n      button: {\n        defaultValue: null,\n        description: 'Button for controlling visible state of the nav',\n        name: 'button',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'ReactElement'\n        }\n      },\n      showButtonIfDocked: {\n        defaultValue: {\n          value: 'false'\n        },\n        description: 'Keeps the display of toggle button when in docked state',\n        name: 'showButtonIfDocked',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      }\n    },\n    extendedInterfaces: ['HTMLAttributes', 'AriaAttributes', 'DOMAttributes', 'CommonProps', 'Attributes']\n  };\n} catch (e) {}"]}]}