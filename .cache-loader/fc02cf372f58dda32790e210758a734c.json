{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\page\\index.ts","dependencies":[{"path":"D:\\work\\eui\\src\\components\\page\\index.ts","mtime":1649070093719},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/page/index.ts"],"names":["EuiPage","EuiPageBody","EuiPageContent","EuiPageContentBody","EuiPageContentHeader","EuiPageContentHeaderSection","EuiPageHeader","EuiPageHeaderContent","EuiPageHeaderSection","EuiPageSideBar","EuiPageTemplate"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,OAAT,QAAsC,QAAtC;AAEA,SAASC,WAAT,QAA8C,aAA9C;AAEA,SACEC,cADF,EAGEC,kBAHF,EAKEC,oBALF,EAOEC,2BAPF,QASO,gBATP;AAWA,SACEC,aADF,EAEEC,oBAFF,EAKEC,oBALF,QAOO,eAPP;AASA,SAASC,cAAT,QAAoD,iBAApD;AAEA,SAASC,eAAT,QAAsD,iBAAtD","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport { EuiPage, EuiPageProps } from './page';\n\nexport { EuiPageBody, EuiPageBodyProps } from './page_body';\n\nexport {\n  EuiPageContent,\n  EuiPageContentProps,\n  EuiPageContentBody,\n  EuiPageContentBodyProps,\n  EuiPageContentHeader,\n  EuiPageContentHeaderProps,\n  EuiPageContentHeaderSection,\n  EuiPageContentHeaderSectionProps,\n} from './page_content';\n\nexport {\n  EuiPageHeader,\n  EuiPageHeaderContent,\n  EuiPageHeaderContentProps,\n  EuiPageHeaderProps,\n  EuiPageHeaderSection,\n  EuiPageHeaderSectionProps,\n} from './page_header';\n\nexport { EuiPageSideBar, EuiPageSideBarProps } from './page_side_bar';\n\nexport { EuiPageTemplate, EuiPageTemplateProps } from './page_template';\n"]}]}