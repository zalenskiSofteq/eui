{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\search_bar\\query\\ast.ts","dependencies":[{"path":"D:\\work\\eui\\src\\components\\search_bar\\query\\ast.ts","mtime":1649070093748},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/search_bar/query/ast.ts"],"names":["isArray","isNil","dateValuesEqual","isDateValue","Match","Object","freeze","MUST","MUST_NOT","isMust","match","isMustClause","clause","Operator","EQ","EXACT","GT","GTE","LT","LTE","isEQ","isEQClause","Field","isInstance","operator","isEXACT","isEXACTClause","isRange","isGT","isGTE","isLT","isLTE","isRangeClause","isGTClause","isGTEClause","isLTClause","isLTEClause","Term","TYPE","type","must","value","mustNot","Group","eq","field","exact","gt","gte","lt","lte","Is","flag","valuesEqual","v1","v2","arrayIncludesValue","array","some","item","_AST","clauses","_clauses","_indexedClauses","is","term","group","forEach","push","Error","getTermClauses","find","keys","filter","predicate","getFieldClauses","getFieldClause","existingClause","getOrFieldClause","newClause","map","reduce","filteredValue","val","length","addClause","getSimpleFieldClause","values","added","newClauses","AST","create"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { isArray, isNil } from '../../../services/predicate';\nimport { DateValue, dateValuesEqual, isDateValue } from './date_value';\n\nexport type MatchType = 'must' | 'must_not';\n\nexport type Value = string | number | boolean | DateValue;\n\nexport interface IsClause {\n  type: 'is';\n  match?: MatchType;\n  flag: string;\n}\n\nexport interface FieldClause {\n  type: 'field';\n  match?: MatchType;\n  operator: OperatorType;\n  field: string;\n  value: Value | Value[];\n}\n\nexport interface TermClause {\n  type: 'term';\n  match?: MatchType;\n  value: Value;\n}\n\nexport interface GroupClause {\n  type: 'group';\n  match: MatchType;\n  value: Clause[];\n}\n\nexport type Clause = IsClause | FieldClause | TermClause | GroupClause;\n\nexport const Match = Object.freeze({\n  MUST: 'must' as const,\n  MUST_NOT: 'must_not' as const,\n  isMust(match: MatchType | undefined) {\n    return match === Match.MUST;\n  },\n  isMustClause(clause: Clause) {\n    return Match.isMust(clause.match);\n  },\n});\n\nexport type OperatorType = 'eq' | 'exact' | 'gt' | 'gte' | 'lt' | 'lte';\n\nexport const Operator = Object.freeze({\n  EQ: 'eq' as const,\n  EXACT: 'exact' as const,\n  GT: 'gt' as const,\n  GTE: 'gte' as const,\n  LT: 'lt' as const,\n  LTE: 'lte' as const,\n  isEQ(match: OperatorType | undefined) {\n    return match === Operator.EQ;\n  },\n  isEQClause(clause: Clause) {\n    return Field.isInstance(clause) && Operator.isEQ(clause.operator);\n  },\n  isEXACT(match: OperatorType | undefined) {\n    return match === Operator.EXACT;\n  },\n  isEXACTClause(clause: Clause) {\n    return Field.isInstance(clause) && Operator.isEXACT(clause.operator);\n  },\n  isRange(match: OperatorType | undefined) {\n    return (\n      Operator.isGT(match) ||\n      Operator.isGTE(match) ||\n      Operator.isLT(match) ||\n      Operator.isLTE(match)\n    );\n  },\n  isRangeClause(clause: Clause) {\n    return Field.isInstance(clause) && Operator.isRange(clause.operator);\n  },\n  isGT(match: OperatorType | undefined) {\n    return match === Operator.GT;\n  },\n  isGTClause(clause: Clause) {\n    return Field.isInstance(clause) && Operator.isGT(clause.operator);\n  },\n  isGTE(match: OperatorType | undefined) {\n    return match === Operator.GTE;\n  },\n  isGTEClause(clause: Clause) {\n    return Field.isInstance(clause) && Operator.isGTE(clause.operator);\n  },\n  isLT(match: OperatorType | undefined) {\n    return match === Operator.LT;\n  },\n  isLTClause(clause: Clause) {\n    return Field.isInstance(clause) && Operator.isLT(clause.operator);\n  },\n  isLTE(match: OperatorType | undefined) {\n    return match === Operator.LTE;\n  },\n  isLTEClause(clause: Clause) {\n    return Field.isInstance(clause) && Operator.isLTE(clause.operator);\n  },\n});\n\nconst Term = Object.freeze({\n  TYPE: 'term' as const,\n  isInstance: (clause: Clause): clause is TermClause => {\n    return clause.type === Term.TYPE;\n  },\n  must: (value: Value) => {\n    return { type: Term.TYPE, value, match: Match.MUST };\n  },\n  mustNot: (value: Value) => {\n    return { type: Term.TYPE, value, match: Match.MUST_NOT };\n  },\n});\n\nconst Group = Object.freeze({\n  TYPE: 'group' as const,\n  isInstance: (clause: Clause): clause is GroupClause => {\n    return clause.type === Group.TYPE;\n  },\n  must: (value: Clause[]) => {\n    return { type: Group.TYPE, value, match: Match.MUST };\n  },\n  mustNot: (value: Clause[]) => {\n    return { type: Group.TYPE, value, match: Match.MUST_NOT };\n  },\n});\n\nconst Field = Object.freeze({\n  TYPE: 'field' as const,\n  isInstance: (clause: Clause): clause is FieldClause => {\n    return clause.type === Field.TYPE;\n  },\n  must: {\n    eq: (field: string, value: Value | Value[]) => ({\n      type: Field.TYPE,\n      field,\n      value,\n      match: Match.MUST,\n      operator: Operator.EQ,\n    }),\n    exact: (field: string, value: Value | Value[]) => ({\n      type: Field.TYPE,\n      field,\n      value,\n      match: Match.MUST,\n      operator: Operator.EXACT,\n    }),\n    gt: (field: string, value: Value | Value[]) => ({\n      type: Field.TYPE,\n      field,\n      value,\n      match: Match.MUST,\n      operator: Operator.GT,\n    }),\n    gte: (field: string, value: Value | Value[]) => ({\n      type: Field.TYPE,\n      field,\n      value,\n      match: Match.MUST,\n      operator: Operator.GTE,\n    }),\n    lt: (field: string, value: Value | Value[]) => ({\n      type: Field.TYPE,\n      field,\n      value,\n      match: Match.MUST,\n      operator: Operator.LT,\n    }),\n    lte: (field: string, value: Value | Value[]) => ({\n      type: Field.TYPE,\n      field,\n      value,\n      match: Match.MUST,\n      operator: Operator.LTE,\n    }),\n  },\n  mustNot: {\n    eq: (field: string, value: Value | Value[]) => ({\n      type: Field.TYPE,\n      field,\n      value,\n      match: Match.MUST_NOT,\n      operator: Operator.EQ,\n    }),\n    exact: (field: string, value: Value | Value[]) => ({\n      type: Field.TYPE,\n      field,\n      value,\n      match: Match.MUST_NOT,\n      operator: Operator.EXACT,\n    }),\n    gt: (field: string, value: Value | Value[]) => ({\n      type: Field.TYPE,\n      field,\n      value,\n      match: Match.MUST_NOT,\n      operator: Operator.GT,\n    }),\n    gte: (field: string, value: Value | Value[]) => ({\n      type: Field.TYPE,\n      field,\n      value,\n      match: Match.MUST_NOT,\n      operator: Operator.GTE,\n    }),\n    lt: (field: string, value: Value | Value[]) => ({\n      type: Field.TYPE,\n      field,\n      value,\n      match: Match.MUST_NOT,\n      operator: Operator.LT,\n    }),\n    lte: (field: string, value: Value | Value[]) => ({\n      type: Field.TYPE,\n      field,\n      value,\n      match: Match.MUST_NOT,\n      operator: Operator.LTE,\n    }),\n  },\n});\n\nconst Is = Object.freeze({\n  TYPE: 'is' as const,\n  isInstance: (clause: Clause): clause is IsClause => {\n    return clause.type === Is.TYPE;\n  },\n  must: (flag: string) => {\n    return { type: Is.TYPE, flag, match: Match.MUST };\n  },\n  mustNot: (flag: string) => {\n    return { type: Is.TYPE, flag, match: Match.MUST_NOT };\n  },\n});\n\nconst valuesEqual = (v1: any, v2: any) => {\n  if (isDateValue(v1)) {\n    return dateValuesEqual(v1, v2);\n  }\n  return v1 === v2;\n};\n\nconst arrayIncludesValue = (array: any[], value: any) => {\n  return array.some((item) => valuesEqual(item, value));\n};\n\n/**\n * The AST structure is an array of clauses. There are 3 types of clauses that are supported:\n *\n * :term:\n * Holds a VALUE and an OCCUR. The OCCUR indicates whether the value must match or must not match. Default\n * clauses are not associated with any specific field - when executing the search, one can specify what are\n * the default fields that the default clauses will be matched against.\n *\n * :field:\n * Like the `term` clause, holds a VALUE and an MATCH, but this clause also specifies the field that the\n * value will be matched against.\n *\n * :is:\n * Holds a FLAG and indicates whether this flag must be applied or must not be applied. Typically this clause\n * matches against boolean values of a record (e.g. \"is:online\", \"is:internal\", \"is:on\", etc..)\n *\n * This AST is immutable - every \"mutating\" operation returns a newly mutated AST.\n */\nexport class _AST {\n  private readonly _clauses: Clause[];\n  private readonly _indexedClauses: {\n    field: {\n      [field: string]: FieldClause[];\n    };\n    is: {\n      [flag: string]: IsClause;\n    };\n    term: TermClause[];\n    group: GroupClause[];\n  };\n\n  static create(clauses: Clause[]) {\n    return new _AST(clauses);\n  }\n\n  constructor(clauses: Clause[] = []) {\n    this._clauses = clauses;\n    this._indexedClauses = { field: {}, is: {}, term: [], group: [] };\n\n    clauses.forEach((clause) => {\n      switch (clause.type) {\n        case Field.TYPE:\n          if (!this._indexedClauses.field[clause.field]) {\n            this._indexedClauses.field[clause.field] = [];\n          }\n          this._indexedClauses.field[clause.field].push(clause);\n          break;\n\n        case Is.TYPE:\n          this._indexedClauses.is[clause.flag] = clause;\n          break;\n\n        case Term.TYPE:\n          this._indexedClauses.term.push(clause);\n          break;\n\n        case Group.TYPE:\n          this._indexedClauses.group.push(clause);\n          break;\n\n        default:\n          // @ts-ignore TS knows we have exhausted the match\n          throw new Error(`Unknown query clause type [${clause.type}]`);\n      }\n    });\n  }\n\n  get clauses() {\n    return this._clauses;\n  }\n\n  getTermClauses() {\n    return this._indexedClauses.term;\n  }\n\n  getTermClause(value: Value) {\n    const clauses = this.getTermClauses();\n    return clauses.find((clause) => valuesEqual(clause.value, value));\n  }\n\n  getFieldNames() {\n    return Object.keys(this._indexedClauses.field);\n  }\n\n  getFieldClauses(field?: string): FieldClause[] {\n    return field\n      ? this._indexedClauses.field[field]\n      : this._clauses.filter(Field.isInstance);\n  }\n\n  getFieldClause(\n    field: string,\n    predicate: (c: FieldClause) => boolean\n  ): FieldClause | undefined {\n    const clauses = this.getFieldClauses(field);\n    if (clauses) {\n      return clauses.find(predicate);\n    }\n  }\n\n  hasOrFieldClause(field: string, value?: Value) {\n    const clause = this.getFieldClause(field, (clause) =>\n      isArray(clause.value)\n    );\n    if (!clause) {\n      return false;\n    }\n\n    // We can apply this type cast due to the `isArray` filter above\n    return isNil(value) || arrayIncludesValue(clause.value as Value[], value);\n  }\n\n  getOrFieldClause(field: string, value?: Value) {\n    return this.getFieldClause(\n      field,\n      (clause) =>\n        isArray(clause.value) &&\n        (isNil(value) || arrayIncludesValue(clause.value, value))\n    );\n  }\n\n  addOrFieldValue(\n    field: string,\n    value: Value,\n    must = true,\n    operator: OperatorType = Operator.EQ\n  ) {\n    const existingClause = this.getOrFieldClause(field);\n    if (!existingClause) {\n      const newClause = must\n        ? Field.must[operator](field, [value])\n        : Field.mustNot[operator](field, [value]);\n      return new _AST([...this._clauses, newClause]);\n    }\n\n    const clauses = this._clauses.map((clause) => {\n      if (clause === existingClause) {\n        (clause.value as Value[]).push(value);\n      }\n      return clause;\n    });\n    return new _AST(clauses);\n  }\n\n  removeOrFieldValue(field: string, value: Value) {\n    const existingClause = this.getOrFieldClause(field, value);\n    if (!existingClause) {\n      return new _AST([...this._clauses]);\n    }\n    const clauses = this._clauses.reduce((clauses, clause) => {\n      if (clause !== existingClause) {\n        clauses.push(clause);\n        return clauses;\n      }\n      const filteredValue = (clause.value as Value[]).filter(\n        (val) => !valuesEqual(val, value)\n      );\n      if (filteredValue.length === 0) {\n        return clauses;\n      }\n      clauses.push({\n        ...clause,\n        value: filteredValue,\n      });\n      return clauses;\n    }, [] as Clause[]);\n    return new _AST(clauses);\n  }\n\n  removeOrFieldClauses(field: string) {\n    const clauses = this._clauses.filter((clause) => {\n      return (\n        !Field.isInstance(clause) ||\n        clause.field !== field ||\n        !isArray(clause.value)\n      );\n    });\n    return new _AST(clauses);\n  }\n\n  hasSimpleFieldClause(field: string, value?: Value) {\n    const clause = this.getFieldClause(\n      field,\n      (clause) => !isArray(clause.value)\n    );\n    if (!clause) {\n      return false;\n    }\n    return isNil(value) || valuesEqual(clause.value, value);\n  }\n\n  getSimpleFieldClause(field: string, value?: Value) {\n    return this.getFieldClause(\n      field,\n      (clause) =>\n        !isArray(clause.value) &&\n        (isNil(value) || valuesEqual(clause.value, value))\n    );\n  }\n\n  addSimpleFieldValue(\n    field: string,\n    value: Value,\n    must = true,\n    operator: OperatorType = Operator.EQ\n  ) {\n    const clause = must\n      ? Field.must[operator](field, value)\n      : Field.mustNot[operator](field, value);\n    return this.addClause(clause);\n  }\n\n  removeSimpleFieldValue(field: string, value: Value) {\n    const existingClause = this.getSimpleFieldClause(field, value);\n    if (!existingClause) {\n      return new _AST([...this._clauses]);\n    }\n    const clauses = this._clauses.filter((clause) => clause !== existingClause);\n    return new _AST(clauses);\n  }\n\n  removeSimpleFieldClauses(field: string) {\n    const clauses = this._clauses.filter((clause) => {\n      return (\n        !Field.isInstance(clause) ||\n        clause.field !== field ||\n        isArray(clause.value)\n      );\n    });\n    return new _AST(clauses);\n  }\n\n  getIsClauses() {\n    return Object.values(this._indexedClauses.is);\n  }\n\n  getIsClause(flag: string) {\n    return this._indexedClauses.is[flag];\n  }\n\n  removeIsClause(flag: string) {\n    return new _AST(\n      this._clauses.filter(\n        (clause) => !Is.isInstance(clause) || clause.flag !== flag\n      )\n    );\n  }\n\n  getGroupClauses() {\n    return Object.values(this._indexedClauses.group);\n  }\n\n  /**\n   * Creates and returns a new AST with the given clause added to the current clauses. If\n   * the current clauses already include a similar clause, it will be (in-place) replaced by\n   * the given clause. Whether a clause is similar to the given one depends on the type of the clause.\n   * Two clauses are similar if:\n   *\n   * - they are both of the same type\n   * - if they are `default` clauses, they must have the same value\n   * - if they are `term` clauses, they must have the same fields and values\n   * - if they are `is` clauses, they must have the same flags\n   *\n   * The reasoning behind not including the `match` attributes of the clauses in the rules above, stems\n   * in the fact that the AST clauses are ANDed, and having two similar clauses with two different\n   * match attributes creates a logically contradicted AST (e.g. what does it mean to\n   * \"(must have x) AND (must not have x)\"?)\n   *\n   * note:  in-place replacement means the given clause will be placed in the same position as the one it\n   *        replaced\n   */\n  addClause(newClause: Clause) {\n    let added = false;\n    const newClauses = this._clauses.reduce((clauses, clause) => {\n      if (newClause.type !== clause.type) {\n        clauses.push(clause);\n        return clauses;\n      }\n\n      switch (newClause.type) {\n        case Term.TYPE:\n          if (newClause.value !== (clause as TermClause).value) {\n            clauses.push(clause);\n            return clauses;\n          }\n          break;\n\n        case Field.TYPE:\n          if (\n            newClause.field !== (clause as FieldClause).field ||\n            newClause.value !== (clause as FieldClause).value\n          ) {\n            clauses.push(clause);\n            return clauses;\n          }\n          break;\n\n        case Is.TYPE:\n          if (newClause.flag !== (clause as IsClause).flag) {\n            clauses.push(clause);\n            return clauses;\n          }\n          break;\n\n        default:\n          throw new Error(`unknown clause type [${newClause.type}]`);\n      }\n      added = true;\n      clauses.push(newClause);\n      return clauses;\n    }, [] as Clause[]);\n\n    if (!added) {\n      newClauses.push(newClause);\n    }\n    return new _AST(newClauses);\n  }\n}\n\nexport const AST = Object.freeze({\n  Match,\n  Operator,\n  Term,\n  Group,\n  Field,\n  Is,\n  create: (clauses: Clause[]) => new _AST(clauses),\n});\n"]}]}