{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\search_bar\\filters\\field_value_toggle_filter.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\search_bar\\filters\\field_value_toggle_filter.tsx","mtime":1649070093746},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/search_bar/filters/field_value_toggle_filter.tsx"],"names":["React","Component","EuiFilterButton","isNil","Query","FieldValueToggleFilter","clause","props","config","name","negatedName","hasActiveFilters","isMust","checked","field","value","operator","query","removeSimpleFieldValue","addSimpleFieldValue","onChange","getSimpleFieldClause","resolveDisplay","onClick","valueChanged"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,KAAT,QAAsB,6BAAtB;AACA,SAASC,KAAT,QAAsB,UAAtB;AAoBA,WAAaC,sBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mCAGiBC,MAHjB,EAG6C;AAAA,+BACX,KAAKC,KAAL,CAAWC,MADA;AAAA,UACjCC,IADiC,sBACjCA,IADiC;AAAA,UAC3BC,WAD2B,sBAC3BA,WAD2B;;AAEzC,UAAIP,KAAK,CAACG,MAAD,CAAT,EAAmB;AACjB,eAAO;AAAEK,UAAAA,gBAAgB,EAAE,KAApB;AAA2BF,UAAAA,IAAI,EAAJA;AAA3B,SAAP;AACD;;AACD,aAAOL,KAAK,CAACQ,MAAN,CAAaN,MAAb,IACH;AAAEK,QAAAA,gBAAgB,EAAE,IAApB;AAA0BF,QAAAA,IAAI,EAAJA;AAA1B,OADG,GAEH;AACEE,QAAAA,gBAAgB,EAAE,IADpB;AAEEF,QAAAA,IAAI,EAAEC,WAAW,GAAGA,WAAH,iBAAwBD,IAAxB;AAFnB,OAFJ;AAMD;AAdH;AAAA;AAAA,iCAgBeI,OAhBf,EAgBiC;AAAA,gCACM,KAAKN,KAAL,CAAWC,MADjB;AAAA,UACrBM,KADqB,uBACrBA,KADqB;AAAA,UACdC,KADc,uBACdA,KADc;AAAA,UACPC,QADO,uBACPA,QADO;AAE7B,UAAMC,KAAK,GAAGJ,OAAO,GACjB,KAAKN,KAAL,CAAWU,KAAX,CAAiBC,sBAAjB,CAAwCJ,KAAxC,EAA+CC,KAA/C,CADiB,GAEjB,KAAKR,KAAL,CAAWU,KAAX,CAAiBE,mBAAjB,CAAqCL,KAArC,EAA4CC,KAA5C,EAAmD,IAAnD,EAAyDC,QAAzD,CAFJ;AAGA,WAAKT,KAAL,CAAWa,QAAX,CAAoBH,KAApB;AACD;AAtBH;AAAA;AAAA,6BAwBW;AAAA;;AAAA,wBACmB,KAAKV,KADxB;AAAA,UACCU,KADD,eACCA,KADD;AAAA,UACQT,MADR,eACQA,MADR;AAEP,UAAMF,MAAM,GAAGW,KAAK,CAACI,oBAAN,CAA2Bb,MAAM,CAACM,KAAlC,EAAyCN,MAAM,CAACO,KAAhD,CAAf;AACA,UAAMF,OAAO,GAAG,CAACV,KAAK,CAACG,MAAD,CAAtB;;AAHO,iCAI4B,KAAKgB,cAAL,CAAoBhB,MAApB,CAJ5B;AAAA,UAICK,gBAJD,wBAICA,gBAJD;AAAA,UAImBF,IAJnB,wBAImBA,IAJnB;;AAKP,UAAMc,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,QAAA,KAAI,CAACC,YAAL,CAAkBX,OAAlB;AACD,OAFD;;AAGA,0BACE,oBAAC,eAAD;AACE,QAAA,OAAO,EAAEU,OADX;AAEE,QAAA,gBAAgB,EAAEZ,gBAFpB;AAGE,wBAAc,CAAC,CAACA;AAHlB,SAIGF,IAJH,CADF;AAQD;AAxCH;;AAAA;AAAA,EAA4CR,SAA5C","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { EuiFilterButton } from '../../filter_group';\nimport { isNil } from '../../../services/predicate';\nimport { Query } from '../query';\nexport class FieldValueToggleFilter extends Component {\n  resolveDisplay(clause) {\n    const {\n      name,\n      negatedName\n    } = this.props.config;\n\n    if (isNil(clause)) {\n      return {\n        hasActiveFilters: false,\n        name\n      };\n    }\n\n    return Query.isMust(clause) ? {\n      hasActiveFilters: true,\n      name\n    } : {\n      hasActiveFilters: true,\n      name: negatedName ? negatedName : `Not ${name}`\n    };\n  }\n\n  valueChanged(checked) {\n    const {\n      field,\n      value,\n      operator\n    } = this.props.config;\n    const query = checked ? this.props.query.removeSimpleFieldValue(field, value) : this.props.query.addSimpleFieldValue(field, value, true, operator);\n    this.props.onChange(query);\n  }\n\n  render() {\n    const {\n      query,\n      config\n    } = this.props;\n    const clause = query.getSimpleFieldClause(config.field, config.value);\n    const checked = !isNil(clause);\n    const {\n      hasActiveFilters,\n      name\n    } = this.resolveDisplay(clause);\n\n    const onClick = () => {\n      this.valueChanged(checked);\n    };\n\n    return <EuiFilterButton onClick={onClick} hasActiveFilters={hasActiveFilters} aria-pressed={!!hasActiveFilters}>\n        {name}\n      </EuiFilterButton>;\n  }\n\n}\nFieldValueToggleFilter.propTypes = {\n  index: PropTypes.number.isRequired,\n  config: PropTypes.shape({\n    type: PropTypes.oneOf([\"field_value_toggle\"]).isRequired,\n    field: PropTypes.string.isRequired,\n    value: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired, PropTypes.bool.isRequired, PropTypes.shape({\n      type: PropTypes.oneOf([\"date\"]).isRequired,\n      raw: PropTypes.any.isRequired,\n      granularity: PropTypes.oneOfType([PropTypes.shape({\n        es: PropTypes.oneOf([\"d\", \"w\", \"M\", \"y\"]).isRequired,\n        js: PropTypes.oneOf([\"day\", \"week\", \"month\", \"year\"]).isRequired,\n        isSame: PropTypes.func.isRequired,\n        start: PropTypes.func.isRequired,\n        startOfNext: PropTypes.func.isRequired,\n        iso8601: PropTypes.func.isRequired\n      }).isRequired, PropTypes.oneOf([undefined])]).isRequired,\n      text: PropTypes.string.isRequired,\n      resolve: PropTypes.func.isRequired\n    }).isRequired]).isRequired,\n    name: PropTypes.string.isRequired,\n    negatedName: PropTypes.string,\n    available: PropTypes.func,\n    operator: PropTypes.oneOf([\"eq\", \"exact\", \"gt\", \"gte\", \"lt\", \"lte\"])\n  }).isRequired,\n  query: PropTypes.any.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\ntry {\n  FieldValueToggleFilter.__docgenInfo = {\n    description: '',\n    displayName: 'FieldValueToggleFilter',\n    methods: [],\n    props: {\n      index: {\n        defaultValue: null,\n        description: '',\n        name: 'index',\n        parent: {\n          fileName: 'eui/src/components/search_bar/filters/field_value_toggle_filter.tsx',\n          name: 'FieldValueToggleFilterProps'\n        },\n        required: true,\n        type: {\n          name: 'number'\n        }\n      },\n      config: {\n        defaultValue: null,\n        description: '',\n        name: 'config',\n        parent: {\n          fileName: 'eui/src/components/search_bar/filters/field_value_toggle_filter.tsx',\n          name: 'FieldValueToggleFilterProps'\n        },\n        required: true,\n        type: {\n          name: 'FieldValueToggleFilterConfigType'\n        }\n      },\n      query: {\n        defaultValue: null,\n        description: '',\n        name: 'query',\n        parent: {\n          fileName: 'eui/src/components/search_bar/filters/field_value_toggle_filter.tsx',\n          name: 'FieldValueToggleFilterProps'\n        },\n        required: true,\n        type: {\n          name: 'Query'\n        }\n      },\n      onChange: {\n        defaultValue: null,\n        description: '',\n        name: 'onChange',\n        parent: {\n          fileName: 'eui/src/components/search_bar/filters/field_value_toggle_filter.tsx',\n          name: 'FieldValueToggleFilterProps'\n        },\n        required: true,\n        type: {\n          name: '(value: Query) => void'\n        }\n      }\n    },\n    extendedInterfaces: ['FieldValueToggleFilterProps']\n  };\n} catch (e) {}"]}]}