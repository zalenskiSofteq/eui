{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\services\\color\\eui_palettes.ts","dependencies":[{"path":"D:\\work\\eui\\src\\services\\color\\eui_palettes.ts","mtime":1649070093829},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/services/color/eui_palettes.ts"],"names":["chroma","colorPalette","flatten","arr","concat","euiPalette","colors","steps","diverge","categorical","palette","shift","euiPaletteColorBlind","rotations","order","direction","sortBy","sortShift","base","sort","a","b","set","hsl","palettes","map","color","pop","i","rotation","push","euiPaletteColorBlindBehindText","paletteProps","originalPalette","newPalette","brighten","hex","euiPaletteForLightBackground","euiPaletteForDarkBackground","positiveColor","negativeColor","lightNegativeColor","coolArray","warmArray","euiPaletteForStatus","euiPaletteForTemperature","cools","slice","reverse","warms","euiPaletteComplimentary","euiPaletteNegative","euiPalettePositive","euiPaletteCool","euiPaletteWarm","euiPaletteGray"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport chroma from 'chroma-js';\nimport { HEX } from './color_types';\nimport { colorPalette } from './color_palette';\n\nexport type EuiPalette = string[];\n\nconst flatten = (arr: any[]) => [].concat(...arr);\n\nconst euiPalette = function (\n  colors: string[],\n  steps: number,\n  diverge: boolean = false,\n  categorical: boolean = true\n): EuiPalette {\n  // This function also trims the first color so white/black is never a color\n  if (!diverge && steps > 1) {\n    const palette = colorPalette(colors, steps + 1);\n    palette.shift();\n    return palette;\n  }\n\n  return colorPalette(colors, steps, diverge, categorical);\n};\n\nexport interface EuiPaletteColorBlindProps {\n  /**\n   * How many variations of the series is needed\n   */\n  rotations?: number;\n  /**\n   * Order similar colors as `group`s or just `append` each variation\n   */\n  order?: 'append' | 'group';\n  /**\n   * Specifies if the direction of the color variations\n   */\n  direction?: 'lighter' | 'darker' | 'both';\n  /**\n   * Use the default sort order, or re-sort them based on the color wheel (natural)\n   */\n  sortBy?: 'default' | 'natural';\n  /**\n   * Shift the sorting order by a certain number when used in conjunction with `'natural'` `sortBy`.\n   * Defaults to a number close to green.\n   */\n  sortShift?: string;\n}\n\nexport const euiPaletteColorBlind = ({\n  rotations = 1,\n  order = 'append',\n  direction = 'lighter',\n  sortBy = 'default',\n  sortShift = '-100',\n}: EuiPaletteColorBlindProps = {}): EuiPalette => {\n  let colors: string[] = [];\n\n  let base = [\n    '#54B399', // 0 green\n    '#6092C0', // 1 blue\n    '#D36086', // 2 dark pink\n    '#9170B8', // 3 purple\n    '#CA8EAE', // 4 light pink\n    '#D6BF57', // 5 yellow\n    '#B9A888', // 6 tan\n    '#DA8B45', // 7 orange\n    '#AA6556', // 8 brown\n    '#E7664C', // 9 red\n  ];\n\n  if (sortBy === 'natural') {\n    // Sort the colors based on the color wheel, but shifting the values based on sortShift\n    base = [...base].sort(function (a, b) {\n      return (\n        chroma(a).set('hsl.h', sortShift).hsl()[0] -\n        chroma(b).set('hsl.h', sortShift).hsl()[0]\n      );\n    });\n  }\n\n  if (rotations > 1) {\n    const palettes = base.map((color) => {\n      // Create the darkest and lightest versions of each color using black and white\n      const palette = colorPalette(['black', color, 'white'], 5, false, true);\n      // Then removing the extremes\n      palette.pop();\n      palette.shift();\n\n      switch (direction) {\n        case 'lighter':\n          return colorPalette([palette[1], palette[2]], rotations, false, true);\n        case 'darker':\n          return colorPalette([palette[1], palette[0]], rotations, false, true);\n        case 'both':\n          return colorPalette(palette, rotations, false, true);\n      }\n    });\n\n    if (order === 'group') {\n      colors = flatten(palettes);\n    } else {\n      for (let i = 0; i < rotations; i++) {\n        const rotation = palettes.map((palette) => palette[i]);\n        colors.push(...rotation);\n      }\n    }\n  } else {\n    colors = base;\n  }\n\n  return colors;\n};\n\n/**\n * Color blind palette with text is meant for use when text is applied on top of the color.\n * It increases the brightness of the color to give the text more contrast.\n */\nexport const euiPaletteColorBlindBehindText = (\n  paletteProps: EuiPaletteColorBlindProps = {}\n) => {\n  const originalPalette = euiPaletteColorBlind(paletteProps);\n  const newPalette = originalPalette.map((color) =>\n    chroma(color).brighten(0.5).hex()\n  );\n  return newPalette;\n};\n\nexport const euiPaletteForLightBackground = function (): EuiPalette {\n  return ['#006BB4', '#017D73', '#F5A700', '#BD271E', '#DD0A73'];\n};\n\nexport const euiPaletteForDarkBackground = function (): EuiPalette {\n  return ['#1BA9F5', '#7DE2D1', '#F990C0', '#F66', '#FFCE7A'];\n};\n\nconst positiveColor: HEX = '#209280';\nconst negativeColor: HEX = '#CC5642';\nconst lightNegativeColor: HEX = euiPaletteColorBlind()[9];\nconst coolArray: HEX[] = [euiPaletteColorBlind()[1], '#6092C0'];\nconst warmArray: HEX[] = [euiPaletteColorBlind()[7], euiPaletteColorBlind()[9]];\n\nexport const euiPaletteForStatus = function (steps: number): EuiPalette {\n  if (steps === 1) {\n    return [positiveColor];\n  }\n  if (steps <= 3) {\n    return euiPalette(\n      [positiveColor, euiPaletteColorBlind()[5], negativeColor],\n      steps,\n      true\n    );\n  }\n  return euiPalette(\n    [\n      positiveColor,\n      euiPaletteColorBlind()[0],\n      euiPaletteColorBlind()[5],\n      lightNegativeColor,\n      negativeColor,\n    ],\n    steps,\n    true\n  );\n};\n\nexport const euiPaletteForTemperature = function (steps: number): EuiPalette {\n  const cools = colorPalette([...coolArray.slice().reverse(), '#EBEFF5'], 3);\n  const warms = colorPalette(['#F4F3DB', ...warmArray], 3);\n\n  if (steps === 1) {\n    return [cools[0]];\n  } else if (steps <= 3) {\n    return euiPalette([cools[0], lightNegativeColor], steps, true);\n  }\n\n  return euiPalette([...cools, ...warms], steps, true);\n};\n\nexport const euiPaletteComplimentary = function (steps: number): EuiPalette {\n  if (steps === 1) {\n    return [euiPaletteColorBlind()[1]];\n  }\n\n  return euiPalette(\n    [euiPaletteColorBlind()[1], euiPaletteColorBlind()[7]],\n    steps,\n    true\n  );\n};\n\nexport const euiPaletteNegative = function (steps: number): EuiPalette {\n  if (steps === 1) {\n    return [lightNegativeColor];\n  }\n\n  return euiPalette(['white', negativeColor], steps);\n};\n\nexport const euiPalettePositive = function (steps: number): EuiPalette {\n  if (steps === 1) {\n    return [euiPaletteColorBlind()[0]];\n  }\n\n  return euiPalette(['white', positiveColor], steps);\n};\n\nexport const euiPaletteCool = function (steps: number): EuiPalette {\n  if (steps === 1) {\n    return [coolArray[1]];\n  }\n\n  return euiPalette(['white', ...coolArray], steps);\n};\n\nexport const euiPaletteWarm = function (steps: number): EuiPalette {\n  if (steps === 1) {\n    return [lightNegativeColor];\n  }\n\n  return euiPalette(['#FBFBDC', ...warmArray], steps);\n};\n\nexport const euiPaletteGray = function (steps: number): EuiPalette {\n  if (steps === 1) {\n    return ['#98a2b3'];\n  }\n\n  return euiPalette(\n    ['white', '#d3dae6', '#98a2b3', '#69707d', '#343741'],\n    steps,\n    false\n  );\n};\n"]}]}