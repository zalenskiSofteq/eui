{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\search_bar\\query\\ast_to_es_query_dsl.ts","dependencies":[{"path":"D:\\work\\eui\\src\\components\\search_bar\\query\\ast_to_es_query_dsl.ts","mtime":1649070093749},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwoKZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0OyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gInVuZGVmaW5lZCIgfHwgb1tTeW1ib2wuaXRlcmF0b3JdID09IG51bGwpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gIm51bWJlciIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKLyoKICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yCiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoCiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0CiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIKICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkKICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiAqICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQogKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwogKiB1bmRlciB0aGUgTGljZW5zZS4KICovCmltcG9ydCB7IHByaW50SXNvODYwMSB9IGZyb20gJy4vZGF0ZV9mb3JtYXQnOwppbXBvcnQgeyBpc0RhdGVWYWx1ZSwgZGF0ZVZhbHVlIH0gZnJvbSAnLi9kYXRlX3ZhbHVlJzsKaW1wb3J0IHsgQVNUIH0gZnJvbSAnLi9hc3QnOwppbXBvcnQgeyBpc0FycmF5LCBpc0RhdGVMaWtlLCBpc1N0cmluZyB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3ByZWRpY2F0ZSc7CmltcG9ydCB7IGtleXNPZiB9IGZyb20gJy4uLy4uL2NvbW1vbic7Cgp2YXIgcHJvY2Vzc0RhdGVPcGVyYXRpb24gPSBmdW5jdGlvbiBwcm9jZXNzRGF0ZU9wZXJhdGlvbih2YWx1ZSwgb3BlcmF0b3IpIHsKICB2YXIgZ3JhbnVsYXJpdHkgPSB2YWx1ZS5ncmFudWxhcml0eSwKICAgICAgcmVzb2x2ZSA9IHZhbHVlLnJlc29sdmU7CiAgdmFyIGV4cHJlc3Npb24gPSBwcmludElzbzg2MDEocmVzb2x2ZSgpKTsKCiAgaWYgKCFncmFudWxhcml0eSkgewogICAgcmV0dXJuIHsKICAgICAgb3BlcmF0b3I6IG9wZXJhdG9yLAogICAgICBleHByZXNzaW9uOiBleHByZXNzaW9uCiAgICB9OwogIH0KCiAgc3dpdGNoIChvcGVyYXRvcikgewogICAgY2FzZSBBU1QuT3BlcmF0b3IuR1Q6CiAgICAgIGV4cHJlc3Npb24gPSAiIi5jb25jYXQoZXhwcmVzc2lvbiwgInx8KzEiKS5jb25jYXQoZ3JhbnVsYXJpdHkuZXMsICIvIikuY29uY2F0KGdyYW51bGFyaXR5LmVzKTsKICAgICAgcmV0dXJuIHsKICAgICAgICBvcGVyYXRvcjogQVNULk9wZXJhdG9yLkdURSwKICAgICAgICBleHByZXNzaW9uOiBleHByZXNzaW9uCiAgICAgIH07CgogICAgY2FzZSBBU1QuT3BlcmF0b3IuR1RFOgogICAgICBleHByZXNzaW9uID0gIiIuY29uY2F0KGV4cHJlc3Npb24sICJ8fC8iKS5jb25jYXQoZ3JhbnVsYXJpdHkuZXMpOwogICAgICByZXR1cm4gewogICAgICAgIG9wZXJhdG9yOiBvcGVyYXRvciwKICAgICAgICBleHByZXNzaW9uOiBleHByZXNzaW9uCiAgICAgIH07CgogICAgY2FzZSBBU1QuT3BlcmF0b3IuTFQ6CiAgICAgIGV4cHJlc3Npb24gPSAiIi5jb25jYXQoZXhwcmVzc2lvbiwgInx8LyIpLmNvbmNhdChncmFudWxhcml0eS5lcyk7CiAgICAgIHJldHVybiB7CiAgICAgICAgb3BlcmF0b3I6IG9wZXJhdG9yLAogICAgICAgIGV4cHJlc3Npb246IGV4cHJlc3Npb24KICAgICAgfTsKCiAgICBjYXNlIEFTVC5PcGVyYXRvci5MVEU6CiAgICAgIGV4cHJlc3Npb24gPSAiIi5jb25jYXQoZXhwcmVzc2lvbiwgInx8KzEiKS5jb25jYXQoZ3JhbnVsYXJpdHkuZXMsICIvIikuY29uY2F0KGdyYW51bGFyaXR5LmVzKTsKICAgICAgcmV0dXJuIHsKICAgICAgICBvcGVyYXRvcjogQVNULk9wZXJhdG9yLkxULAogICAgICAgIGV4cHJlc3Npb246IGV4cHJlc3Npb24KICAgICAgfTsKCiAgICBkZWZhdWx0OgogICAgICBleHByZXNzaW9uID0gIiIuY29uY2F0KGV4cHJlc3Npb24sICJ8fC8iKS5jb25jYXQoZ3JhbnVsYXJpdHkuZXMpOwogICAgICByZXR1cm4gewogICAgICAgIGV4cHJlc3Npb246IGV4cHJlc3Npb24KICAgICAgfTsKICB9Cn07CgpleHBvcnQgdmFyIF90ZXJtVmFsdWVzVG9RdWVyeSA9IGZ1bmN0aW9uIF90ZXJtVmFsdWVzVG9RdWVyeSh2YWx1ZXMsIG9wdGlvbnMpIHsKICB2YXIgYm9keSA9IHsKICAgIHF1ZXJ5OiB2YWx1ZXMuam9pbignICcpCiAgfTsKCiAgaWYgKGJvZHkucXVlcnkgPT09ICcnKSB7CiAgICByZXR1cm47CiAgfQoKICBpZiAob3B0aW9ucy5kZWZhdWx0RmllbGRzKSB7CiAgICBib2R5LmZpZWxkcyA9IG9wdGlvbnMuZGVmYXVsdEZpZWxkczsKICB9CgogIHJldHVybiB7CiAgICBzaW1wbGVfcXVlcnlfc3RyaW5nOiBib2R5CiAgfTsKfTsKZXhwb3J0IHZhciBfZmllbGRWYWx1ZXNUb1F1ZXJ5ID0gZnVuY3Rpb24gX2ZpZWxkVmFsdWVzVG9RdWVyeShmaWVsZCwgb3BlcmF0aW9ucywgYW5kT3IpIHsKICB2YXIgcXVlcmllcyA9IFtdOwogIGtleXNPZihvcGVyYXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChvcGVyYXRvcikgewogICAgdmFyIHZhbHVlcyA9IG9wZXJhdGlvbnNbb3BlcmF0b3JdOwoKICAgIHN3aXRjaCAob3BlcmF0b3IpIHsKICAgICAgY2FzZSBBU1QuT3BlcmF0b3IuRVE6CiAgICAgICAgdmFyIF90ZXJtcyA9IFtdOwogICAgICAgIHZhciBwaHJhc2VzID0gW107CiAgICAgICAgdmFyIGRhdGVzID0gW107CiAgICAgICAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICBpZiAoaXNEYXRlVmFsdWUodmFsdWUpKSB7CiAgICAgICAgICAgIGRhdGVzLnB1c2godmFsdWUpOwogICAgICAgICAgfSBlbHNlIGlmIChpc0RhdGVMaWtlKHZhbHVlKSkgewogICAgICAgICAgICBkYXRlcy5wdXNoKGRhdGVWYWx1ZSh2YWx1ZSkpOwogICAgICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyh2YWx1ZSkgJiYgdmFsdWUubWF0Y2goL1xzLykpIHsKICAgICAgICAgICAgcGhyYXNlcy5wdXNoKHZhbHVlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90ZXJtcy5wdXNoKHZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgaWYgKF90ZXJtcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICBxdWVyaWVzLnB1c2goewogICAgICAgICAgICBtYXRjaDogX2RlZmluZVByb3BlcnR5KHt9LCBmaWVsZCwgewogICAgICAgICAgICAgIHF1ZXJ5OiBfdGVybXMuam9pbignICcpLAogICAgICAgICAgICAgIG9wZXJhdG9yOiBhbmRPcgogICAgICAgICAgICB9KQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBpZiAocGhyYXNlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICBxdWVyaWVzLnB1c2guYXBwbHkocXVlcmllcywgX3RvQ29uc3VtYWJsZUFycmF5KHBocmFzZXMubWFwKGZ1bmN0aW9uIChwaHJhc2UpIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBtYXRjaF9waHJhc2U6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgZmllbGQsIHBocmFzZSkKICAgICAgICAgICAgfTsKICAgICAgICAgIH0pKSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoZGF0ZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgcXVlcmllcy5wdXNoLmFwcGx5KHF1ZXJpZXMsIF90b0NvbnN1bWFibGVBcnJheShkYXRlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgbWF0Y2g6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgZmllbGQsIHByb2Nlc3NEYXRlT3BlcmF0aW9uKHZhbHVlKS5leHByZXNzaW9uKQogICAgICAgICAgICB9OwogICAgICAgICAgfSkpKTsKICAgICAgICB9CgogICAgICAgIGJyZWFrOwoKICAgICAgZGVmYXVsdDoKICAgICAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIGlmIChpc0RhdGVWYWx1ZSh2YWx1ZSkpIHsKICAgICAgICAgICAgdmFyIG9wZXJhdGlvbiA9IHByb2Nlc3NEYXRlT3BlcmF0aW9uKHZhbHVlLCBvcGVyYXRvcik7CiAgICAgICAgICAgIHF1ZXJpZXMucHVzaCh7CiAgICAgICAgICAgICAgcmFuZ2U6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgZmllbGQsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgb3BlcmF0aW9uLm9wZXJhdG9yLCBvcGVyYXRpb24uZXhwcmVzc2lvbikpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcXVlcmllcy5wdXNoKHsKICAgICAgICAgICAgICByYW5nZTogX2RlZmluZVByb3BlcnR5KHt9LCBmaWVsZCwgX2RlZmluZVByb3BlcnR5KHt9LCBvcGVyYXRvciwgdmFsdWUpKQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICB9KTsKCiAgaWYgKHF1ZXJpZXMubGVuZ3RoID09PSAxKSB7CiAgICByZXR1cm4gcXVlcmllc1swXTsKICB9CgogIHZhciBrZXkgPSBhbmRPciA9PT0gJ2FuZCcgPyAnbXVzdCcgOiAnc2hvdWxkJzsKICByZXR1cm4gewogICAgYm9vbDogX2RlZmluZVByb3BlcnR5KHt9LCBrZXksIFtdLmNvbmNhdChxdWVyaWVzKSkKICB9Owp9OwpleHBvcnQgdmFyIF9pc0ZsYWdUb1F1ZXJ5ID0gZnVuY3Rpb24gX2lzRmxhZ1RvUXVlcnkoZmxhZywgb24pIHsKICByZXR1cm4gewogICAgdGVybTogX2RlZmluZVByb3BlcnR5KHt9LCBmbGFnLCBvbikKICB9Owp9OwoKdmFyIGNvbGxlY3RUZXJtcyA9IGZ1bmN0aW9uIGNvbGxlY3RUZXJtcyhjbGF1c2VzKSB7CiAgdmFyIHZhbHVlcyA9IHsKICAgIG11c3Q6IFtdLAogICAgbXVzdE5vdDogW10KICB9OwoKICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY2xhdXNlcyksCiAgICAgIF9zdGVwOwoKICB0cnkgewogICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgdmFyIGNsYXVzZSA9IF9zdGVwLnZhbHVlOwoKICAgICAgaWYgKEFTVC5NYXRjaC5pc011c3RDbGF1c2UoY2xhdXNlKSkgewogICAgICAgIHZhbHVlcy5tdXN0LnB1c2goY2xhdXNlLnZhbHVlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YWx1ZXMubXVzdE5vdC5wdXNoKGNsYXVzZS52YWx1ZSk7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9pdGVyYXRvci5lKGVycik7CiAgfSBmaW5hbGx5IHsKICAgIF9pdGVyYXRvci5mKCk7CiAgfQoKICByZXR1cm4gdmFsdWVzOwp9OwoKdmFyIGNvbGxlY3RGaWVsZHMgPSBmdW5jdGlvbiBjb2xsZWN0RmllbGRzKGNsYXVzZXMpIHsKICB2YXIgZmllbGRBcnJheSA9IGZ1bmN0aW9uIGZpZWxkQXJyYXkob2JqLCBmaWVsZCwgb3BlcmF0b3IpIHsKICAgIGlmICghb2JqW2ZpZWxkXSkgewogICAgICBvYmpbZmllbGRdID0ge307CiAgICB9CgogICAgaWYgKCFvYmpbZmllbGRdW29wZXJhdG9yXSkgewogICAgICBvYmpbZmllbGRdW29wZXJhdG9yXSA9IFtdOwogICAgfQoKICAgIHJldHVybiBvYmpbZmllbGRdW29wZXJhdG9yXTsKICB9OwoKICByZXR1cm4gY2xhdXNlcy5yZWR1Y2UoZnVuY3Rpb24gKGZpZWxkcywgY2xhdXNlKSB7CiAgICBpZiAoQVNULk1hdGNoLmlzTXVzdENsYXVzZShjbGF1c2UpKSB7CiAgICAgIGlmIChpc0FycmF5KGNsYXVzZS52YWx1ZSkpIHsKICAgICAgICB2YXIgX2ZpZWxkQXJyYXk7CgogICAgICAgIChfZmllbGRBcnJheSA9IGZpZWxkQXJyYXkoZmllbGRzLm11c3Qub3IsIGNsYXVzZS5maWVsZCwgY2xhdXNlLm9wZXJhdG9yKSkucHVzaC5hcHBseShfZmllbGRBcnJheSwgX3RvQ29uc3VtYWJsZUFycmF5KGNsYXVzZS52YWx1ZSkpOwogICAgICB9IGVsc2UgewogICAgICAgIGZpZWxkQXJyYXkoZmllbGRzLm11c3QuYW5kLCBjbGF1c2UuZmllbGQsIGNsYXVzZS5vcGVyYXRvcikucHVzaChjbGF1c2UudmFsdWUpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBpZiAoaXNBcnJheShjbGF1c2UudmFsdWUpKSB7CiAgICAgICAgdmFyIF9maWVsZEFycmF5MjsKCiAgICAgICAgKF9maWVsZEFycmF5MiA9IGZpZWxkQXJyYXkoZmllbGRzLm11c3ROb3Qub3IsIGNsYXVzZS5maWVsZCwgY2xhdXNlLm9wZXJhdG9yKSkucHVzaC5hcHBseShfZmllbGRBcnJheTIsIF90b0NvbnN1bWFibGVBcnJheShjbGF1c2UudmFsdWUpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBmaWVsZEFycmF5KGZpZWxkcy5tdXN0Tm90LmFuZCwgY2xhdXNlLmZpZWxkLCBjbGF1c2Uub3BlcmF0b3IpLnB1c2goY2xhdXNlLnZhbHVlKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBmaWVsZHM7CiAgfSwgewogICAgbXVzdDogewogICAgICBhbmQ6IHt9LAogICAgICBvcjoge30KICAgIH0sCiAgICBtdXN0Tm90OiB7CiAgICAgIGFuZDoge30sCiAgICAgIG9yOiB7fQogICAgfQogIH0pOwp9OwoKdmFyIGNsYXVzZXNUb0VzUXVlcnlEc2wgPSBmdW5jdGlvbiBjbGF1c2VzVG9Fc1F1ZXJ5RHNsKF9yZWYpIHsKICB2YXIgZmllbGRzID0gX3JlZi5maWVsZHMsCiAgICAgIHRlcm1zID0gX3JlZi50ZXJtcywKICAgICAgaXMgPSBfcmVmLmlzOwogIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICB2YXIgZXh0cmFNdXN0UXVlcmllcyA9IG9wdGlvbnMuZXh0cmFNdXN0UXVlcmllcyB8fCBbXTsKICB2YXIgZXh0cmFNdXN0Tm90UXVlcmllcyA9IG9wdGlvbnMuZXh0cmFNdXN0Tm90UXVlcmllcyB8fCBbXTsKICB2YXIgdGVybVZhbHVlc1RvUXVlcnkgPSBvcHRpb25zLnRlcm1WYWx1ZXNUb1F1ZXJ5IHx8IF90ZXJtVmFsdWVzVG9RdWVyeTsKICB2YXIgZmllbGRWYWx1ZXNUb1F1ZXJ5ID0gb3B0aW9ucy5maWVsZFZhbHVlc1RvUXVlcnkgfHwgX2ZpZWxkVmFsdWVzVG9RdWVyeTsKICB2YXIgaXNGbGFnVG9RdWVyeSA9IG9wdGlvbnMuaXNGbGFnVG9RdWVyeSB8fCBfaXNGbGFnVG9RdWVyeTsKICB2YXIgbXVzdCA9IFtdOwogIG11c3QucHVzaC5hcHBseShtdXN0LCBfdG9Db25zdW1hYmxlQXJyYXkoZXh0cmFNdXN0UXVlcmllcykpOwogIHZhciB0ZXJtTXVzdFF1ZXJ5ID0gdGVybVZhbHVlc1RvUXVlcnkodGVybXMubXVzdCwgb3B0aW9ucyk7CgogIGlmICh0ZXJtTXVzdFF1ZXJ5KSB7CiAgICBtdXN0LnB1c2godGVybU11c3RRdWVyeSk7CiAgfQoKICBPYmplY3Qua2V5cyhmaWVsZHMubXVzdC5hbmQpLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7CiAgICBtdXN0LnB1c2goZmllbGRWYWx1ZXNUb1F1ZXJ5KGZpZWxkLCBmaWVsZHMubXVzdC5hbmRbZmllbGRdLCAnYW5kJykpOwogIH0pOwogIE9iamVjdC5rZXlzKGZpZWxkcy5tdXN0Lm9yKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkgewogICAgbXVzdC5wdXNoKGZpZWxkVmFsdWVzVG9RdWVyeShmaWVsZCwgZmllbGRzLm11c3Qub3JbZmllbGRdLCAnb3InKSk7CiAgfSk7CiAgaXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhdXNlKSB7CiAgICBtdXN0LnB1c2goaXNGbGFnVG9RdWVyeShjbGF1c2UuZmxhZywgQVNULk1hdGNoLmlzTXVzdENsYXVzZShjbGF1c2UpKSk7CiAgfSk7CiAgdmFyIG11c3ROb3QgPSBbXTsKICBtdXN0Tm90LnB1c2guYXBwbHkobXVzdE5vdCwgX3RvQ29uc3VtYWJsZUFycmF5KGV4dHJhTXVzdE5vdFF1ZXJpZXMpKTsKICB2YXIgdGVybU11c3ROb3RRdWVyeSA9IHRlcm1WYWx1ZXNUb1F1ZXJ5KHRlcm1zLm11c3ROb3QsIG9wdGlvbnMpOwoKICBpZiAodGVybU11c3ROb3RRdWVyeSkgewogICAgbXVzdE5vdC5wdXNoKHRlcm1NdXN0Tm90UXVlcnkpOwogIH0KCiAgT2JqZWN0LmtleXMoZmllbGRzLm11c3ROb3QuYW5kKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkgewogICAgbXVzdE5vdC5wdXNoKGZpZWxkVmFsdWVzVG9RdWVyeShmaWVsZCwgZmllbGRzLm11c3ROb3QuYW5kW2ZpZWxkXSwgJ2FuZCcpKTsKICB9KTsKICBPYmplY3Qua2V5cyhmaWVsZHMubXVzdE5vdC5vcikuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHsKICAgIG11c3ROb3QucHVzaChmaWVsZFZhbHVlc1RvUXVlcnkoZmllbGQsIGZpZWxkcy5tdXN0Tm90Lm9yW2ZpZWxkXSwgJ29yJykpOwogIH0pOwogIHZhciBib29sID0ge307CgogIGlmIChtdXN0Lmxlbmd0aCAhPT0gMCkgewogICAgYm9vbC5tdXN0ID0gbXVzdDsKICB9CgogIGlmIChtdXN0Tm90Lmxlbmd0aCAhPT0gMCkgewogICAgYm9vbC5tdXN0X25vdCA9IG11c3ROb3Q7CiAgfQoKICByZXR1cm4gYm9vbDsKfTsKCnZhciBFTVBUWV9URVJNUyA9IHsKICBtdXN0OiBbXSwKICBtdXN0Tm90OiBbXQp9Owp2YXIgRU1QVFlfRklFTERTID0gewogIG11c3Q6IHsKICAgIGFuZDoge30sCiAgICBvcjoge30KICB9LAogIG11c3ROb3Q6IHsKICAgIGFuZDoge30sCiAgICBvcjoge30KICB9Cn07CmV4cG9ydCB2YXIgYXN0VG9Fc1F1ZXJ5RHNsID0gZnVuY3Rpb24gYXN0VG9Fc1F1ZXJ5RHNsKGFzdCkgewogIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKCiAgaWYgKGFzdC5jbGF1c2VzLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuIHsKICAgICAgbWF0Y2hfYWxsOiB7fQogICAgfTsKICB9CgogIHZhciB0ZXJtcyA9IGNvbGxlY3RUZXJtcyhhc3QuZ2V0VGVybUNsYXVzZXMoKSk7CiAgdmFyIGZpZWxkcyA9IGNvbGxlY3RGaWVsZHMoYXN0LmdldEZpZWxkQ2xhdXNlcygpKTsKICB2YXIgaXMgPSBhc3QuZ2V0SXNDbGF1c2VzKCk7CiAgdmFyIG1hdGNoZXNCb29sID0gY2xhdXNlc1RvRXNRdWVyeURzbCh7CiAgICB0ZXJtczogdGVybXMsCiAgICBmaWVsZHM6IGZpZWxkcywKICAgIGlzOiBpcwogIH0sIG9wdGlvbnMpOwogIHZhciBoYXNUb3BNYXRjaGVzID0gT2JqZWN0LmtleXMobWF0Y2hlc0Jvb2wpLmxlbmd0aCA+IDA7CiAgdmFyIGdyb3VwQ2xhdXNlcyA9IGFzdC5nZXRHcm91cENsYXVzZXMoKTsKCiAgaWYgKGdyb3VwQ2xhdXNlcy5sZW5ndGggPT09IDApIHsKICAgIC8vIHRoZXJlIGFyZSBubyBHcm91cENsYXVzZXMsIGV2ZXJ5dGhpbmcgYXQgdG9wIGxldmVsIGlzIGNvbWJpbmVkIGFzIGEgbXVzdAogICAgcmV0dXJuIHsKICAgICAgYm9vbDogbWF0Y2hlc0Jvb2wKICAgIH07CiAgfSBlbHNlIHsKICAgIC8vIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBHcm91cENsYXVzZSwgd3JhcCB0aGUgYWJvdmUgY2xhdXNlcyBpbiBhbm90aGVyIGxheWVyIGFuZCBhcHBlbmQgdGhlIE9ScwogICAgdmFyIG11c3QgPSBncm91cENsYXVzZXMucmVkdWNlKGZ1bmN0aW9uIChtdXN0LCBncm91cENsYXVzZSkgewogICAgICB2YXIgY2xhdXNlcyA9IGdyb3VwQ2xhdXNlLnZhbHVlLnJlZHVjZShmdW5jdGlvbiAoY2xhdXNlcywgY2xhdXNlKSB7CiAgICAgICAgaWYgKEFTVC5UZXJtLmlzSW5zdGFuY2UoY2xhdXNlKSkgewogICAgICAgICAgY2xhdXNlcy5wdXNoKGNsYXVzZXNUb0VzUXVlcnlEc2woewogICAgICAgICAgICB0ZXJtczogY29sbGVjdFRlcm1zKFtjbGF1c2VdKSwKICAgICAgICAgICAgZmllbGRzOiBFTVBUWV9GSUVMRFMsCiAgICAgICAgICAgIGlzOiBbXQogICAgICAgICAgfSkpOwogICAgICAgIH0gZWxzZSBpZiAoQVNULkZpZWxkLmlzSW5zdGFuY2UoY2xhdXNlKSkgewogICAgICAgICAgY2xhdXNlcy5wdXNoKGNsYXVzZXNUb0VzUXVlcnlEc2woewogICAgICAgICAgICB0ZXJtczogRU1QVFlfVEVSTVMsCiAgICAgICAgICAgIGZpZWxkczogY29sbGVjdEZpZWxkcyhbY2xhdXNlXSksCiAgICAgICAgICAgIGlzOiBbXQogICAgICAgICAgfSkpOwogICAgICAgIH0gZWxzZSBpZiAoQVNULklzLmlzSW5zdGFuY2UoY2xhdXNlKSkgewogICAgICAgICAgY2xhdXNlcy5wdXNoKGNsYXVzZXNUb0VzUXVlcnlEc2woewogICAgICAgICAgICB0ZXJtczogRU1QVFlfVEVSTVMsCiAgICAgICAgICAgIGZpZWxkczogRU1QVFlfRklFTERTLAogICAgICAgICAgICBpczogW2NsYXVzZV0KICAgICAgICAgIH0pKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBjbGF1c2VzOwogICAgICB9LCBbXSk7CiAgICAgIG11c3QucHVzaCh7CiAgICAgICAgYm9vbDogewogICAgICAgICAgc2hvdWxkOiBjbGF1c2VzLm1hcChmdW5jdGlvbiAoY2xhdXNlKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgYm9vbDogY2xhdXNlCiAgICAgICAgICAgIH07CiAgICAgICAgICB9KQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiBtdXN0OwogICAgfSwgaGFzVG9wTWF0Y2hlcyAvLyBvbmx5IGluY2x1ZGUgdGhlIGZpcnN0IG1hdGNoIGdyb3VwIGlmIHRoZXJlIGFyZSBhbnkgY29uZGl0aW9ucwogICAgPyBbewogICAgICBib29sOiBtYXRjaGVzQm9vbAogICAgfV0gOiBbXSk7CiAgICByZXR1cm4gewogICAgICBib29sOiB7CiAgICAgICAgbXVzdDogbXVzdAogICAgICB9CiAgICB9OwogIH0KfTs="},{"version":3,"sources":["D:/work/eui/src/components/search_bar/query/ast_to_es_query_dsl.ts"],"names":["printIso8601","isDateValue","dateValue","AST","isArray","isDateLike","isString","keysOf","processDateOperation","value","operator","granularity","resolve","expression","Operator","GT","es","GTE","LT","LTE","_termValuesToQuery","values","options","body","query","join","defaultFields","fields","simple_query_string","_fieldValuesToQuery","field","operations","andOr","queries","forEach","EQ","terms","phrases","dates","push","match","length","map","phrase","match_phrase","operation","range","key","bool","_isFlagToQuery","flag","on","term","collectTerms","clauses","must","mustNot","clause","Match","isMustClause","collectFields","fieldArray","obj","reduce","or","and","clausesToEsQueryDsl","is","extraMustQueries","extraMustNotQueries","termValuesToQuery","fieldValuesToQuery","isFlagToQuery","termMustQuery","Object","keys","termMustNotQuery","must_not","EMPTY_TERMS","EMPTY_FIELDS","astToEsQueryDsl","ast","match_all","getTermClauses","getFieldClauses","getIsClauses","matchesBool","hasTopMatches","groupClauses","getGroupClauses","groupClause","Term","isInstance","Field","Is","should"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { printIso8601 } from './date_format';\nimport { isDateValue, dateValue, DateValue } from './date_value';\nimport {\n  _AST,\n  AST,\n  FieldClause,\n  IsClause,\n  OperatorType,\n  TermClause,\n  Value,\n} from './ast';\nimport { isArray, isDateLike, isString } from '../../../services/predicate';\nimport { keysOf } from '../../common';\n\nexport interface QueryContainer {\n  bool?: BoolQuery;\n  match_all?: {};\n  match?: object;\n  match_phrase?: object;\n  range?: object;\n  term?: object;\n  simple_query_string?: object;\n}\n\ninterface TermsQuery {\n  must: Value[];\n  mustNot: Value[];\n}\n\ninterface BoolQuery {\n  must?: QueryContainer[];\n  must_not?: QueryContainer[];\n  should?: QueryContainer[];\n}\n\ninterface FieldsQuery {\n  must: {\n    and: {\n      [field: string]: any;\n    };\n    or: {\n      [field: string]: any;\n    };\n  };\n  mustNot: {\n    and: {\n      [field: string]: any;\n    };\n    or: {\n      [field: string]: any;\n    };\n  };\n}\n\ntype Options = Partial<{\n  defaultFields: string[];\n  extraMustQueries: QueryContainer[];\n  extraMustNotQueries: QueryContainer[];\n  termValuesToQuery: (terms: Value[], options: {}) => QueryContainer;\n  fieldValuesToQuery: (terms: string, options: {}) => QueryContainer;\n  isFlagToQuery: (flag: string, on: boolean) => QueryContainer;\n}>;\n\nconst processDateOperation = (value: DateValue, operator?: OperatorType) => {\n  const { granularity, resolve } = value;\n  let expression = printIso8601(resolve());\n  if (!granularity) {\n    return { operator, expression };\n  }\n  switch (operator) {\n    case AST.Operator.GT:\n      expression = `${expression}||+1${granularity.es}/${granularity.es}`;\n      return { operator: AST.Operator.GTE, expression };\n\n    case AST.Operator.GTE:\n      expression = `${expression}||/${granularity.es}`;\n      return { operator, expression };\n\n    case AST.Operator.LT:\n      expression = `${expression}||/${granularity.es}`;\n      return { operator, expression };\n\n    case AST.Operator.LTE:\n      expression = `${expression}||+1${granularity.es}/${granularity.es}`;\n      return { operator: AST.Operator.LT, expression };\n\n    default:\n      expression = `${expression}||/${granularity.es}`;\n      return { expression };\n  }\n};\n\nexport const _termValuesToQuery = (values: Value[], options: Options) => {\n  const body: { query: string; fields?: string[] } = {\n    query: values.join(' '),\n  };\n  if (body.query === '') {\n    return;\n  }\n  if (options.defaultFields) {\n    body.fields = options.defaultFields;\n  }\n  return {\n    simple_query_string: body,\n  };\n};\n\nexport const _fieldValuesToQuery = (\n  field: string,\n  operations: { [x in OperatorType]: Value[] },\n  andOr: 'and' | 'or'\n) => {\n  const queries: QueryContainer[] = [];\n\n  keysOf(operations).forEach((operator) => {\n    const values = operations[operator];\n    switch (operator) {\n      case AST.Operator.EQ:\n        const terms: Value[] = [];\n        const phrases: string[] = [];\n        const dates: DateValue[] = [];\n\n        values.forEach((value: Value) => {\n          if (isDateValue(value)) {\n            dates.push(value);\n          } else if (isDateLike(value)) {\n            dates.push(dateValue(value)!);\n          } else if (isString(value) && value.match(/\\s/)) {\n            phrases.push(value);\n          } else {\n            terms.push(value);\n          }\n        });\n\n        if (terms.length > 0) {\n          queries.push({\n            match: {\n              [field]: {\n                query: terms.join(' '),\n                operator: andOr,\n              },\n            },\n          });\n        }\n\n        if (phrases.length > 0) {\n          queries.push(\n            ...phrases.map((phrase) => ({\n              match_phrase: {\n                [field]: phrase,\n              },\n            }))\n          );\n        }\n\n        if (dates.length > 0) {\n          queries.push(\n            ...dates.map((value) => ({\n              match: {\n                [field]: processDateOperation(value).expression,\n              },\n            }))\n          );\n        }\n\n        break;\n\n      default:\n        values.forEach((value: Value) => {\n          if (isDateValue(value)) {\n            const operation = processDateOperation(value, operator);\n            queries.push({\n              range: {\n                [field]: {\n                  [operation.operator!]: operation.expression,\n                },\n              },\n            });\n          } else {\n            queries.push({\n              range: {\n                [field]: {\n                  [operator]: value,\n                },\n              },\n            });\n          }\n        });\n    }\n  });\n\n  if (queries.length === 1) {\n    return queries[0];\n  }\n\n  const key = andOr === 'and' ? 'must' : 'should';\n  return {\n    bool: {\n      [key]: [...queries],\n    },\n  };\n};\n\nexport const _isFlagToQuery = (flag: string, on: boolean) => {\n  return {\n    term: { [flag]: on },\n  };\n};\n\nconst collectTerms = (clauses: TermClause[]) => {\n  const values: TermsQuery = { must: [], mustNot: [] };\n\n  for (const clause of clauses) {\n    if (AST.Match.isMustClause(clause)) {\n      values.must.push(clause.value);\n    } else {\n      values.mustNot.push(clause.value);\n    }\n  }\n\n  return values;\n};\n\nconst collectFields = (clauses: FieldClause[]) => {\n  const fieldArray = (obj: any, field: string, operator: OperatorType) => {\n    if (!obj[field]) {\n      obj[field] = {};\n    }\n    if (!obj[field][operator]) {\n      obj[field][operator] = [];\n    }\n    return obj[field][operator];\n  };\n\n  return clauses.reduce(\n    (fields, clause) => {\n      if (AST.Match.isMustClause(clause)) {\n        if (isArray(clause.value)) {\n          fieldArray(fields.must.or, clause.field, clause.operator).push(\n            ...clause.value\n          );\n        } else {\n          fieldArray(fields.must.and, clause.field, clause.operator).push(\n            clause.value\n          );\n        }\n      } else {\n        if (isArray(clause.value)) {\n          fieldArray(fields.mustNot.or, clause.field, clause.operator).push(\n            ...clause.value\n          );\n        } else {\n          fieldArray(fields.mustNot.and, clause.field, clause.operator).push(\n            clause.value\n          );\n        }\n      }\n      return fields;\n    },\n    {\n      must: { and: {}, or: {} },\n      mustNot: { and: {}, or: {} },\n    }\n  );\n};\n\nconst clausesToEsQueryDsl = (\n  {\n    fields,\n    terms,\n    is,\n  }: { fields: FieldsQuery; terms: TermsQuery; is: IsClause[] },\n  options: Options = {}\n) => {\n  const extraMustQueries = options.extraMustQueries || [];\n  const extraMustNotQueries = options.extraMustNotQueries || [];\n  const termValuesToQuery = options.termValuesToQuery || _termValuesToQuery;\n  const fieldValuesToQuery = options.fieldValuesToQuery || _fieldValuesToQuery;\n  const isFlagToQuery = options.isFlagToQuery || _isFlagToQuery;\n\n  const must: QueryContainer[] = [];\n  must.push(...extraMustQueries);\n\n  const termMustQuery = termValuesToQuery(terms.must, options);\n  if (termMustQuery) {\n    must.push(termMustQuery);\n  }\n  Object.keys(fields.must.and).forEach((field) => {\n    must.push(fieldValuesToQuery(field, fields.must.and[field], 'and'));\n  });\n  Object.keys(fields.must.or).forEach((field) => {\n    must.push(fieldValuesToQuery(field, fields.must.or[field], 'or'));\n  });\n  is.forEach((clause) => {\n    must.push(isFlagToQuery(clause.flag, AST.Match.isMustClause(clause)));\n  });\n\n  const mustNot: QueryContainer[] = [];\n  mustNot.push(...extraMustNotQueries);\n  const termMustNotQuery = termValuesToQuery(terms.mustNot, options);\n  if (termMustNotQuery) {\n    mustNot.push(termMustNotQuery);\n  }\n  Object.keys(fields.mustNot.and).forEach((field) => {\n    mustNot.push(fieldValuesToQuery(field, fields.mustNot.and[field], 'and'));\n  });\n  Object.keys(fields.mustNot.or).forEach((field) => {\n    mustNot.push(fieldValuesToQuery(field, fields.mustNot.or[field], 'or'));\n  });\n\n  const bool: BoolQuery = {};\n  if (must.length !== 0) {\n    bool.must = must;\n  }\n  if (mustNot.length !== 0) {\n    bool.must_not = mustNot;\n  }\n\n  return bool;\n};\n\nconst EMPTY_TERMS: TermsQuery = { must: [], mustNot: [] };\nconst EMPTY_FIELDS: FieldsQuery = {\n  must: { and: {}, or: {} },\n  mustNot: { and: {}, or: {} },\n};\n\nexport const astToEsQueryDsl = (ast: _AST, options = {}): QueryContainer => {\n  if (ast.clauses.length === 0) {\n    return { match_all: {} };\n  }\n\n  const terms = collectTerms(ast.getTermClauses());\n  const fields = collectFields(ast.getFieldClauses());\n  const is = ast.getIsClauses();\n\n  const matchesBool = clausesToEsQueryDsl({ terms, fields, is }, options);\n  const hasTopMatches = Object.keys(matchesBool).length > 0;\n\n  const groupClauses = ast.getGroupClauses();\n  if (groupClauses.length === 0) {\n    // there are no GroupClauses, everything at top level is combined as a must\n    return { bool: matchesBool };\n  } else {\n    // there is at least one GroupClause, wrap the above clauses in another layer and append the ORs\n    const must = groupClauses.reduce(\n      (must, groupClause) => {\n        const clauses = groupClause.value.reduce((clauses, clause) => {\n          if (AST.Term.isInstance(clause)) {\n            clauses.push(\n              clausesToEsQueryDsl({\n                terms: collectTerms([clause]),\n                fields: EMPTY_FIELDS,\n                is: [],\n              })\n            );\n          } else if (AST.Field.isInstance(clause)) {\n            clauses.push(\n              clausesToEsQueryDsl({\n                terms: EMPTY_TERMS,\n                fields: collectFields([clause]),\n                is: [],\n              })\n            );\n          } else if (AST.Is.isInstance(clause)) {\n            clauses.push(\n              clausesToEsQueryDsl({\n                terms: EMPTY_TERMS,\n                fields: EMPTY_FIELDS,\n                is: [clause],\n              })\n            );\n          }\n          return clauses;\n        }, [] as BoolQuery[]);\n\n        must.push({\n          bool: {\n            should: clauses.map((clause) => ({ bool: clause })),\n          },\n        });\n        return must;\n      },\n      hasTopMatches // only include the first match group if there are any conditions\n        ? ([{ bool: matchesBool }] as QueryContainer[])\n        : ([] as QueryContainer[])\n    );\n\n    return {\n      bool: { must },\n    };\n  }\n};\n"]}]}