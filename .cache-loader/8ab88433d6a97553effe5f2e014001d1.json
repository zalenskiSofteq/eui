{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\search_bar\\query\\execute_ast.ts","dependencies":[{"path":"D:\\work\\eui\\src\\components\\search_bar\\query\\execute_ast.ts","mtime":1649070093753},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/search_bar/query/execute_ast.ts"],"names":["get","isString","isArray","eq","exact","gt","gte","lt","lte","AST","EXPLAIN_FIELD","nameToOperatorMap","Operator","EQ","EXACT","GT","GTE","LT","LTE","defaultIsClauseMatcher","item","clause","explain","type","flag","match","value","must","Match","isMustClause","hit","push","fieldClauseMatcher","field","clauses","every","operator","isMust","token","itemValue","some","v","extractStringFieldsFromItem","Object","keys","reduce","fields","key","termClauseMatcher","searchableFields","equals","containsMatches","isMatch","createFilter","ast","defaultFields","isClauseMatcher","explainLines","undefined","termClauses","getTermClauses","getFieldNames","isClauses","getIsClauses","groupClauses","getGroupClauses","isTermMatch","isFieldsMatch","getFieldClauses","isIsMatch","isGroupMatch","matchesGroup","Term","isInstance","Field","Is","Error","executeAst","items","options","filter"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { get } from '../../../services/objects';\nimport { isString, isArray } from '../../../services/predicate';\nimport {\n  ClauseValue,\n  eq,\n  exact,\n  FieldValue,\n  gt,\n  gte,\n  lt,\n  lte,\n} from './operators';\nimport {\n  _AST,\n  AST,\n  Clause,\n  FieldClause,\n  IsClause,\n  MatchType,\n  TermClause,\n  Value,\n} from './ast';\n\nconst EXPLAIN_FIELD = '__explain';\n\nconst nameToOperatorMap = {\n  [AST.Operator.EQ]: eq,\n  [AST.Operator.EXACT]: exact,\n  [AST.Operator.GT]: gt,\n  [AST.Operator.GTE]: gte,\n  [AST.Operator.LT]: lt,\n  [AST.Operator.LTE]: lte,\n};\n\ninterface Explain {\n  hit: boolean;\n  type: Clause['type'];\n  field?: string;\n  value?: Value | Value[];\n  flag?: string;\n  match?: MatchType;\n  operator?: any; // It's not really worth specifying this at the moment\n}\n\nconst defaultIsClauseMatcher = <T>(\n  item: T,\n  clause: IsClause,\n  explain?: Explain[]\n) => {\n  const { type, flag, match } = clause;\n  const value = get(item, clause.flag);\n  const must = AST.Match.isMustClause(clause);\n  const hit = !!value === must;\n  if (explain && hit) {\n    explain.push({ hit, type, flag, match });\n  }\n  return hit;\n};\n\nconst fieldClauseMatcher = <T>(\n  item: T,\n  field: string,\n  clauses: FieldClause[] = [],\n  explain?: Explain[]\n) => {\n  return clauses.every((clause) => {\n    const { type, value, match } = clause;\n    let operator = nameToOperatorMap[clause.operator];\n    if (!operator) {\n      // unknown matcher\n      return true;\n    }\n    if (!AST.Match.isMust(match)) {\n      operator = (value: FieldValue, token: ClauseValue) =>\n        !nameToOperatorMap[clause.operator](value, token);\n    }\n    const itemValue = get(item, field);\n    const hit = isArray(value)\n      ? value.some((v) => operator(itemValue, v))\n      : operator(itemValue, value);\n    if (explain && hit) {\n      explain.push({ hit, type, field, value, match, operator });\n    }\n    return hit;\n  });\n};\n\n// You might think that we could specify `item: T` here and do something\n// with `keyof`, but that wouldn't work with `nested.field.name`\nconst extractStringFieldsFromItem = (item: any) => {\n  return Object.keys(item).reduce((fields, key) => {\n    if (isString(item[key])) {\n      fields.push(key);\n    }\n    return fields;\n  }, [] as string[]);\n};\n\nconst termClauseMatcher = <T>(\n  item: T,\n  fields: string[] | undefined,\n  clauses: TermClause[] = [],\n  explain?: Explain[]\n) => {\n  const searchableFields = fields || extractStringFieldsFromItem(item);\n  return clauses.every((clause) => {\n    const { type, value, match } = clause;\n    const isMustClause = AST.Match.isMustClause(clause);\n    const equals = nameToOperatorMap[AST.Operator.EQ];\n\n    const containsMatches = searchableFields.some((field) => {\n      const itemValue = get(item, field);\n      const isMatch = equals(itemValue, value);\n\n      if (explain) {\n        // If testing for the presence of a term, then we record a match as a match.\n        // If testing for the absence of a term, then we invert this logic: we record a\n        // non-match as a match.\n        const hit = (isMustClause && isMatch) || (!isMustClause && !isMatch);\n        if (hit) {\n          explain.push({ hit, type, field, match, value });\n        }\n      }\n\n      return isMatch;\n    });\n\n    if (isMustClause) {\n      // If we're testing for the presence of a term, then we only need 1 field to match.\n      return containsMatches;\n    }\n\n    // If we're testing for the absence of a term, we can't have any matching fields at all.\n    return !containsMatches;\n  });\n};\n\nexport const createFilter = <T extends {}>(\n  ast: _AST,\n  defaultFields: string[] | undefined,\n  isClauseMatcher = defaultIsClauseMatcher,\n  explain = false\n) => {\n  // Return items which pass ALL conditions: matches the terms entered, the specified field values,\n  // and the specified \"is\" clauses.\n  return (item: T) => {\n    const explainLines = explain ? ([] as Explain[]) : undefined;\n\n    if (explainLines) {\n      // @ts-ignore technically, we could require T to extend `{ __explain?: Explain[] }` but that seems\n      // like a ridiculous requirement on the caller.\n      item[EXPLAIN_FIELD] = explainLines;\n    }\n\n    const termClauses = ast.getTermClauses();\n    const fields = ast.getFieldNames();\n    const isClauses = ast.getIsClauses();\n    const groupClauses = ast.getGroupClauses();\n\n    const isTermMatch = termClauseMatcher(\n      item,\n      defaultFields,\n      termClauses,\n      explainLines\n    );\n    if (!isTermMatch) {\n      return false;\n    }\n\n    const isFieldsMatch = fields.every((field) =>\n      fieldClauseMatcher(item, field, ast.getFieldClauses(field), explainLines)\n    );\n    if (!isFieldsMatch) {\n      return false;\n    }\n\n    const isIsMatch = isClauses.every((clause) =>\n      isClauseMatcher(item, clause, explainLines)\n    );\n    if (!isIsMatch) {\n      return false;\n    }\n\n    const isGroupMatch = groupClauses.every((clause) => {\n      const matchesGroup = clause.value.some((clause) => {\n        if (AST.Term.isInstance(clause)) {\n          return termClauseMatcher(item, defaultFields, [clause], explainLines);\n        }\n        if (AST.Field.isInstance(clause)) {\n          return fieldClauseMatcher(item, clause.field, [clause], explainLines);\n        }\n        if (AST.Is.isInstance(clause)) {\n          return isClauseMatcher(item, clause, explainLines);\n        }\n        throw new Error(`Unknown query clause type in group, [${clause.type}]`);\n      });\n      return AST.Match.isMustClause(clause) ? matchesGroup : !matchesGroup;\n    });\n\n    return isGroupMatch;\n  };\n};\n\ninterface Options {\n  isClauseMatcher?: typeof defaultIsClauseMatcher;\n  defaultFields?: string[];\n  explain?: boolean;\n}\n\nexport function executeAst<T>(\n  ast: _AST,\n  items: T[],\n  options: Options = {}\n): T[] {\n  const { isClauseMatcher, defaultFields, explain } = options;\n  const filter = createFilter(ast, defaultFields, isClauseMatcher, explain);\n  return items.filter(filter);\n}\n"]}]}