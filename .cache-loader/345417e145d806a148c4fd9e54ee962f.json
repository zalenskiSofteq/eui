{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\selectable\\selectable_option.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\selectable\\selectable_option.tsx","mtime":1649070093762},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":""},{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { HTMLAttributes } from 'react';\nimport { CommonProps, ExclusiveUnion } from '../common';\n\nexport type EuiSelectableOptionCheckedType = 'on' | 'off' | undefined;\n\nexport type EuiSelectableOptionBase = CommonProps & {\n  /**\n   * Visible label of option.\n   * Must be unique across items if `key` is not supplied\n   */\n  label: string;\n  /**\n   * Optionally change the searchable term by passing a different string other than the `label`.\n   * Best used when creating a custom `optionRender` to separate the label from metadata but allowing to search on both\n   */\n  searchableLabel?: string;\n  /**\n   * Must be unique across items.\n   * Will be used to match options instead of `label`\n   */\n  key?: string;\n  /**\n   * Leave `undefined` to indicate not selected,\n   * 'on' to indicate inclusion and\n   * 'off' to indicate exclusion\n   */\n  checked?: EuiSelectableOptionCheckedType;\n  disabled?: boolean;\n  /**\n   * Optional `boolean`.\n   * Set to `true` to indicate object is just a grouping label, not a selectable item\n   */\n  isGroupLabel?: false;\n  /**\n   * Node to add between the selection icon and the label\n   */\n  prepend?: React.ReactNode;\n  /**\n   * Node to add to the far right of the item\n   */\n  append?: React.ReactNode;\n  ref?: (optionIndex: number) => void;\n  /**\n   * Disallow `id` from being set.\n   * Option item `id`s are coordinated at a higher level for a11y reasons.\n   */\n  id?: never;\n};\n\ntype _EuiSelectableGroupLabelOption = Omit<\n  EuiSelectableOptionBase,\n  'isGroupLabel'\n> &\n  Exclude<HTMLAttributes<HTMLDivElement>, 'id'> & {\n    isGroupLabel: true;\n  };\n\nexport type EuiSelectableGroupLabelOption<T> = _EuiSelectableGroupLabelOption &\n  T;\n\ntype _EuiSelectableLIOption = EuiSelectableOptionBase &\n  Exclude<HTMLAttributes<HTMLLIElement>, 'id'>;\n\nexport type EuiSelectableLIOption<T> = _EuiSelectableLIOption & T;\n\nexport type EuiSelectableOption<T = {}> = ExclusiveUnion<\n  EuiSelectableGroupLabelOption<T>,\n  EuiSelectableLIOption<T>\n>;\n"]}]}