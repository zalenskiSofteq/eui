{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\date_picker\\super_date_picker\\quick_select_popover\\quick_select_utils.ts","dependencies":[{"path":"D:\\work\\eui\\src\\components\\date_picker\\super_date_picker\\quick_select_popover\\quick_select_utils.ts","mtime":1649070093380},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtaW50IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2giOwoKLyoKICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yCiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoCiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0CiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIKICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkKICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiAqICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQogKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwogKiB1bmRlciB0aGUgTGljZW5zZS4KICovCmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JzsKaW1wb3J0IGRhdGVNYXRoIGZyb20gJ0BlbGFzdGljL2RhdGVtYXRoJzsKaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2aWNlcy9wcmVkaWNhdGUnOwppbXBvcnQgeyByZWxhdGl2ZVVuaXRzRnJvbUxhcmdlc3RUb1NtYWxsZXN0IH0gZnJvbSAnLi4vcmVsYXRpdmVfb3B0aW9ucyc7CmltcG9ydCB7IERBVEVfTU9ERVMgfSBmcm9tICcuLi9kYXRlX21vZGVzJzsKdmFyIExBU1QgPSAnbGFzdCc7CnZhciBORVhUID0gJ25leHQnOwoKdmFyIGlzTm93ID0gZnVuY3Rpb24gaXNOb3codmFsdWUpIHsKICByZXR1cm4gdmFsdWUgPT09IERBVEVfTU9ERVMuTk9XOwp9OwovKioKICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRpbWUgdmFsdWUsIHRpbWUgdW5pdCBhbmQgdGltZSB0ZW5zZSBmb3IgYSBnaXZlbiB0aW1lIHN0cmluZy4KICoKICogRm9yIGV4YW1wbGU6IGZvciBgbm93LTQwbWAgaXQgd2lsbCBwYXJzZSBvdXRwdXQgYXMgdGltZSB2YWx1ZSB0byBgNDBgIHRpbWUgdW5pdCB0byBgbWAgYW5kIHRpbWUgdW5pdCB0byBgbGFzdGAuCiAqCiAqIElmIGdpdmVuIGEgZGF0ZXRpbWUgc3RyaW5nIGl0IHdpbGwgcmV0dXJuIGEgZGVmYXVsdCB2YWx1ZS4KICoKICogSWYgdGhlIGdpdmVuIHN0cmluZyBpcyBpbiB0aGUgZm9ybWF0IHN1Y2ggYXMgYG5vdy9kYCBpdCB3aWxsIHBhcnNlIHRoZSBzdHJpbmcgdG8gbW9tZW50IG9iamVjdCBhbmQgZmluZCB0aGUgdGltZSB2YWx1ZSwgdGltZSB1bml0IGFuZCB0aW1lIHRlbnNlIHVzaW5nIG1vbWVudAogKgogKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgdHdvIHN0cmluZ3Mgc3RhcnQgYW5kIGVuZCB0aW1lLiBJIHRoZSBzdGFydCB2YWx1ZSBpcyBub3cgdGhlbiBpdCB1c2VzIHRoZSBlbmQgdmFsdWUgdG8gcGFyc2UuCiAqLwoKCmV4cG9ydCB2YXIgcGFyc2VUaW1lUGFydHMgPSBmdW5jdGlvbiBwYXJzZVRpbWVQYXJ0cyhzdGFydCwgZW5kKSB7CiAgdmFyIHJlc3VsdHMgPSB7CiAgICB0aW1lVGVuc2U6IExBU1QsCiAgICB0aW1lVW5pdHM6ICdtJywKICAgIHRpbWVWYWx1ZTogMTUKICB9OwogIHZhciB2YWx1ZSA9IGlzTm93KHN0YXJ0KSA/IGVuZCA6IHN0YXJ0OwogIHZhciBtYXRjaGVzID0gaXNTdHJpbmcodmFsdWUpICYmIHZhbHVlLm1hdGNoKC9ub3coKFstK10pKFxkKykoW3NtaGR3TXldKShcL1tzbWhkd015XSk/KT8vKTsKCiAgaWYgKCFtYXRjaGVzKSB7CiAgICByZXR1cm4gcmVzdWx0czsKICB9CgogIHZhciBvcGVyYXRvciA9IG1hdGNoZXNbMl07CiAgdmFyIG1hdGNoZWRUaW1lVmFsdWUgPSBtYXRjaGVzWzNdOwogIHZhciB0aW1lVW5pdHMgPSBtYXRjaGVzWzRdOwoKICBpZiAobWF0Y2hlZFRpbWVWYWx1ZSAmJiB0aW1lVW5pdHMgJiYgb3BlcmF0b3IpIHsKICAgIHJldHVybiB7CiAgICAgIHRpbWVUZW5zZTogb3BlcmF0b3IgPT09ICcrJyA/IE5FWFQgOiBMQVNULAogICAgICB0aW1lVW5pdHM6IHRpbWVVbml0cywKICAgICAgdGltZVZhbHVlOiBwYXJzZUludChtYXRjaGVkVGltZVZhbHVlLCAxMCkKICAgIH07CiAgfQoKICB2YXIgZHVyYXRpb24gPSBtb21lbnQuZHVyYXRpb24obW9tZW50KCkuZGlmZihkYXRlTWF0aC5wYXJzZSh2YWx1ZSkpKTsKICB2YXIgdW5pdE9wID0gJyc7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgcmVsYXRpdmVVbml0c0Zyb21MYXJnZXN0VG9TbWFsbGVzdC5sZW5ndGg7IGkrKykgewogICAgdmFyIGFzID0gZHVyYXRpb24uYXMocmVsYXRpdmVVbml0c0Zyb21MYXJnZXN0VG9TbWFsbGVzdFtpXSk7CgogICAgaWYgKGFzIDwgMCkgewogICAgICB1bml0T3AgPSAnKyc7CiAgICB9CgogICAgaWYgKE1hdGguYWJzKGFzKSA+IDEpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB0aW1lVmFsdWU6IE1hdGgucm91bmQoTWF0aC5hYnMoYXMpKSwKICAgICAgICB0aW1lVW5pdHM6IHJlbGF0aXZlVW5pdHNGcm9tTGFyZ2VzdFRvU21hbGxlc3RbaV0sCiAgICAgICAgdGltZVRlbnNlOiB1bml0T3AgPT09ICcrJyA/IE5FWFQgOiBMQVNUCiAgICAgIH07CiAgICB9CiAgfQoKICByZXR1cm4gcmVzdWx0czsKfTsKCnRyeSB7CiAgcGFyc2VUaW1lUGFydHMuX19kb2NnZW5JbmZvID0gewogICAgZGVzY3JpcHRpb246ICdUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGltZSB2YWx1ZSwgdGltZSB1bml0IGFuZCB0aW1lIHRlbnNlIGZvciBhIGdpdmVuIHRpbWUgc3RyaW5nLlxuJyArICdcbicgKyAnRm9yIGV4YW1wbGU6IGZvciBgbm93LTQwbWAgaXQgd2lsbCBwYXJzZSBvdXRwdXQgYXMgdGltZSB2YWx1ZSB0byBgNDBgIHRpbWUgdW5pdCB0byBgbWAgYW5kIHRpbWUgdW5pdCB0byBgbGFzdGAuXG4nICsgJ1xuJyArICdJZiBnaXZlbiBhIGRhdGV0aW1lIHN0cmluZyBpdCB3aWxsIHJldHVybiBhIGRlZmF1bHQgdmFsdWUuXG4nICsgJ1xuJyArICdJZiB0aGUgZ2l2ZW4gc3RyaW5nIGlzIGluIHRoZSBmb3JtYXQgc3VjaCBhcyBgbm93L2RgIGl0IHdpbGwgcGFyc2UgdGhlIHN0cmluZyB0byBtb21lbnQgb2JqZWN0IGFuZCBmaW5kIHRoZSB0aW1lIHZhbHVlLCB0aW1lIHVuaXQgYW5kIHRpbWUgdGVuc2UgdXNpbmcgbW9tZW50XG4nICsgJ1xuJyArICdUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgdHdvIHN0cmluZ3Mgc3RhcnQgYW5kIGVuZCB0aW1lLiBJIHRoZSBzdGFydCB2YWx1ZSBpcyBub3cgdGhlbiBpdCB1c2VzIHRoZSBlbmQgdmFsdWUgdG8gcGFyc2UuJywKICAgIGRpc3BsYXlOYW1lOiAncGFyc2VUaW1lUGFydHMnLAogICAgbWV0aG9kczogW10sCiAgICBwcm9wczoge30sCiAgICBleHRlbmRlZEludGVyZmFjZXM6IFtdCiAgfTsKfSBjYXRjaCAoZSkge30="},{"version":3,"sources":["D:/work/eui/src/components/date_picker/super_date_picker/quick_select_popover/quick_select_utils.ts"],"names":["moment","dateMath","isString","relativeUnitsFromLargestToSmallest","DATE_MODES","LAST","NEXT","isNow","value","NOW","parseTimeParts","start","end","results","timeTense","timeUnits","timeValue","matches","match","operator","matchedTimeValue","parseInt","duration","diff","parse","unitOp","i","length","as","Math","abs","round"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,QAAT,QAAyB,gCAAzB;AACA,SAASC,kCAAT,QAAmD,qBAAnD;AACA,SAASC,UAAT,QAA2B,eAA3B;AAGA,IAAMC,IAAI,GAAG,MAAb;AACA,IAAMC,IAAI,GAAG,MAAb;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD;AAAA,SAAmBA,KAAK,KAAKJ,UAAU,CAACK,GAAxC;AAAA,CAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAgBC,GAAhB,EAA6C;AACzE,MAAMC,OAAoB,GAAG;AAC3BC,IAAAA,SAAS,EAAET,IADgB;AAE3BU,IAAAA,SAAS,EAAE,GAFgB;AAG3BC,IAAAA,SAAS,EAAE;AAHgB,GAA7B;AAMA,MAAMR,KAAK,GAAGD,KAAK,CAACI,KAAD,CAAL,GAAeC,GAAf,GAAqBD,KAAnC;AAEA,MAAMM,OAAO,GACXf,QAAQ,CAACM,KAAD,CAAR,IACAA,KAAK,CAACU,KAAN,CAAY,4CAAZ,CAFF;;AAIA,MAAI,CAACD,OAAL,EAAc;AACZ,WAAOJ,OAAP;AACD;;AAED,MAAMM,QAAQ,GAAGF,OAAO,CAAC,CAAD,CAAxB;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,CAAD,CAAhC;AACA,MAAMF,SAAS,GAAGE,OAAO,CAAC,CAAD,CAAzB;;AAEA,MAAIG,gBAAgB,IAAIL,SAApB,IAAiCI,QAArC,EAA+C;AAC7C,WAAO;AACLL,MAAAA,SAAS,EAAEK,QAAQ,KAAK,GAAb,GAAmBb,IAAnB,GAA0BD,IADhC;AAELU,MAAAA,SAAS,EAATA,SAFK;AAGLC,MAAAA,SAAS,EAAEK,QAAQ,CAACD,gBAAD,EAAmB,EAAnB;AAHd,KAAP;AAKD;;AAED,MAAME,QAAQ,GAAGtB,MAAM,CAACsB,QAAP,CAAgBtB,MAAM,GAAGuB,IAAT,CAActB,QAAQ,CAACuB,KAAT,CAAehB,KAAf,CAAd,CAAhB,CAAjB;AACA,MAAIiB,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,kCAAkC,CAACwB,MAAvD,EAA+DD,CAAC,EAAhE,EAAoE;AAClE,QAAME,EAAE,GAAGN,QAAQ,CAACM,EAAT,CAAYzB,kCAAkC,CAACuB,CAAD,CAA9C,CAAX;;AACA,QAAIE,EAAE,GAAG,CAAT,EAAY;AACVH,MAAAA,MAAM,GAAG,GAAT;AACD;;AACD,QAAII,IAAI,CAACC,GAAL,CAASF,EAAT,IAAe,CAAnB,EAAsB;AACpB,aAAO;AACLZ,QAAAA,SAAS,EAAEa,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACC,GAAL,CAASF,EAAT,CAAX,CADN;AAELb,QAAAA,SAAS,EAAEZ,kCAAkC,CAACuB,CAAD,CAFxC;AAGLZ,QAAAA,SAAS,EAAEW,MAAM,KAAK,GAAX,GAAiBnB,IAAjB,GAAwBD;AAH9B,OAAP;AAKD;AACF;;AAED,SAAOQ,OAAP;AACD,CA9CM","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport moment from 'moment';\nimport dateMath from '@elastic/datemath';\nimport { isString } from '../../../../services/predicate';\nimport { relativeUnitsFromLargestToSmallest } from '../relative_options';\nimport { DATE_MODES } from '../date_modes';\nimport { QuickSelect, TimeUnitId } from '../../types';\n\nconst LAST = 'last';\nconst NEXT = 'next';\n\nconst isNow = (value: string) => value === DATE_MODES.NOW;\n\n/**\n * This function returns time value, time unit and time tense for a given time string.\n *\n * For example: for `now-40m` it will parse output as time value to `40` time unit to `m` and time unit to `last`.\n *\n * If given a datetime string it will return a default value.\n *\n * If the given string is in the format such as `now/d` it will parse the string to moment object and find the time value, time unit and time tense using moment\n *\n * This function accepts two strings start and end time. I the start value is now then it uses the end value to parse.\n */\nexport const parseTimeParts = (start: string, end: string): QuickSelect => {\n  const results: QuickSelect = {\n    timeTense: LAST,\n    timeUnits: 'm',\n    timeValue: 15,\n  };\n\n  const value = isNow(start) ? end : start;\n\n  const matches =\n    isString(value) &&\n    value.match(/now(([-+])(\\d+)([smhdwMy])(\\/[smhdwMy])?)?/);\n\n  if (!matches) {\n    return results;\n  }\n\n  const operator = matches[2];\n  const matchedTimeValue = matches[3];\n  const timeUnits = matches[4] as TimeUnitId;\n\n  if (matchedTimeValue && timeUnits && operator) {\n    return {\n      timeTense: operator === '+' ? NEXT : LAST,\n      timeUnits,\n      timeValue: parseInt(matchedTimeValue, 10),\n    };\n  }\n\n  const duration = moment.duration(moment().diff(dateMath.parse(value)));\n  let unitOp = '';\n  for (let i = 0; i < relativeUnitsFromLargestToSmallest.length; i++) {\n    const as = duration.as(relativeUnitsFromLargestToSmallest[i]);\n    if (as < 0) {\n      unitOp = '+';\n    }\n    if (Math.abs(as) > 1) {\n      return {\n        timeValue: Math.round(Math.abs(as)),\n        timeUnits: relativeUnitsFromLargestToSmallest[i],\n        timeTense: unitOp === '+' ? NEXT : LAST,\n      };\n    }\n  }\n\n  return results;\n};\n"]}]}