{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\date_picker\\super_date_picker\\relative_utils.ts","dependencies":[{"path":"D:\\work\\eui\\src\\components\\date_picker\\super_date_picker\\relative_utils.ts","mtime":1649070093380},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/date_picker/super_date_picker/relative_utils.ts"],"names":["dateMath","moment","get","isString","relativeUnitsFromLargestToSmallest","ROUND_DELIMETER","parseRelativeParts","value","matches","match","operator","count","unit","roundBy","isRounded","roundUnit","replace","undefined","parseInt","round","results","duration","diff","parse","unitOp","i","length","asRelative","as","Math","abs","toRelativeStringFromParts","relativeParts"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport dateMath from '@elastic/datemath';\nimport moment from 'moment';\n\nimport { get } from '../../../services/objects';\nimport { isString } from '../../../services/predicate';\nimport { relativeUnitsFromLargestToSmallest } from './relative_options';\nimport { TimeUnitId, RelativeParts } from '../types';\n\nconst ROUND_DELIMETER = '/';\n\nexport function parseRelativeParts(value: string): RelativeParts {\n  const matches =\n    isString(value) &&\n    value.match(/now(([\\-\\+])([0-9]+)([smhdwMy])(\\/[smhdwMy])?)?/);\n\n  const operator = matches && matches[2];\n  const count = matches && matches[3];\n  const unit = matches && matches[4];\n  const roundBy = matches && matches[5];\n\n  if (count && unit) {\n    const isRounded = roundBy ? true : false;\n    const roundUnit =\n      isRounded && roundBy\n        ? (roundBy.replace(ROUND_DELIMETER, '') as TimeUnitId)\n        : undefined;\n    return {\n      count: parseInt(count, 10),\n      unit: operator === '+' ? `${unit}+` : unit,\n      round: isRounded,\n      ...(roundUnit ? { roundUnit } : {}),\n    };\n  }\n\n  const results = { count: 0, unit: 's', round: false };\n  const duration = moment.duration(moment().diff(dateMath.parse(value)));\n  let unitOp = '';\n  for (let i = 0; i < relativeUnitsFromLargestToSmallest.length; i++) {\n    const asRelative = duration.as(relativeUnitsFromLargestToSmallest[i]);\n    if (asRelative < 0) unitOp = '+';\n    if (Math.abs(asRelative) > 1) {\n      results.count = Math.round(Math.abs(asRelative));\n      results.unit = relativeUnitsFromLargestToSmallest[i] + unitOp;\n      results.round = false;\n      break;\n    }\n  }\n  return results;\n}\n\nexport const toRelativeStringFromParts = (relativeParts: RelativeParts) => {\n  const count = get(relativeParts, 'count', 0);\n  const isRounded = get(relativeParts, 'round', false);\n\n  if (count === 0 && !isRounded) {\n    return 'now';\n  }\n\n  const matches = get(relativeParts, 'unit', 's').match(/([smhdwMy])(\\+)?/);\n  const unit = matches[1];\n  const operator = matches && matches[2] ? matches[2] : '-';\n  const round = isRounded ? `${ROUND_DELIMETER}${unit}` : '';\n\n  return `now${operator}${count}${unit}${round}`;\n};\n"]}]}