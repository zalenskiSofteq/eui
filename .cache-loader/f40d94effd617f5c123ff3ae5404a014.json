{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\tabs\\tabbed_content\\tabbed_content.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\tabs\\tabbed_content\\tabbed_content.tsx","mtime":1649070093797},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/tabs/tabbed_content/tabbed_content.tsx"],"names":["React","Component","createRef","htmlIdGenerator","EuiTabs","EuiTab","AUTOFOCUS","EuiTabbedContent","props","targetTab","tabsRef","current","querySelector","state","selectedTabId","focus","inFocus","autoFocus","setState","focusTab","blurEvent","currentTarget","relatedTarget","contains","selectedTab","onTabClick","externalSelectedTab","id","initialSelectedTab","tabs","addEventListener","removeFocus","removeEventListener","className","display","expand","size","rest","find","tab","selectedTabContent","content","initializeFocus","map","name","tabProps","key","onClick","isSelected","rootId"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Component, createRef } from 'react';\nimport PropTypes from \"prop-types\";\nimport { htmlIdGenerator } from '../../../services';\nimport { EuiTabs } from '../tabs';\nimport { EuiTab } from '../tab';\n/**\n * Marked as const so type is `['initial', 'selected']` instead of `string[]`\n */\n\nexport var AUTOFOCUS = ['initial', 'selected'];\nexport class EuiTabbedContent extends Component {\n  static defaultProps = {\n    autoFocus: 'initial'\n  };\n  rootId = htmlIdGenerator()();\n  tabsRef = createRef();\n\n  constructor(props) {\n    super(props);\n    const {\n      initialSelectedTab,\n      selectedTab,\n      tabs\n    } = props; // Only track selection state if it's not controlled externally.\n\n    let selectedTabId;\n\n    if (!selectedTab) {\n      selectedTabId = initialSelectedTab && initialSelectedTab.id || tabs[0].id;\n    }\n\n    this.state = {\n      selectedTabId,\n      inFocus: false\n    };\n  }\n\n  componentDidMount() {\n    // IE11 doesn't support the `relatedTarget` event property for blur events\n    // but does add it for focusout. React doesn't support `onFocusOut` so here we are.\n    if (this.tabsRef.current) {\n      // Current short-term solution for event listener (see https://github.com/elastic/eui/pull/2717)\n      this.tabsRef.current.addEventListener('focusout', this.removeFocus);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.tabsRef.current) {\n      // Current short-term solution for event listener (see https://github.com/elastic/eui/pull/2717)\n      this.tabsRef.current.removeEventListener('focusout', this.removeFocus);\n    }\n  }\n\n  focusTab = () => {\n    const targetTab = this.tabsRef.current.querySelector(`#${this.state.selectedTabId}`);\n    targetTab.focus();\n  };\n  initializeFocus = () => {\n    if (!this.state.inFocus && this.props.autoFocus === 'selected') {\n      // Must wait for setState to finish before calling `.focus()`\n      // as the focus call triggers a blur on the first tab\n      this.setState({\n        inFocus: true\n      }, () => {\n        this.focusTab();\n      });\n    }\n  }; // todo: figure out type for blurEvent\n\n  removeFocus = blurEvent => {\n    // only set inFocus to false if the wrapping div doesn't contain the now-focusing element\n    const currentTarget = blurEvent.currentTarget;\n    const relatedTarget = blurEvent.relatedTarget;\n\n    if (currentTarget.contains(relatedTarget) === false) {\n      this.setState({\n        inFocus: false\n      });\n    }\n  };\n  onTabClick = selectedTab => {\n    const {\n      onTabClick,\n      selectedTab: externalSelectedTab\n    } = this.props;\n\n    if (onTabClick) {\n      onTabClick(selectedTab);\n    } // Only track selection state if it's not controlled externally.\n\n\n    if (!externalSelectedTab) {\n      this.setState({\n        selectedTabId: selectedTab.id\n      }, () => {\n        this.focusTab();\n      });\n    }\n  };\n\n  render() {\n    const {\n      className,\n      display,\n      expand,\n      initialSelectedTab,\n      onTabClick,\n      selectedTab: externalSelectedTab,\n      size,\n      tabs,\n      autoFocus,\n      ...rest\n    } = this.props; // Allow the consumer to control tab selection.\n\n    const selectedTab = externalSelectedTab || tabs.find(tab => tab.id === this.state.selectedTabId);\n    const {\n      content: selectedTabContent,\n      id: selectedTabId\n    } = selectedTab;\n    return <div className={className} {...rest}>\n        <EuiTabs ref={this.tabsRef} expand={expand} display={display} size={size} onFocus={this.initializeFocus}>\n          {tabs.map(tab => {\n          const {\n            id,\n            name,\n            content,\n            // eslint-disable-line no-unused-vars\n            ...tabProps\n          } = tab;\n          const props = {\n            key: id,\n            id,\n            ...tabProps,\n            onClick: () => this.onTabClick(tab),\n            isSelected: tab === selectedTab,\n            'aria-controls': `${this.rootId}`\n          };\n          return <EuiTab {...props}>{name}</EuiTab>;\n        })}\n        </EuiTabs>\n\n        <div role=\"tabpanel\" id={`${this.rootId}`} aria-labelledby={selectedTabId}>\n          {selectedTabContent}\n        </div>\n      </div>;\n  }\n\n}\nEuiTabbedContent.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n\n  /**\n       * When tabbing into the tabs, set the focus on `initial` for the first tab,\n       * or `selected` for the currently selected tab. Best use case is for inside of\n       * overlay content like popovers or flyouts.\n       */\n  autoFocus: PropTypes.oneOf([\"initial\", \"selected\"]),\n\n  /**\n       * Choose `default` or alternative `condensed` display styles\n       */\n  display: PropTypes.oneOf([\"condensed\", \"default\"]),\n\n  /**\n       * Evenly stretches each tab to fill the horizontal space\n       */\n  expand: PropTypes.bool,\n\n  /**\n       * Use this prop to set the initially selected tab while letting the tabbed content component\n       * control selection state internally\n       */\n  initialSelectedTab: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.node.isRequired,\n    content: PropTypes.node.isRequired\n  }),\n  onTabClick: PropTypes.func,\n\n  /**\n       * Use this prop if you want to control selection state within the owner component\n       */\n  selectedTab: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.node.isRequired,\n    content: PropTypes.node.isRequired\n  }),\n  size: PropTypes.oneOf([\"s\", \"m\", \"l\"]),\n\n  /**\n       * Each tab needs id and content properties, so we can associate it with its panel for accessibility.\n       * The name property (a node) is also required to display to the user.\n       */\n  tabs: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.node.isRequired,\n    content: PropTypes.node.isRequired\n  }).isRequired).isRequired\n};\n\ntry {\n  AUTOFOCUS.__docgenInfo = {\n    description: \"Marked as const so type is `['initial', 'selected']` instead of `string[]`\",\n    displayName: 'AUTOFOCUS',\n    methods: [],\n    props: {},\n    extendedInterfaces: ['CommonProps', 'HTMLAttributes', 'AriaAttributes', 'DOMAttributes']\n  };\n} catch (e) {}\n\ntry {\n  EuiTabbedContent.__docgenInfo = {\n    description: '',\n    displayName: 'EuiTabbedContent',\n    methods: [],\n    props: {\n      className: {\n        defaultValue: null,\n        description: '',\n        name: 'className',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'aria-label': {\n        defaultValue: null,\n        description: 'Defines a string value that labels the current element.\\n' + '@see aria-labelledby.',\n        name: 'aria-label',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'data-test-subj': {\n        defaultValue: null,\n        description: '',\n        name: 'data-test-subj',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      autoFocus: {\n        defaultValue: {\n          value: 'initial'\n        },\n        description: 'When tabbing into the tabs, set the focus on `initial` for the first tab,\\n' + 'or `selected` for the currently selected tab. Best use case is for inside of\\n' + 'overlay content like popovers or flyouts.',\n        name: 'autoFocus',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'enum',\n          raw: '\"initial\" | \"selected\"',\n          value: [{\n            value: '\"initial\"'\n          }, {\n            value: '\"selected\"'\n          }]\n        }\n      },\n      display: {\n        defaultValue: null,\n        description: 'Choose `default` or alternative `condensed` display styles',\n        name: 'display',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'enum',\n          raw: '\"default\" | \"condensed\"',\n          value: [{\n            value: '\"default\"'\n          }, {\n            value: '\"condensed\"'\n          }]\n        }\n      },\n      expand: {\n        defaultValue: null,\n        description: 'Evenly stretches each tab to fill the horizontal space',\n        name: 'expand',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      initialSelectedTab: {\n        defaultValue: null,\n        description: 'Use this prop to set the initially selected tab while letting the tabbed content component\\n' + 'control selection state internally',\n        name: 'initialSelectedTab',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'EuiTabbedContentTab'\n        }\n      },\n      onTabClick: {\n        defaultValue: null,\n        description: '',\n        name: 'onTabClick',\n        parent: undefined,\n        required: false,\n        type: {\n          name: '(selectedTab: EuiTabbedContentTab) => void'\n        }\n      },\n      selectedTab: {\n        defaultValue: null,\n        description: 'Use this prop if you want to control selection state within the owner component',\n        name: 'selectedTab',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'EuiTabbedContentTab'\n        }\n      },\n      size: {\n        defaultValue: null,\n        description: '',\n        name: 'size',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'enum',\n          raw: '\"s\" | \"m\" | \"l\"',\n          value: [{\n            value: '\"s\"'\n          }, {\n            value: '\"m\"'\n          }, {\n            value: '\"l\"'\n          }]\n        }\n      },\n      tabs: {\n        defaultValue: null,\n        description: 'Each tab needs id and content properties, so we can associate it with its panel for accessibility.\\n' + 'The name property (a node) is also required to display to the user.',\n        name: 'tabs',\n        parent: undefined,\n        required: true,\n        type: {\n          name: 'EuiTabbedContentTab[]'\n        }\n      }\n    },\n    extendedInterfaces: ['CommonProps', 'HTMLAttributes', 'AriaAttributes', 'DOMAttributes']\n  };\n} catch (e) {}"]}]}