{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\flyout\\flyout.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\flyout\\flyout.tsx","mtime":1649070093409},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/flyout/flyout.tsx"],"names":["React","useEffect","useState","forwardRef","Fragment","classnames","keys","EuiWindowEvent","useCombinedRefs","isWithinMinBreakpoint","throttle","keysOf","EuiFocusTrap","EuiOverlayMask","EuiButtonIcon","EuiI18n","useResizeObserver","EuiOutsideClickDetector","EuiPortal","typeToClassNameMap","push","overlay","TYPES","sideToClassNameMap","left","right","SIDES","sizeToClassNameMap","s","m","l","SIZES","isEuiFlyoutSizeNamed","value","includes","paddingSizeToClassNameMap","none","PADDING_SIZES","EuiFlyout","ref","className","children","as","Element","hideCloseButton","closeButtonProps","closeButtonAriaLabel","closeButtonPosition","onClose","ownFocus","side","size","paddingSize","maxWidth","style","maskProps","type","outsideClickCloses","role","pushMinBreakpoint","rest","window","innerWidth","windowIsLargeEnoughToPush","setWindowIsLargeEnoughToPush","isPushed","functionToCallOnWindowResize","resizeRef","setResizeRef","setRef","dimensions","document","body","classList","add","addEventListener","paddingRight","width","paddingLeft","remove","removeEventListener","onKeyDown","event","key","ESCAPE","preventDefault","newStyle","widthClassName","sizeClassName","classes","closeButton","closeButtonClasses","closeAriaLabel","e","onClick","flyoutContent","flyout","displayName"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n  useEffect,\n  useState,\n  forwardRef,\n  CSSProperties,\n  Fragment,\n  ComponentType,\n  ComponentPropsWithRef,\n  PropsWithChildren,\n  MutableRefObject,\n} from 'react';\nimport classnames from 'classnames';\n\nimport {\n  keys,\n  EuiWindowEvent,\n  useCombinedRefs,\n  EuiBreakpointSize,\n  isWithinMinBreakpoint,\n  throttle,\n} from '../../services';\n\nimport { CommonProps, keysOf } from '../common';\nimport { EuiFocusTrap } from '../focus_trap';\nimport { EuiOverlayMask, EuiOverlayMaskProps } from '../overlay_mask';\nimport { EuiButtonIcon, EuiButtonIconPropsForButton } from '../button';\nimport { EuiI18n } from '../i18n';\nimport { useResizeObserver } from '../observer/resize_observer';\nimport { EuiOutsideClickDetector } from '../outside_click_detector';\nimport { EuiPortal } from '../portal';\n\nconst typeToClassNameMap = {\n  push: 'euiFlyout--push',\n  overlay: null,\n};\n\nexport const TYPES = keysOf(typeToClassNameMap);\ntype _EuiFlyoutType = typeof TYPES[number];\n\nconst sideToClassNameMap = {\n  left: 'euiFlyout--left',\n  right: null,\n};\n\nexport const SIDES = keysOf(sideToClassNameMap);\ntype _EuiFlyoutSide = typeof SIDES[number];\n\nconst sizeToClassNameMap = {\n  s: 'euiFlyout--small',\n  m: 'euiFlyout--medium',\n  l: 'euiFlyout--large',\n};\n\nexport const SIZES = keysOf(sizeToClassNameMap);\nexport type EuiFlyoutSize = typeof SIZES[number];\n\n/**\n * Custom type checker for named flyout sizes since the prop\n * `size` can also be CSSProperties['width'] (string | number)\n */\nfunction isEuiFlyoutSizeNamed(value: any): value is EuiFlyoutSize {\n  return SIZES.includes(value as any);\n}\n\nconst paddingSizeToClassNameMap = {\n  none: 'euiFlyout--paddingNone',\n  s: 'euiFlyout--paddingSmall',\n  m: 'euiFlyout--paddingMedium',\n  l: 'euiFlyout--paddingLarge',\n};\n\nexport const PADDING_SIZES = keysOf(paddingSizeToClassNameMap);\ntype _EuiFlyoutPaddingSize = typeof PADDING_SIZES[number];\n\ntype _EuiFlyoutProps = {\n  onClose: () => void;\n  /**\n   * Defines the width of the panel.\n   * Pass a predefined size of `s | m | l`, or pass any number/string compatible with the CSS `width` attribute\n   */\n  size?: EuiFlyoutSize | CSSProperties['width'];\n  /**\n   * Sets the max-width of the panel,\n   * set to `true` to use the default size,\n   * set to `false` to not restrict the width,\n   * set to a number for a custom width in px,\n   * set to a string for a custom width in custom measurement.\n   */\n  maxWidth?: boolean | number | string;\n  /**\n   * Customize the padding around the content of the flyout header, body and footer\n   */\n  paddingSize?: _EuiFlyoutPaddingSize;\n  /**\n   * Adds an EuiOverlayMask and wraps in an EuiPortal\n   */\n  ownFocus?: boolean;\n  /**\n   * Hides the default close button. You must provide another close button somewhere within the flyout.\n   */\n  hideCloseButton?: boolean;\n  /**\n   * Specify an aria-label for the close button of the flyout.\n   * Default is `'Close this dialog'`.\n   */\n  closeButtonAriaLabel?: string;\n  /**\n   * Extends EuiButtonIconProps onto the close button\n   */\n  closeButtonProps?: Partial<EuiButtonIconPropsForButton>;\n  /**\n   * Position of close button.\n   * `inside`: Floating to just inside the flyout, always top right;\n   * `outside`: Floating just outside the flyout near the top (side dependent on `side`). Helpful when the close button may cover other interactable content.\n   */\n  closeButtonPosition?: 'inside' | 'outside';\n  /**\n   * Adjustments to the EuiOverlayMask that is added when `ownFocus = true`\n   */\n  maskProps?: EuiOverlayMaskProps;\n  /**\n   * How to display the the flyout in relation to the body content;\n   * `push` keeps it visible, pushing the `<body>` content via padding\n   */\n  type?: _EuiFlyoutType;\n  /**\n   * Forces this interaction on the mask overlay or body content.\n   * Defaults depend on `ownFocus` and `type` values\n   */\n  outsideClickCloses?: boolean;\n  /**\n   * Which side of the window to attach to.\n   * The `left` option should only be used for navigation.\n   */\n  side?: _EuiFlyoutSide;\n  /**\n   * Defaults to `dialog` which is best for most cases of the flyout.\n   * Otherwise pass in your own, aria-role, or `null` to remove it and use the semantic `as` element instead\n   */\n  role?: null | string;\n  /**\n   * Named breakpoint or pixel value for customizing the minimum window width to enable the `push` type\n   */\n  pushMinBreakpoint?: EuiBreakpointSize | number;\n  style?: React.CSSProperties;\n};\n\n// Using ReactHTML rather than JSX.IntrinsicElements here because it does not include\n// SVG element types which cause errors because they do not have all the attributes needed.\ntype ComponentTypes =\n  | 'div'\n  | 'span'\n  | 'nav'\n  | 'aside'\n  | 'section'\n  | 'article'\n  | 'header'\n  | ComponentType;\n\nexport type EuiFlyoutProps<T extends ComponentTypes = 'div'> = CommonProps &\n  ComponentPropsWithRef<T> & {\n    /**\n     * Sets the HTML element for `EuiFlyout`\n     */\n    as?: T;\n  } & _EuiFlyoutProps;\n\nconst EuiFlyout = forwardRef(\n  <T extends ComponentTypes>(\n    {\n      className,\n      children,\n      as: Element = 'div' as T,\n      hideCloseButton = false,\n      closeButtonProps,\n      closeButtonAriaLabel,\n      closeButtonPosition = 'inside',\n      onClose,\n      ownFocus = true,\n      side = 'right',\n      size = 'm',\n      paddingSize = 'l',\n      maxWidth = false,\n      style,\n      maskProps,\n      type = 'overlay',\n      outsideClickCloses = false,\n      role = 'dialog',\n      pushMinBreakpoint = 'l',\n      ...rest\n    }: PropsWithChildren<EuiFlyoutProps<T>>,\n    ref:\n      | ((instance: ComponentPropsWithRef<T> | null) => void)\n      | MutableRefObject<ComponentPropsWithRef<T> | null>\n      | null\n  ) => {\n    /**\n     * Setting the initial state of pushed based on the `type` prop\n     * and if the current window size is large enough (larger than `pushMinBreakpoint`)\n     */\n    const [windowIsLargeEnoughToPush, setWindowIsLargeEnoughToPush] = useState(\n      isWithinMinBreakpoint(\n        typeof window === 'undefined' ? 0 : window.innerWidth,\n        pushMinBreakpoint\n      )\n    );\n\n    const isPushed = type === 'push' && windowIsLargeEnoughToPush;\n\n    /**\n     * Watcher added to the window to maintain `isPushed` state depending on\n     * the window size compared to the `pushBreakpoint`\n     */\n    const functionToCallOnWindowResize = throttle(() => {\n      if (isWithinMinBreakpoint(window.innerWidth, pushMinBreakpoint)) {\n        setWindowIsLargeEnoughToPush(true);\n      } else {\n        setWindowIsLargeEnoughToPush(false);\n      }\n      // reacts every 50ms to resize changes and always gets the final update\n    }, 50);\n\n    /**\n     * Setting up the refs on the actual flyout element in order to\n     * accommodate for the `isPushed` state by adding padding to the body equal to the width of the element\n     */\n    const [resizeRef, setResizeRef] = useState<ComponentPropsWithRef<T> | null>(\n      null\n    );\n    const setRef = useCombinedRefs([setResizeRef, ref]);\n    // TODO: Allow this hooke to be conditional\n    const dimensions = useResizeObserver(resizeRef as Element);\n\n    useEffect(() => {\n      // This class doesn't actually do anything by EUI, but is nice to add for consumers (JIC)\n      document.body.classList.add('euiBody--hasFlyout');\n\n      /**\n       * Accomodate for the `isPushed` state by adding padding to the body equal to the width of the element\n       */\n      if (type === 'push') {\n        // Only add the event listener if we'll need to accommodate with padding\n        window.addEventListener('resize', functionToCallOnWindowResize);\n\n        if (isPushed) {\n          if (side === 'right') {\n            document.body.style.paddingRight = `${dimensions.width}px`;\n          } else if (side === 'left') {\n            document.body.style.paddingLeft = `${dimensions.width}px`;\n          }\n        }\n      }\n\n      return () => {\n        document.body.classList.remove('euiBody--hasFlyout');\n\n        if (type === 'push') {\n          window.removeEventListener('resize', functionToCallOnWindowResize);\n\n          if (side === 'right') {\n            document.body.style.paddingRight = '';\n          } else if (side === 'left') {\n            document.body.style.paddingLeft = '';\n          }\n        }\n      };\n    }, [type, side, dimensions, isPushed, functionToCallOnWindowResize]);\n\n    /**\n     * ESC key closes flyout (always?)\n     */\n    const onKeyDown = (event: KeyboardEvent) => {\n      if (!isPushed && event.key === keys.ESCAPE) {\n        event.preventDefault();\n        onClose();\n      }\n    };\n\n    let newStyle;\n    let widthClassName;\n    let sizeClassName;\n\n    // Setting max-width\n    if (maxWidth === true) {\n      widthClassName = 'euiFlyout--maxWidth-default';\n    } else if (maxWidth !== false) {\n      const value = typeof maxWidth === 'number' ? `${maxWidth}px` : maxWidth;\n      newStyle = { ...style, maxWidth: value };\n    }\n\n    // Setting size\n    if (isEuiFlyoutSizeNamed(size)) {\n      sizeClassName = sizeToClassNameMap[size];\n    } else if (newStyle) {\n      newStyle.width = size;\n    } else {\n      newStyle = { ...style, width: size };\n    }\n\n    const classes = classnames(\n      'euiFlyout',\n      typeToClassNameMap[type as _EuiFlyoutType],\n      sideToClassNameMap[side as _EuiFlyoutSide],\n      sizeClassName,\n      paddingSizeToClassNameMap[paddingSize as _EuiFlyoutPaddingSize],\n      widthClassName,\n      className\n    );\n\n    let closeButton;\n    if (onClose && !hideCloseButton) {\n      const closeButtonClasses = classnames(\n        'euiFlyout__closeButton',\n        `euiFlyout__closeButton--${closeButtonPosition}`,\n        closeButtonProps?.className\n      );\n\n      closeButton = (\n        <EuiI18n token=\"euiFlyout.closeAriaLabel\" default=\"Close this dialog\">\n          {(closeAriaLabel: string) => (\n            <EuiButtonIcon\n              display={closeButtonPosition === 'outside' ? 'fill' : 'empty'}\n              iconType=\"cross\"\n              color=\"text\"\n              aria-label={closeButtonAriaLabel || closeAriaLabel}\n              data-test-subj=\"euiFlyoutCloseButton\"\n              {...closeButtonProps}\n              className={closeButtonClasses}\n              onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n                onClose();\n                closeButtonProps?.onClick && closeButtonProps.onClick(e);\n              }}\n            />\n          )}\n        </EuiI18n>\n      );\n    }\n\n    const flyoutContent = (\n      // @ts-expect-error JSX element without construct\n      <Element\n        {...(rest as ComponentPropsWithRef<T>)}\n        role={role}\n        className={classes}\n        tabIndex={-1}\n        style={newStyle || style}\n        ref={setRef}>\n        {closeButton}\n        {children}\n      </Element>\n    );\n\n    /*\n     * Trap focus even when `ownFocus={false}`, otherwise closing\n     * the flyout won't return focus to the originating button.\n     *\n     * Set `clickOutsideDisables={true}` when `ownFocus={false}`\n     * to allow non-keyboard users the ability to interact with\n     * elements outside the flyout.\n     */\n    let flyout = (\n      <EuiFocusTrap disabled={isPushed} clickOutsideDisables={!ownFocus}>\n        {/* Outside click detector is needed if theres no overlay mask to auto-close when clicking on elements outside */}\n        <EuiOutsideClickDetector\n          isDisabled={isPushed || !outsideClickCloses}\n          onOutsideClick={() => onClose()}>\n          {flyoutContent}\n        </EuiOutsideClickDetector>\n      </EuiFocusTrap>\n    );\n\n    // If ownFocus is set, wrap with an overlay and allow the user to click it to close it.\n    if (ownFocus && !isPushed) {\n      flyout = (\n        <EuiOverlayMask\n          onClick={onClose}\n          headerZindexLocation=\"below\"\n          {...maskProps}>\n          {flyout}\n        </EuiOverlayMask>\n      );\n    } else if (!isPushed) {\n      // Otherwise still wrap within an EuiPortal so it appends (unless it is the push style)\n      flyout = <EuiPortal>{flyout}</EuiPortal>;\n    }\n\n    return (\n      <Fragment>\n        <EuiWindowEvent event=\"keydown\" handler={onKeyDown} />\n        {flyout}\n      </Fragment>\n    );\n  }\n);\n\nEuiFlyout.displayName = 'EuiFlyout';\n\nexport { EuiFlyout };\n"]}]}