{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src\\components\\form\\field_password\\field_password.tsx","dependencies":[{"path":"D:\\work\\eui\\src\\components\\form\\field_password\\field_password.tsx","mtime":1649070093420},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/work/eui/src/components/form/field_password/field_password.tsx"],"names":["React","useState","classNames","EuiFormControlLayout","EuiValidatableControl","EuiButtonIcon","useEuiI18n","useCombinedRefs","EuiFieldPassword","className","id","name","placeholder","value","isInvalid","fullWidth","isLoading","compressed","_inputRef","inputRef","prepend","append","type","dualToggleProps","rest","inputType","setInputType","showPasswordLabel","maskPasswordLabel","_setInputRef","setInputRef","handleToggle","event","isVisible","focus","onClick","appends","Array","isArray","push","visibilityToggle","disabled","e","finalAppend","length","undefined","classes","defaultProps"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nimport { EuiFormControlLayout } from '../form_control_layout';\nimport { EuiValidatableControl } from '../validatable_control';\nimport { EuiButtonIcon } from '../../button';\nimport { useEuiI18n } from '../../i18n';\nimport { useCombinedRefs } from '../../../services';\nexport var EuiFieldPassword = ({\n  className,\n  id,\n  name,\n  placeholder,\n  value,\n  isInvalid,\n  fullWidth,\n  isLoading,\n  compressed,\n  inputRef: _inputRef,\n  prepend,\n  append,\n  type = 'password',\n  dualToggleProps,\n  ...rest\n}) => {\n  // Set the initial input type to `password` if they want dual\n  const [inputType, setInputType] = useState(type === 'dual' ? 'password' : type); // Setup toggle aria-label\n\n  const [showPasswordLabel, maskPasswordLabel] = useEuiI18n(['euiFieldPassword.showPassword', 'euiFieldPassword.maskPassword'], ['Show password as plain text. Note: this will visually expose your password on the screen.', 'Mask password']); // Setup the inputRef to auto-focus when toggling visibility\n\n  const [inputRef, _setInputRef] = useState(null);\n  const setInputRef = useCombinedRefs([_setInputRef, _inputRef]);\n\n  const handleToggle = (event, isVisible) => {\n    setInputType(isVisible ? 'password' : 'text');\n\n    if (inputRef) {\n      inputRef.focus();\n    }\n\n    if (dualToggleProps && dualToggleProps.onClick) {\n      dualToggleProps.onClick(event);\n    }\n  }; // Convert any `append` elements to an array so the visibility\n  // toggle can be added to it\n\n\n  let appends = Array.isArray(append) ? append : [];\n  if (append && !Array.isArray(append)) appends.push(append); // Add a toggling button to switch between `password` and `input` if consumer wants `dual`\n  // https://www.w3schools.com/howto/howto_js_toggle_password.asp\n\n  if (type === 'dual') {\n    const isVisible = inputType === 'text';\n    const visibilityToggle = <EuiButtonIcon iconType={isVisible ? 'eyeClosed' : 'eye'} aria-label={isVisible ? maskPasswordLabel : showPasswordLabel} title={isVisible ? maskPasswordLabel : showPasswordLabel} disabled={rest.disabled} {...dualToggleProps} onClick={e => handleToggle(e, isVisible)} />;\n    appends = [...appends, visibilityToggle];\n  }\n\n  const finalAppend = appends.length ? appends : undefined;\n  const classes = classNames('euiFieldPassword', {\n    'euiFieldPassword--fullWidth': fullWidth,\n    'euiFieldPassword--compressed': compressed,\n    'euiFieldPassword-isLoading': isLoading,\n    'euiFieldPassword--inGroup': prepend || finalAppend,\n    'euiFieldPassword--withToggle': type === 'dual'\n  }, className);\n  return <EuiFormControlLayout icon=\"lock\" fullWidth={fullWidth} isLoading={isLoading} compressed={compressed} prepend={prepend} append={finalAppend}>\n      <EuiValidatableControl isInvalid={isInvalid}>\n        <input type={inputType} id={id} name={name} placeholder={placeholder} className={classes} value={value} ref={setInputRef} {...rest} />\n      </EuiValidatableControl>\n    </EuiFormControlLayout>;\n};\nEuiFieldPassword.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n  isInvalid: PropTypes.bool,\n  fullWidth: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  compressed: PropTypes.bool,\n  inputRef: PropTypes.any,\n\n  /**\n       * Creates an input group with element(s) coming before input.\n       * `string` | `ReactElement` or an array of these\n       */\n  prepend: PropTypes.oneOfType([PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.element.isRequired]).isRequired, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.element.isRequired]).isRequired).isRequired]),\n\n  /**\n       * Creates an input group with element(s) coming after input.\n       * `string` | `ReactElement` or an array of these\n       */\n  append: PropTypes.oneOfType([PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.element.isRequired]).isRequired, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.element.isRequired]).isRequired).isRequired]),\n  value: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired]),\n\n  /**\n       * Change the `type` of input for manually handling obfuscation.\n       * The `dual` option adds the ability to toggle the obfuscation of the input by\n       * adding an icon button as the first `append` element\n       */\n  type: PropTypes.oneOf([\"password\", \"text\", \"dual\"]),\n\n  /**\n       * Additional props to apply to the dual toggle. Extends EuiButtonIcon\n       */\n  dualToggleProps: PropTypes.any\n};\nEuiFieldPassword.defaultProps = {\n  value: undefined,\n  fullWidth: false,\n  isLoading: false,\n  compressed: false\n};\n\ntry {\n  EuiFieldPassword.__docgenInfo = {\n    description: '',\n    displayName: 'EuiFieldPassword',\n    methods: [],\n    props: {\n      className: {\n        defaultValue: null,\n        description: '',\n        name: 'className',\n        parent: {\n          fileName: 'eui/node_modules/@types/react/index.d.ts',\n          name: 'HTMLAttributes'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'aria-label': {\n        defaultValue: null,\n        description: 'Defines a string value that labels the current element.\\n' + '@see aria-labelledby.',\n        name: 'aria-label',\n        parent: {\n          fileName: 'eui/node_modules/@types/react/index.d.ts',\n          name: 'AriaAttributes'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      'data-test-subj': {\n        defaultValue: null,\n        description: '',\n        name: 'data-test-subj',\n        parent: {\n          fileName: 'eui/src/components/common.ts',\n          name: 'CommonProps'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      isInvalid: {\n        defaultValue: null,\n        description: '',\n        name: 'isInvalid',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      fullWidth: {\n        defaultValue: {\n          value: 'false'\n        },\n        description: '',\n        name: 'fullWidth',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      isLoading: {\n        defaultValue: {\n          value: 'false'\n        },\n        description: '',\n        name: 'isLoading',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      compressed: {\n        defaultValue: {\n          value: 'false'\n        },\n        description: '',\n        name: 'compressed',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      inputRef: {\n        defaultValue: null,\n        description: '',\n        name: 'inputRef',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'Ref<HTMLInputElement>'\n        }\n      },\n      prepend: {\n        defaultValue: null,\n        description: 'Creates an input group with element(s) coming before input.\\n' + '`string` | `ReactElement` or an array of these',\n        name: 'prepend',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'PrependAppendType'\n        }\n      },\n      append: {\n        defaultValue: null,\n        description: 'Creates an input group with element(s) coming after input.\\n' + '`string` | `ReactElement` or an array of these',\n        name: 'append',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'PrependAppendType'\n        }\n      },\n      value: {\n        defaultValue: {\n          value: 'undefined'\n        },\n        description: '',\n        name: 'value',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'string | number'\n        }\n      },\n      type: {\n        defaultValue: {\n          value: 'password'\n        },\n        description: 'Change the `type` of input for manually handling obfuscation.\\n' + 'The `dual` option adds the ability to toggle the obfuscation of the input by\\n' + 'adding an icon button as the first `append` element',\n        name: 'type',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'enum',\n          raw: '\"text\" | \"password\" | \"dual\"',\n          value: [{\n            value: '\"text\"'\n          }, {\n            value: '\"password\"'\n          }, {\n            value: '\"dual\"'\n          }]\n        }\n      },\n      dualToggleProps: {\n        defaultValue: null,\n        description: 'Additional props to apply to the dual toggle. Extends EuiButtonIcon',\n        name: 'dualToggleProps',\n        parent: undefined,\n        required: false,\n        type: {\n          name: 'Partial<EuiButtonIconPropsForButton>'\n        }\n      }\n    },\n    extendedInterfaces: ['HTMLAttributes', 'InputHTMLAttributes', 'AriaAttributes', 'DOMAttributes', 'CommonProps']\n  };\n} catch (e) {}"]}]}