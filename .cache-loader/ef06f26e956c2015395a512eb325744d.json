{"remainingRequest":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js??ref--4-1!D:\\work\\eui\\src-docs\\src\\views\\tree_view\\tree_view_props.tsx","dependencies":[{"path":"D:\\work\\eui\\src-docs\\src\\views\\tree_view\\tree_view_props.tsx","mtime":1649070001187},{"path":"D:\\work\\eui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636976621750},{"path":"D:\\work\\eui\\node_modules\\babel-loader\\lib\\index.js","mtime":1649070120649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JzsKaW1wb3J0IFByb3BUeXBlcyBmcm9tICJwcm9wLXR5cGVzIjsKZXhwb3J0IHZhciBFdWlUcmVlVmlld05vZGUgPSBmdW5jdGlvbiBFdWlUcmVlVmlld05vZGUoKSB7CiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBudWxsKTsKfTsKRXVpVHJlZVZpZXdOb2RlLnByb3BUeXBlcyA9IHsKICAvKiogQW4gYXJyYXkgb2YgRXVpVHJlZVZpZXdOb2RlcyB0byByZW5kZXIgYXMgY2hpbGRyZW4KICAgICAqLwogIGNoaWxkcmVuOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoewogICAgLyoqIEFuIGFycmF5IG9mIEV1aVRyZWVWaWV3Tm9kZXMgdG8gcmVuZGVyIGFzIGNoaWxkcmVuCiAgICAgICAqLwogICAgY2hpbGRyZW46IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZCksCgogICAgLyoqIFRoZSByZWFkYWJsZSBsYWJlbCBmb3IgdGhlIGl0ZW0KICAgICAgICovCiAgICBsYWJlbDogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCwKCiAgICAvKiogQSB1bmlxdWUgSUQKICAgICAgICovCiAgICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLAoKICAgIC8qKiBBbiBpY29uIHRvIHVzZSBvbiB0aGUgbGVmdCBvZiB0aGUgbGFiZWwKICAgICAgICovCiAgICBpY29uOiBQcm9wVHlwZXMuZWxlbWVudCwKCiAgICAvKiogRGlzcGxheSBhIGRpZmZlcmVudCBpY29uIHdoZW4gdGhlIGl0ZW0gaXMgZXhwYW5kZWQuCiAgICAgIEZvciBpbnN0YW5jZSwgYW4gb3BlbiBmb2xkZXIgb3IgYSBkb3duIGFycm93CiAgICAgICovCiAgICBpY29uV2hlbkV4cGFuZGVkOiBQcm9wVHlwZXMuZWxlbWVudCwKCiAgICAvKiogVXNlIGFuIGVtcHR5IGljb24gdG8ga2VlcCBpdGVtcyB3aXRob3V0IGFuIGljb24KICAgICAgbGluZWQgdXAgd2l0aCB0aGVpciBzaWJsaW5ncwogICAgICAqLwogICAgdXNlRW1wdHlJY29uOiBQcm9wVHlwZXMuYm9vbCwKCiAgICAvKiogV2hldGhlciBvciBub3QgdGhlIGl0ZW0gaXMgZXhwYW5kZWQuCiAgICAgICAqLwogICAgaXNFeHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsCgogICAgLyoqIE9wdGlvbmFsIGNsYXNzIHRvIHRocm93IG9uIHRoZSBub2RlCiAgICAgICAqLwogICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLAoKICAgIC8qKiBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGl0ZW0gaXMgY2xpY2tlZC4KICAgICAgIFRoZSBvcGVuIHN0YXRlIG9mIHRoZSBpdGVtIHdpbGwgYWx3YXlzIGJlIHRvZ2dsZWQuCiAgICAgICAqLwogICAgY2FsbGJhY2s6IFByb3BUeXBlcy5mdW5jCiAgfSkuaXNSZXF1aXJlZCksCgogIC8qKiBUaGUgcmVhZGFibGUgbGFiZWwgZm9yIHRoZSBpdGVtCiAgICAgKi8KICBsYWJlbDogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCwKCiAgLyoqIEEgdW5pcXVlIElECiAgICAgKi8KICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLAoKICAvKiogQW4gaWNvbiB0byB1c2Ugb24gdGhlIGxlZnQgb2YgdGhlIGxhYmVsCiAgICAgKi8KICBpY29uOiBQcm9wVHlwZXMuZWxlbWVudCwKCiAgLyoqIERpc3BsYXkgYSBkaWZmZXJlbnQgaWNvbiB3aGVuIHRoZSBpdGVtIGlzIGV4cGFuZGVkLgogICAgRm9yIGluc3RhbmNlLCBhbiBvcGVuIGZvbGRlciBvciBhIGRvd24gYXJyb3cKICAgICovCiAgaWNvbldoZW5FeHBhbmRlZDogUHJvcFR5cGVzLmVsZW1lbnQsCgogIC8qKiBVc2UgYW4gZW1wdHkgaWNvbiB0byBrZWVwIGl0ZW1zIHdpdGhvdXQgYW4gaWNvbgogICAgbGluZWQgdXAgd2l0aCB0aGVpciBzaWJsaW5ncwogICAgKi8KICB1c2VFbXB0eUljb246IFByb3BUeXBlcy5ib29sLAoKICAvKiogV2hldGhlciBvciBub3QgdGhlIGl0ZW0gaXMgZXhwYW5kZWQuCiAgICAgKi8KICBpc0V4cGFuZGVkOiBQcm9wVHlwZXMuYm9vbCwKCiAgLyoqIE9wdGlvbmFsIGNsYXNzIHRvIHRocm93IG9uIHRoZSBub2RlCiAgICAgKi8KICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsCgogIC8qKiBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGl0ZW0gaXMgY2xpY2tlZC4KICAgICBUaGUgb3BlbiBzdGF0ZSBvZiB0aGUgaXRlbSB3aWxsIGFsd2F5cyBiZSB0b2dnbGVkLgogICAgICovCiAgY2FsbGJhY2s6IFByb3BUeXBlcy5mdW5jCn07Cgp0cnkgewogIEV1aVRyZWVWaWV3Tm9kZS5fX2RvY2dlbkluZm8gPSB7CiAgICBkZXNjcmlwdGlvbjogJycsCiAgICBkaXNwbGF5TmFtZTogJ0V1aVRyZWVWaWV3Tm9kZScsCiAgICBtZXRob2RzOiBbXSwKICAgIHByb3BzOiB7CiAgICAgIGNoaWxkcmVuOiB7CiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsLAogICAgICAgIGRlc2NyaXB0aW9uOiAnQW4gYXJyYXkgb2YgRXVpVHJlZVZpZXdOb2RlcyB0byByZW5kZXIgYXMgY2hpbGRyZW4nLAogICAgICAgIG5hbWU6ICdjaGlsZHJlbicsCiAgICAgICAgcGFyZW50OiB7CiAgICAgICAgICBmaWxlTmFtZTogJ2V1aS9zcmMvY29tcG9uZW50cy90cmVlX3ZpZXcvdHJlZV92aWV3LnRzeCcsCiAgICAgICAgICBuYW1lOiAnTm9kZScKICAgICAgICB9LAogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICBuYW1lOiAnTm9kZVtdJwogICAgICAgIH0KICAgICAgfSwKICAgICAgbGFiZWw6IHsKICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGwsCiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgcmVhZGFibGUgbGFiZWwgZm9yIHRoZSBpdGVtJywKICAgICAgICBuYW1lOiAnbGFiZWwnLAogICAgICAgIHBhcmVudDogewogICAgICAgICAgZmlsZU5hbWU6ICdldWkvc3JjL2NvbXBvbmVudHMvdHJlZV92aWV3L3RyZWVfdmlldy50c3gnLAogICAgICAgICAgbmFtZTogJ05vZGUnCiAgICAgICAgfSwKICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICBuYW1lOiAnYW55JwogICAgICAgIH0KICAgICAgfSwKICAgICAgaWQ6IHsKICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGwsCiAgICAgICAgZGVzY3JpcHRpb246ICdBIHVuaXF1ZSBJRCcsCiAgICAgICAgbmFtZTogJ2lkJywKICAgICAgICBwYXJlbnQ6IHsKICAgICAgICAgIGZpbGVOYW1lOiAnZXVpL3NyYy9jb21wb25lbnRzL3RyZWVfdmlldy90cmVlX3ZpZXcudHN4JywKICAgICAgICAgIG5hbWU6ICdOb2RlJwogICAgICAgIH0sCiAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgdHlwZTogewogICAgICAgICAgbmFtZTogJ3N0cmluZycKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGljb246IHsKICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGwsCiAgICAgICAgZGVzY3JpcHRpb246ICdBbiBpY29uIHRvIHVzZSBvbiB0aGUgbGVmdCBvZiB0aGUgbGFiZWwnLAogICAgICAgIG5hbWU6ICdpY29uJywKICAgICAgICBwYXJlbnQ6IHsKICAgICAgICAgIGZpbGVOYW1lOiAnZXVpL3NyYy9jb21wb25lbnRzL3RyZWVfdmlldy90cmVlX3ZpZXcudHN4JywKICAgICAgICAgIG5hbWU6ICdOb2RlJwogICAgICAgIH0sCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6IHsKICAgICAgICAgIG5hbWU6ICdhbnknCiAgICAgICAgfQogICAgICB9LAogICAgICBpY29uV2hlbkV4cGFuZGVkOiB7CiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsLAogICAgICAgIGRlc2NyaXB0aW9uOiAnRGlzcGxheSBhIGRpZmZlcmVudCBpY29uIHdoZW4gdGhlIGl0ZW0gaXMgZXhwYW5kZWQuXG4nICsgJ0ZvciBpbnN0YW5jZSwgYW4gb3BlbiBmb2xkZXIgb3IgYSBkb3duIGFycm93JywKICAgICAgICBuYW1lOiAnaWNvbldoZW5FeHBhbmRlZCcsCiAgICAgICAgcGFyZW50OiB7CiAgICAgICAgICBmaWxlTmFtZTogJ2V1aS9zcmMvY29tcG9uZW50cy90cmVlX3ZpZXcvdHJlZV92aWV3LnRzeCcsCiAgICAgICAgICBuYW1lOiAnTm9kZScKICAgICAgICB9LAogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICBuYW1lOiAnYW55JwogICAgICAgIH0KICAgICAgfSwKICAgICAgdXNlRW1wdHlJY29uOiB7CiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsLAogICAgICAgIGRlc2NyaXB0aW9uOiAnVXNlIGFuIGVtcHR5IGljb24gdG8ga2VlcCBpdGVtcyB3aXRob3V0IGFuIGljb25cbicgKyAnbGluZWQgdXAgd2l0aCB0aGVpciBzaWJsaW5ncycsCiAgICAgICAgbmFtZTogJ3VzZUVtcHR5SWNvbicsCiAgICAgICAgcGFyZW50OiB7CiAgICAgICAgICBmaWxlTmFtZTogJ2V1aS9zcmMvY29tcG9uZW50cy90cmVlX3ZpZXcvdHJlZV92aWV3LnRzeCcsCiAgICAgICAgICBuYW1lOiAnTm9kZScKICAgICAgICB9LAogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICBuYW1lOiAnYm9vbGVhbicKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGlzRXhwYW5kZWQ6IHsKICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGwsCiAgICAgICAgZGVzY3JpcHRpb246ICdXaGV0aGVyIG9yIG5vdCB0aGUgaXRlbSBpcyBleHBhbmRlZC4nLAogICAgICAgIG5hbWU6ICdpc0V4cGFuZGVkJywKICAgICAgICBwYXJlbnQ6IHsKICAgICAgICAgIGZpbGVOYW1lOiAnZXVpL3NyYy9jb21wb25lbnRzL3RyZWVfdmlldy90cmVlX3ZpZXcudHN4JywKICAgICAgICAgIG5hbWU6ICdOb2RlJwogICAgICAgIH0sCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgIHR5cGU6IHsKICAgICAgICAgIG5hbWU6ICdib29sZWFuJwogICAgICAgIH0KICAgICAgfSwKICAgICAgY2xhc3NOYW1lOiB7CiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsLAogICAgICAgIGRlc2NyaXB0aW9uOiAnT3B0aW9uYWwgY2xhc3MgdG8gdGhyb3cgb24gdGhlIG5vZGUnLAogICAgICAgIG5hbWU6ICdjbGFzc05hbWUnLAogICAgICAgIHBhcmVudDogewogICAgICAgICAgZmlsZU5hbWU6ICdldWkvc3JjL2NvbXBvbmVudHMvdHJlZV92aWV3L3RyZWVfdmlldy50c3gnLAogICAgICAgICAgbmFtZTogJ05vZGUnCiAgICAgICAgfSwKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogewogICAgICAgICAgbmFtZTogJ3N0cmluZycKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGNhbGxiYWNrOiB7CiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsLAogICAgICAgIGRlc2NyaXB0aW9uOiAnRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBpdGVtIGlzIGNsaWNrZWQuXG4nICsgJ1RoZSBvcGVuIHN0YXRlIG9mIHRoZSBpdGVtIHdpbGwgYWx3YXlzIGJlIHRvZ2dsZWQuJywKICAgICAgICBuYW1lOiAnY2FsbGJhY2snLAogICAgICAgIHBhcmVudDogewogICAgICAgICAgZmlsZU5hbWU6ICdldWkvc3JjL2NvbXBvbmVudHMvdHJlZV92aWV3L3RyZWVfdmlldy50c3gnLAogICAgICAgICAgbmFtZTogJ05vZGUnCiAgICAgICAgfSwKICAgICAgICByZXF1aXJlZDogZmFsc2UsCiAgICAgICAgdHlwZTogewogICAgICAgICAgbmFtZTogJygpID0+IHN0cmluZycKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBleHRlbmRlZEludGVyZmFjZXM6IFsnTm9kZSddCiAgfTsKfSBjYXRjaCAoZSkge30="},{"version":3,"sources":["D:/work/eui/src-docs/src/views/tree_view/tree_view_props.tsx"],"names":["React","EuiTreeViewNode"],"mappings":"AAAA,OAAOA,KAAP,MAAyC,OAAzC;;AAGA,OAAO,IAAMC,eAAwC,GAAG,SAA3CA,eAA2C;AAAA,sBAAM,gCAAN;AAAA,CAAjD;;;AAHP;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;AACA;;;;AADA;AACA;;;;AADA;;;;AAAA;;;;AAAA;AACA;;;;;AADA;;;;AAAA;;;;AAAA;;;;AAAA;AACA;;;;AADA;AACA;;;;AADA;;;;AAAA;;;;AAAA;AACA","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nexport var EuiTreeViewNode = () => <div />;\nEuiTreeViewNode.propTypes = {\n  /** An array of EuiTreeViewNodes to render as children\n     */\n  children: PropTypes.arrayOf(PropTypes.shape({\n    /** An array of EuiTreeViewNodes to render as children\n       */\n    children: PropTypes.arrayOf(PropTypes.any.isRequired),\n\n    /** The readable label for the item\n       */\n    label: PropTypes.node.isRequired,\n\n    /** A unique ID\n       */\n    id: PropTypes.string.isRequired,\n\n    /** An icon to use on the left of the label\n       */\n    icon: PropTypes.element,\n\n    /** Display a different icon when the item is expanded.\n      For instance, an open folder or a down arrow\n      */\n    iconWhenExpanded: PropTypes.element,\n\n    /** Use an empty icon to keep items without an icon\n      lined up with their siblings\n      */\n    useEmptyIcon: PropTypes.bool,\n\n    /** Whether or not the item is expanded.\n       */\n    isExpanded: PropTypes.bool,\n\n    /** Optional class to throw on the node\n       */\n    className: PropTypes.string,\n\n    /** Function to call when the item is clicked.\n       The open state of the item will always be toggled.\n       */\n    callback: PropTypes.func\n  }).isRequired),\n\n  /** The readable label for the item\n     */\n  label: PropTypes.node.isRequired,\n\n  /** A unique ID\n     */\n  id: PropTypes.string.isRequired,\n\n  /** An icon to use on the left of the label\n     */\n  icon: PropTypes.element,\n\n  /** Display a different icon when the item is expanded.\n    For instance, an open folder or a down arrow\n    */\n  iconWhenExpanded: PropTypes.element,\n\n  /** Use an empty icon to keep items without an icon\n    lined up with their siblings\n    */\n  useEmptyIcon: PropTypes.bool,\n\n  /** Whether or not the item is expanded.\n     */\n  isExpanded: PropTypes.bool,\n\n  /** Optional class to throw on the node\n     */\n  className: PropTypes.string,\n\n  /** Function to call when the item is clicked.\n     The open state of the item will always be toggled.\n     */\n  callback: PropTypes.func\n};\n\ntry {\n  EuiTreeViewNode.__docgenInfo = {\n    description: '',\n    displayName: 'EuiTreeViewNode',\n    methods: [],\n    props: {\n      children: {\n        defaultValue: null,\n        description: 'An array of EuiTreeViewNodes to render as children',\n        name: 'children',\n        parent: {\n          fileName: 'eui/src/components/tree_view/tree_view.tsx',\n          name: 'Node'\n        },\n        required: false,\n        type: {\n          name: 'Node[]'\n        }\n      },\n      label: {\n        defaultValue: null,\n        description: 'The readable label for the item',\n        name: 'label',\n        parent: {\n          fileName: 'eui/src/components/tree_view/tree_view.tsx',\n          name: 'Node'\n        },\n        required: true,\n        type: {\n          name: 'any'\n        }\n      },\n      id: {\n        defaultValue: null,\n        description: 'A unique ID',\n        name: 'id',\n        parent: {\n          fileName: 'eui/src/components/tree_view/tree_view.tsx',\n          name: 'Node'\n        },\n        required: true,\n        type: {\n          name: 'string'\n        }\n      },\n      icon: {\n        defaultValue: null,\n        description: 'An icon to use on the left of the label',\n        name: 'icon',\n        parent: {\n          fileName: 'eui/src/components/tree_view/tree_view.tsx',\n          name: 'Node'\n        },\n        required: false,\n        type: {\n          name: 'any'\n        }\n      },\n      iconWhenExpanded: {\n        defaultValue: null,\n        description: 'Display a different icon when the item is expanded.\\n' + 'For instance, an open folder or a down arrow',\n        name: 'iconWhenExpanded',\n        parent: {\n          fileName: 'eui/src/components/tree_view/tree_view.tsx',\n          name: 'Node'\n        },\n        required: false,\n        type: {\n          name: 'any'\n        }\n      },\n      useEmptyIcon: {\n        defaultValue: null,\n        description: 'Use an empty icon to keep items without an icon\\n' + 'lined up with their siblings',\n        name: 'useEmptyIcon',\n        parent: {\n          fileName: 'eui/src/components/tree_view/tree_view.tsx',\n          name: 'Node'\n        },\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      isExpanded: {\n        defaultValue: null,\n        description: 'Whether or not the item is expanded.',\n        name: 'isExpanded',\n        parent: {\n          fileName: 'eui/src/components/tree_view/tree_view.tsx',\n          name: 'Node'\n        },\n        required: false,\n        type: {\n          name: 'boolean'\n        }\n      },\n      className: {\n        defaultValue: null,\n        description: 'Optional class to throw on the node',\n        name: 'className',\n        parent: {\n          fileName: 'eui/src/components/tree_view/tree_view.tsx',\n          name: 'Node'\n        },\n        required: false,\n        type: {\n          name: 'string'\n        }\n      },\n      callback: {\n        defaultValue: null,\n        description: 'Function to call when the item is clicked.\\n' + 'The open state of the item will always be toggled.',\n        name: 'callback',\n        parent: {\n          fileName: 'eui/src/components/tree_view/tree_view.tsx',\n          name: 'Node'\n        },\n        required: false,\n        type: {\n          name: '() => string'\n        }\n      }\n    },\n    extendedInterfaces: ['Node']\n  };\n} catch (e) {}"]}]}